{"version":3,"mappings":"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9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,OACN+K,KAAM,WAER,CACED,aAAc,OACd9K,KAAM,gBACN+K,KAAM,QAER,CACED,aAAc,SACd9K,KAAM,QACN+K,KAAM,UAER,CACED,aAAc,SACd9K,KAAM,gBACN+K,KAAM,WAGVD,aAAc,oCACd9K,KAAM,cACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,OACd9K,KAAM,cACN+K,KAAM,SAGV/K,KAAM,mCACN6K,QAAS,CACP,CACEC,aAAc,YACd9K,KAAM,GACN+K,KAAM,aAER,CACED,aAAc,YACd9K,KAAM,GACN+K,KAAM,cAGVC,gBAAiB,OACjBD,KAAM,WACNsP,UAAU,GAEZ,CACEzP,OAAQ,CACN,CACEE,aAAc,YACd9K,KAAM,cACN+K,KAAM,cAGV/K,KAAM,sBACN6K,QAAS,GACTG,gBAAiB,aACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,WACd9K,KAAM,QACN+K,KAAM,YAER,CACED,aAAc,YACd9K,KAAM,cACN+K,KAAM,aAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,YAGV/K,KAAM,uBACN6K,QAAS,GACTG,gBAAiB,UACjBD,KAAM,WACNoP,SAAS,GAEX,CACEvP,OAAQ,CACN,CACEE,aAAc,WACd9K,KAAM,QACN+K,KAAM,YAER,CACED,aAAc,YACd9K,KAAM,cACN+K,KAAM,aAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAA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,UACd9K,KAAM,OACN+K,KAAM,WAER,CACEmP,SAAS,EACTpP,aAAc,UACd9K,KAAM,QACN+K,KAAM,YAGV/K,KAAM,WACN+K,KAAM,SAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACd9K,KAAM,OACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,SACd9K,KAAM,MACN+K,KAAM,WAGV/K,KAAM,YACN6K,QAAS,GACTG,gBAAiB,aACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACd9K,KAAM,OACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,SACd9K,KAAM,MACN+K,KAAM,WAGV/K,KAAM,mBACN6K,QAAS,GACTG,gBAAiB,aACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACd9K,KAAM,OACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,YAGV/K,KAAM,kBACN6K,QAAS,CACP,CACEC,aAAc,UACd9K,KAAM,GACN+K,KAAM,YAGVC,gBAAiB,aACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACd9K,KAAM,OACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,YAGV/K,KAAM,cACN6K,QAAS,GACTG,gBAAiB,aACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACd9K,KAAM,OACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,YAGV/K,KAAM,WACN6K,QAAS,GACTG,gBAAiB,aACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACd9K,KAAM,OACN+K,KAAM,WAER,CACED,aAAc,SACd9K,KAAM,MACN+K,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aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,OACN+K,KAAM,YAGV/K,KAAM,2BACN6K,QAAS,CACP,CACEC,aAAc,UACd9K,KAAM,GACN+K,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACd9K,KAAM,aACN+K,KAAM,YAGV/K,KAAM,SACN6K,QAAS,GACTG,gBAAiB,aACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,YAGV/K,KAAM,WACN6K,QAAS,GACTG,gBAAiB,UACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,OACN+K,KAAM,YAGV/K,KAAM,qBACN6K,QAAS,GACTG,gBAAiB,UACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,YAGV/K,KAAM,QACN6K,QAAS,GACTG,gBAAiB,UACjBD,KAAM,aCnTG4S,EAA4B,CACvC,CACE1D,WAAW,EACXrP,OAAQ,CACN,CACEsP,SAAS,EACTpP,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACEmP,SAAS,EACTpP,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACEmP,SAAS,EACTpP,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACEmP,SAAS,EACTpP,aAAc,UACd9K,KAAM,OACN+K,KAAM,WAER,CACEmP,SAAS,EACTpP,aAAc,UACd9K,KAAM,UACN+K,KAAM,YAGV/K,KAAM,iBACN+K,KAAM,SAER,CACEkP,WAAW,EACXrP,OAAQ,CACN,CACEsP,SAAS,EACTpP,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACEmP,SAAS,EACTpP,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACEmP,SAAS,EACTpP,aAAc,UACd9K,KAAM,OACN+K,KAAM,WAER,CACEmP,SAAS,EACTpP,aAAc,UACd9K,KAAM,UACN+K,KAAM,YAGV/K,KAAM,cACN+K,KAAM,SAER,CACEkP,WAAW,EACXrP,OAAQ,CACN,CACEsP,SAAS,EACTpP,aAAc,UACd9K,KAAM,SACN+K,KAAM,YAGV/K,KAAM,iBACN+K,KAAM,SAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,YAGV/K,KAAM,YACN6K,QAAS,CACP,CACEC,aAAc,UACd9K,KAAM,GACN+K,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,WAGV/K,KAAM,QACN6K,QAAS,CACP,CACEC,aAAc,OACd9K,KAAM,GACN+K,KAAM,SAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,WAGV/K,KAAM,YACN6K,QAAS,CACP,CACEC,aAAc,OACd9K,KAAM,GACN+K,KAAM,SAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,YAGV/K,KAAM,iBACN6K,QAAS,CACP,CACEC,aAAc,UACd9K,KAAM,GACN+K,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,OACN+K,KAAM,YAGV/K,KAAM,2BACN6K,QAAS,CACP,CACEC,aAAc,UACd9K,KAAM,GACN+K,KAAM,YAGVC,gBAAiB,OACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,UACd9K,KAAM,aACN+K,KAAM,YAGV/K,KAAM,SACN6K,QAAS,GACTG,gBAAiB,aACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,YAGV/K,KAAM,WACN6K,QAAS,GACTG,gBAAiB,UACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,QACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,SACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,WAER,CACED,aAAc,UACd9K,KAAM,OACN+K,KAAM,YAGV/K,KAAM,qBACN6K,QAAS,GACTG,gBAAiB,UACjBD,KAAM,YAER,CACEH,OAAQ,CACN,CACEE,aAAc,SACd9K,KAAM,OACN+K,KAAM,UAER,CACED,aAAc,UACd9K,KAAM,WACN+K,KAAM,YAGV/K,KAAM,QACN6K,QAAS,GACTG,gBAAiB,UACjBD,KAAM,4BCxSH,MAIM6S,EAAoB,CAC/BC,QAAS,qEACTC,QAAS,qEACTC,KAAM,qEACNC,UACE,sEAEG,IAAKC,EAKX,MALD,OAAYA,QAAe,KACzBA,kBACAA,oBACAA,cACAA,wBAJUA,EAAZ,IAAYA,GAKX,GAKM,IAAMtc,EAAb,MAAM,QACJnE,eAEA0gB,cAAcC,EAA8BxD,EAAe1E,GACzD,MAAMmI,EAAe9V,OAAOsH,OAAOgO,GAC7BS,EAAU/V,OAAOC,KAAKqV,GAC5B,IAAIU,EAAcrI,EAAGsI,KAAKrV,OAAQqJ,MAC5B6L,EAAalV,OAAQrL,GAAM0U,EAAEiM,OAAOC,SAAS5gB,IAAI2J,OAAS,GAI5D+K,EAAEiM,OAAOC,SAAS9D,IAClBpI,EAAEiM,OAAOC,SAASN,IAClB5L,EAAEiM,OAAOC,SAAS/sB,4BAMlBgtB,EAAqC,GACzC,MAAMC,EACJvU,UAAsB+T,GAAsBvL,cACxCgM,EACJxU,UAAsBpY,MAAoB4gB,cAC5C,UAAWL,KAAK+L,EAAa,CAC3B,MAAMO,EAAkBtM,EAAEiM,OAAO9V,IAAKoW,IAC7B1U,UAAsB0U,IAAGlM,eAElC,GAAIwL,EAAaK,SAASI,EAAgB,IAAK,CAC7C,MAAME,GAAcV,EAAQD,EAAaxH,QAAQiI,EAAgB,KAC3DG,GAAcvhB,KAAKwhB,eACvBhB,EAAgBc,IAChBxM,EACAsM,EACA5I,GAEIiJ,GAAezhB,KAAK0hB,gBACxBlB,EAAgBc,IAChBxM,EACAsM,EACA5I,GAEFyI,EAAkB9V,KAAK,CACrBmC,KAAMrK,SACNgL,KAAMwT,GAAaxI,cACnBwC,GAAI8F,GAAYtI,cAChB0I,OAAQnJ,EAAGoJ,gBACX1a,MAAOlH,KAAK6hB,eAAerJ,EAAGtR,OAC9B4a,KAAMtJ,EAAGuJ,oBAGVX,EAAgB,KACfntB,wCACAmtB,EAAgB,KAAOD,GAzE/B,uEA0EOC,EAAgB,IACfA,EAAgB,KAAOF,GACvBE,EAAgB,KAAOlE,EACzB,CACA,MAAM8E,GAAaZ,EAAgB,GACnCH,EAAkB9V,KAAK,CACrBmC,KAAMrK,iBACNgL,KAAMha,uCACNwnB,GAAIuG,GAAW/I,cACf0I,OAAQnJ,EAAGoJ,gBACX1a,MAAOlH,KAAK6hB,eAAerJ,EAAGtR,OAC9B4a,KAAMtJ,EAAGuJ,iBAGVX,EAAgB,KAAOD,GACtBC,EAAgB,KACdntB,wCACHmtB,EAAgB,KAAOD,GACtBC,EAAgB,KAAOlE,EAEzB+D,EAAkB9V,KAAK,CACrBmC,KAAMrK,SACNgL,KAAM,KACNwN,GAAIxnB,uCACJ0tB,OAAQnJ,EAAGoJ,gBACX1a,MAAOlH,KAAK6hB,eAAerJ,EAAGtR,OAC9B4a,KAAMtJ,EAAGuJ,YAENE,EAAoB,KAAOd,EAChCF,EAAkB9V,KAAK,CACrBmC,KAAMrK,SACNgL,KAAMmT,EAAgB,GACtB3F,GAAI,KACJkG,OAAQnJ,EAAGoJ,gBACX1a,MAAOlH,KAAK6hB,eAAerJ,EAAGtR,OAC9B4a,KAAMtJ,EAAGuJ,YAGXX,EAAgB,KAAOntB,wCACvBmtB,EAAgB,KAAOD,GACvBC,EAAgB,KAAOntB,wCACvBmtB,EAAgB,KAAOD,GACO,KAA9BC,EAAgB,GAAGrX,QACW,KAA9BqX,EAAgB,GAAGrX,QAEnBkX,EAAkB9V,KAAK,CACrBmC,KAAMrK,aACNgL,KAAMmT,EAAgB,GAAGnI,cACzBwC,GAAI2F,EAAgB,GAAGnI,cACvB0I,OAAQnJ,EAAGoJ,gBACX1a,MAAOlH,KAAK6hB,eAAerJ,EAAGtR,OAC9B4a,KAAMtJ,EAAGuJ,YAIf,MAAMG,EAAY,IAAIlX,IACtB,IAAImX,EAAiBlB,EACrB,OAAIA,EAAkBhW,IAAKmX,GAAOA,EAAG9U,MAAM0T,SAAS/d,YAClDkf,EAAiBlB,EAAkBxV,OAAQ8I,GACrCA,EAAEjH,OAASrK,WAMZkf,EAAe1W,OAAQ8I,IAC5B,MAAM8N,EAAcH,EAAUI,IAAI/N,EAAEjH,KAAOiH,EAAEoN,QAE7C,OADAO,EAAUxC,IAAInL,EAAEjH,KAAOiH,EAAEoN,SACL,IAAhBU,IAORR,eAAe3a,GACb,OAAO6K,WACLpF,KAAyBA,UAAsBzF,GAAOsH,aACtDwD,QAAQ,GAGZwP,eACEe,EACAC,EACAC,EACAjK,GAEA,OAAQ+J,QACD/B,EAAgBJ,QAEjB,OAAOqC,EAAM,QAGZjC,EAAgBD,UAEPtS,KAGTuS,EAAgBH,QAEPpS,KAGTuS,EAAgBF,KAEjB,OAAO9H,EAAGvK,MAMlByT,gBACEa,EACAC,EACAC,EACAjK,GAEA,OAAQ+J,QACD/B,EAAgBJ,QAOJ,KAGZI,EAAgBH,QAEjB,OAAOoC,EAAM,GAVA,KAGZjC,EAAgBD,UAEjB,OAAOkC,EAAM,GAKA,KAGZjC,EAAgBF,KACnB,CACE,MAAMrR,EAAOuT,EAAevT,KAAKqI,UAAU,GAAGoL,MAAM,YACpD,OAAO/V,UAAsB,KAAOsC,EAAK,IAAIkG,gBAMrDwN,eAAe7G,GAMb,OALiB,IAAIpN,KACnBza,eACA+L,KAAK4iB,eACL9G,GAKJ+G,kCAAkC/G,GAMhC,OALiB,IAAIpN,KACnBza,yBACA+L,KAAK8iB,kCACLhH,GAKAgH,wCACF,OAAyB,IAArB9W,SACKiU,EAEFC,EAGL0C,qBACF,OAAyB,IAArB5W,SACK+T,EAEFC,gDAjOE9b,gCAAuB7D,QAAvB6D,EAAuB,qBAFtB,SAEDA,GAAb,uFCxBO,IAAME,EAAb,MAAM,QACJrE,YAAsBgjB,mBAEtBC,qBAEE,OADWhjB,KAAKijB,2BACNlZ,OAGZmZ,oBACE,OAAOjZ,aAAaC,QAAQ,wBAG9B+Y,2BACE,MAAME,EAAiBnjB,KAAKkjB,oBAC5B,OACqB,OAAnBC,GACmB,SAAnBA,GACmB,KAAnBA,GACmB,OAAnBA,EAEO/Y,KAAKC,MAAM8Y,GAEb,GAGTC,kBAAkB7Y,GAChB,GACEvK,KAAKijB,2BAA2BlZ,QAChCzJ,0BAaA,YAXAN,KAAK+iB,SAASrT,KACZ,qBACEpP,0BACA,8BACF,QACA,CACE+iB,mBAAoB,SACpBC,iBAAkB,SAClB1R,SAAU,OAKhB,MAAM2R,EAAmBvjB,KAAKijB,2BAA2BxY,OACvD,CAACC,EAAaxD,KACL,IAAKwD,GAAcxD,EAAMyD,WAAYzD,IAE9C,IAEI0D,EAAQC,OAAOC,KAAKyY,GACpBC,EAAgB,IAAI,IAAIxY,IAAIJ,IAAQK,IAAKC,GAAMqY,EAAiBrY,IACtEsY,SAAcrY,KAAKZ,GACnBN,aAAamB,QAAQ,uBAAwBhB,KAAKiB,UAAUmY,IACrDA,EAGTC,mBACED,EACAjY,GAEA,MAAMmY,EAAuB,GAC7BF,SAAc/X,OAAQC,IAChBA,EAAEf,YAAcY,GAClBmY,EAAqBvY,KAAKO,KAG9BzB,aAAamB,QACX,uBACAhB,KAAKiB,UAAUqY,IAEVA,EAGTC,yBACE,OAAO1Z,aAAamB,QAAQ,uBAAwB,IAGtDwY,2BACEJ,EACAjY,GAEA,UAAWG,KAAK8X,EACd,GAAI9X,EAAEf,YAAcY,EAClB,OAAO,EAGX,OAAO,gDAtFEnH,GAA0BwK,wCAA1BxK,EAA0B/D,QAA1B+D,EAA0B,qBAFzB,SAEDA,GAAb,wECFO,IAAMyf,EAAb,MAAM,QACJ9jB,YAAmB+jB,6BACnB7c,UAAUC,GACR,IAAKA,QAAmBwN,IAAVxN,GAAuBA,EAAM6C,QAAU,EACnD,OAAO,KAET,MAAMga,EAAW/jB,KAAK8jB,mBAAmBE,cACnCC,EAAejkB,KAAK8jB,mBAAmBI,eAAeH,GACtDI,EAAYjd,EAAMmS,MAAM,KAC9B,GAAInS,EAAMiS,QAAQ,OAAQ,GAAMjS,KAAS+c,EAAaG,QACpD,OAAOH,EAAaG,QAAQld,GAE9B,IAAImd,EACJ,UAAWC,KAAOH,EAChB,GAAKE,EAKE,CACL,KAAIC,KAAOD,GACT,OAAOnd,EAETmd,EAAaA,EAAWC,OATT,CACf,KAAIA,KAAOL,EAAaG,SACtB,OAAOld,EAETmd,EAAaJ,EAAaG,QAAQE,GAQtC,OAAOD,gDA1BER,GAAejV,0DAAfiV,EAAetc,UAAfsc,GAAb,2ECGO,IAAMhgB,EAAb,MAAM,QACJqgB,eAAeK,GACb,OACEA,KAAQzlB,WACoB4V,IAA5B5V,KAAkBylB,GAIbzlB,KAAkBylB,GAFhBzlB,QAKXklB,cACE,MAAMQ,EAAgBxkB,KAAKykB,eAC3B,OACoB,OAAlBD,GACkB,KAAlBA,QACkB9P,IAAlB8P,GACAA,KAAiB1lB,KAEV0lB,EACEE,UAAUX,SACZW,UAAUX,SAAS1K,MAAM,KAAK,GAE9B/Y,qBAIXqkB,YACE,OAAOD,UAAUX,SAASha,QAAU,EAAI,QAAU2a,UAAUX,SAG9Da,yBAAyBN,GAEvB,OAAOO,KADkBX,eAAelkB,KAAKgkB,eAC1BI,QAAQE,GAG7BQ,QAAQR,GAEN,OAAOO,KADkBX,eAAelkB,KAAKgkB,eAC1BI,QAAQE,GAG7BG,eACE,OAAOxa,aAAaC,QAAQ,mBAG9B6a,aAAahB,GACX9Z,aAAamB,QAAQ,kBAAmB2Y,iDA9C/BlgB,gCAAkBxD,QAAlBwD,EAAkB,qBAFjB,SAEDA,GAAb,gICEO,IAAMR,EAAb,MAAM,QACJtD,YACS2W,EACAyE,GADAnb,kBACAA,qBAGTglB,eAAejJ,GACb,MAAM1Z,EAAM2J,aAAqBA,kBAA0BkE,cAC3D,OAAO,IAAIC,IAAYC,IACrB,MAAMC,EAAQC;;6DAEyCyL;;;;;;;;;;;;;;;;SAiBvDxL,aAAQlO,EAAKgO,GAAOI,KAAMxB,IACxBmB,EAASM,KAAKzB,GACdmB,EAASO,eAKfsU,cAAcnJ,EAAoBoJ,GAChC,OAAO,IAAI/U,IAAYC,IACpB0L,EACEE,YAAYkJ,GACZzU,KAAM8D,IACLnE,EAASM,KAAK6D,GACdnE,EAASO,aAEVkE,MAAOC,IACN1E,EAASM,MAAK,GACdN,EAASO,eAKjBwU,WAAWrJ,EAAoBC,GAC7B,OAAO,IAAI5L,IAAYC,IACpB0L,EACEsJ,cAAcrJ,GACdtL,KAAM8D,IACLnE,EAASM,KAAK6D,GACdnE,EAASO,aAEVkE,MAAOC,IACN1E,EAASM,MAAK,GACdN,EAASO,eAKjB0U,YAAYvJ,EAAoBoJ,EAAiBI,GAC/C,OAAO,IAAInV,IAAYC,IACpB0L,EACEyJ,YAAYL,GACZzU,KAAMtc,GACEA,EAAS2wB,QAAQQ,IAEzB7U,KAAM8D,IACLnE,EAASM,KAAK6D,GACdnE,EAASO,aAEVkE,MAAOC,IACN1E,EAASM,MAAK,GACdN,EAASO,eAKjB6U,mBAAmB1J,EAAoBoJ,GACrC,OAAO,IAAI/U,IAAYC,IACpB0L,EACEyJ,YAAYL,GACZzU,KAAMtc,GACEA,EAASsxB,kBAEjBhV,KAAM8D,IACL,IAAImR,EAAW,WACXnR,EAAE4E,QAAQ,UAAW,EACvBuM,GAAY,gBAAkBnR,EAAE1B,QAAQ,UAAW,IAC1C0B,EAAE4E,QAAQ,UAAW,IAC9BuM,GAAY,wBAA0BnR,EAAE1B,QAAQ,UAAW,KAE7DzC,EAASM,KAAKgV,GACdtV,EAASO,aAEVkE,MAAOC,IACN1E,EAASM,MAAK,GACdN,EAASO,6DAtGNtN,GAAWuL,mDAAXvL,EAAWhD,QAAXgD,EAAW,qBAFV,SAEDA,GAAb,6DCEO,IAAMC,EAAb,MAAM,QACJvD,YAAmB4lB,0BAEnBC,kBACE3b,aAAa0Q,WAAW,uBACxB1Q,aAAa0Q,WAAW,iBACxB1Q,aAAa0Q,WAAW,iCAG1BkL,gBAAgBC,GACd7b,aAAamB,QAAQ,sBAAuBhB,KAAKiB,UAAUya,IAG7DC,kBACE,OAAO9b,aAAaC,QAAQ,uBAG9B8b,uBACEjO,EACAkO,EAAiC,MAEjC,IAAIC,EACJ,OAAqB,OAAjBD,EACFC,EAAclmB,KAAKmmB,kCAAkCpO,GAChDqO,EAAiB9Y,OAASrI,YAC/BihB,EAAclmB,KAAKqmB,2BACjBtO,EACAkO,EAAa9I,QAEN8I,EAAa3Y,OAASrI,WAC/BihB,EAAclmB,KAAKsmB,0BACjBvO,EACAkO,EAAaM,GACbN,EAAa9I,QAEN8I,EAAa3Y,OAASrI,aAC/BihB,EAAclmB,KAAKwmB,wBAAwBzO,EAASkO,EAAa5jB,MAE5D6jB,EAGTO,oBACE,OAAOza,aAAqBA,kBAA0B+L,QAGxDoO,kCAAkCO,GAChC,OAAO,IAAIC,IACTD,EACA1a,aAAqBA,kBAA0B4a,aAInDP,2BAA2BK,EAAevJ,GACxC,OAAO,IAAIwJ,IAAmCD,EAAOvJ,GAGvDmJ,0BAA0BI,EAAeH,EAAYpJ,GACnD,OAAO,IAAIwJ,IAAyBD,EAAO,CACzCG,UAAWN,EACXO,cAAe3J,IAInBqJ,wBAAwBE,EAAerkB,GACrC,OAAO,IAAIskB,IAA0BtkB,EAAKqkB,iDAhEjCpjB,GAAkBsL,uCAAlBtL,EAAkBjD,QAAlBiD,EAAkB,qBAFjB,SAEDA,GAAb,4KCDA,MAAMkK,WAKC,IAAMlJ,EAAb,MAAM,QACJvE,YACS+T,EACA0D,EACAzD,EACA2C,EACGqQ,GAJH/mB,iBACAA,yBACAA,mBACAA,kBACGA,cAEV,MAAMgnB,GAAU,IAAI5f,MAAOgK,UAC3B,QAAgCsD,IAA5BlH,EAAUyZ,cAA6B,CACzC,MAAMC,EAAY,IAAIC,IAAc,CAClCC,OAAQ,mCACRC,YAAaC,IACbC,mBAAoB,CAClBC,YAAalnB,oCACbmnB,aAAc,IAEhBC,WAAYpnB,eAEd4mB,EAAUpP,GAAG,UAAW,CAAC6P,EAAOhT,KAC9B,GAAIgT,EACF,MAAMA,EAER,MAAQvP,WAAUL,WAAYpD,EAAQ4D,OAAO,GAE7C,GADuB/K,EAAUuK,UACVA,EAMrB,OALA/X,KAAKwX,kBAAkBoQ,aAEvBC,EADqBZ,cAClBa,cACH9nB,KAAK0W,WAAWqR,cAAc5kB,wBAC9BnD,KAAK+T,YAAYiE,oBAAoB3Q,SAAS0Q,EAAS,KAGzD/X,KAAKgU,QAAQgT,EAAS5O,EAAS,MAEjC8O,EAAUpP,GAAG,iBAAkB,CAAC6P,EAAOhT,KACrC,GAAIgT,EACF,MAAMA,EAER,MAAQvP,WAAUL,WAAYpD,EAAQ4D,OAAO,GAG7C,GAFuB/K,EAAUuK,UAGZA,GAFEvK,EAAUwa,aAGhBjM,cAAc9C,gBAC3Bb,EAAS,GAAGa,cAQd,OANAjZ,KAAKwX,kBAAkBoQ,aAEvBC,EADqBZ,cAClBa,cACH9nB,KAAK+T,YAAYiE,oBAAoB3Q,SAAS0Q,EAAS,KACvD/X,KAAKwX,kBAAkBoQ,kBACvB5nB,KAAK+T,YAAYkU,cAAc,OAAQvnB,YAI3CwmB,EAAUpP,GAAG,aAAc,CAAC6P,EAAOhT,KACjC,GAAIgT,EACF,MAAMA,IAGVna,EAAUyZ,cAAgBC,GAI9BgB,gBACE1a,EAAUyZ,cAAciB,gBAG1BlU,QAAQC,EAAckU,GACpBnoB,KAAK0W,WAAW0R,aAAa,CAC3BC,WAAYhjB,mBACZ7R,QAAS20B,IAIblQ,aACE,OAAOzK,EAAUuK,QAGnBhD,YAAYuD,GACV,OAAO,IAAInI,IAAYC,IACrB5C,EAAUyZ,cACPqB,gBAAgBhQ,GAChB7H,KAAM+H,IACL,GAAW,OAAPA,GAAeA,EAAGzO,QAAU,QAAY2K,IAAP8D,EAGnC,OAFApI,EAASM,MAAK,QACdN,EAASO,WAGXP,EAASM,KAAK8H,GACdpI,EAASO,aAGVkE,MAAOC,IACN1E,EAASM,MAAK,GACdN,EAASO,6DAhGNrM,GAAoBsK,wFAApBtK,EAAoBjE,QAApBiE,EAAoB,qBAFnB,SAEDA,GAAb,6KCRO,IAAMikB,EAAb,MAAM,QACJxoB,YAAmB2W,EAAsC/G,GAAtC3P,kBAAsCA,YAEzDwoB,aAAalb,EAAuBlI,WAClC,MAAMqjB,EAAcnb,IAASlI,UAAuB,GAAK,GACnDsjB,EACJ,cACCpb,IAASlI,UACN,sDACA,IACN,IAAIujB,EAAc,GAClB,QAAS5a,EAAI,EAAGA,EAAI0a,EAAa1a,IAAK,CACpC,MAAM6a,EAAO3V,KAAK4V,MAAM5V,KAAK6V,SAAWJ,EAAY3e,QACpD4e,GAAeD,EAAYpR,UAAUsR,EAAMA,EAAO,GAEpD,OAAOD,EAGT3P,wBAAwBxlB,GACtB,IACE8hB,KAAiB9hB,SAEjB,OAAO,EAET,OAAO,EAGTu1B,sBAAsBv1B,GACpB,OAA8C,IAA1CwM,KAAKgZ,wBAAwBxlB,MAG5B,uBAAuBw1B,KAAKx1B,KAG/B,sBAAsBw1B,KAAKx1B,IAC3B,sBAAsBw1B,KAAKx1B,IAEpB,iDArCA+0B,GAAa3Z,oDAAb2Z,EAAaloB,QAAbkoB,EAAa,qBAFZ,SAEDA,GAAb,wKCNO,MAAMU,EAAoB,kCACpBC,EAAoB,qCACpBC,EAAuB,yCACvBC,EAAwB,0CAGxBC,EAAuB,yCACvBC,EAAwB,0CACxBC,EAAuB,yCACvBC,EAAsB,4CAE7B,QAEJzpB,YAAmB4U,kBADV3U,UAAOwpB,GAIZ,QAEJzpB,YAAmB4U,EAAwC8U,GAAS,GAAjDzpB,eAAwCA,cADlDA,UAAOipB,GAIZ,QAEJlpB,YAAmB4U,EAAwC8U,GAAS,GAAjDzpB,eAAwCA,cADlDA,UAAOmpB,GAmBZ,QAEJppB,YAAmB4U,EAAwB8U,GAAS,GAAjCzpB,eAAwBA,cADlCA,UAAOqpB,GAIZ,QAEJtpB,YAAmB4U,EAA0B8U,GAAS,GAAnCzpB,eAA0BA,cADpCA,UAAOspB,GASZ,QAEJvpB,YAAmB4U,EAAwC8U,GAAS,GAAjDzpB,eAAwCA,cADlDA,UAAOkpB,iLCzDX,MAAMQ,EAAwB,sCACxBC,EAAwB,yCACxBC,EACX,6CACWC,EACX,8CAGWC,EACX,6CACWC,EACX,8CACWC,EACX,6CACWC,EACX,oDAEI,QAEJlqB,YAAmB4U,kBADV3U,UAAOiqB,GAIZ,QAEJlqB,YAAmB4U,EAAwC8U,GAAS,GAAjDzpB,eAAwCA,cADlDA,UAAO0pB,GAIZ,QAEJ3pB,YAAmB4U,EAAwC8U,GAAS,GAAjDzpB,eAAwCA,cADlDA,UAAO4pB,GAmBZ,QAEJ7pB,YAAmB4U,EAAwB8U,GAAS,GAAjCzpB,eAAwBA,cADlCA,UAAO8pB,GAIZ,QAEJ/pB,YAAmB4U,EAA0B8U,GAAS,GAAnCzpB,eAA0BA,cADpCA,UAAO+pB,GAIZ,QAEJhqB,cADSC,UAAOgqB,GAIZ,QAEJjqB,YAAmB4U,EAAwC8U,GAAS,GAAjDzpB,eAAwCA,cADlDA,UAAO2pB,sEC/DX,MAAMO,EACX,yCACWC,EACX,kDAEI,QAEJpqB,YAAmB4U,kBADV3U,UAAOkqB,qECNX,MAAME,EAAoB,kCAGpBC,EAAoB,2CAE3B,QAEJtqB,YAAmB4U,kBADV3U,UAAOoqB,uSCCX,MAAME,EAA+B,mCAC/BC,EACX,qCACWC,EAAwB,mCACxBC,EAAoB,mCACpBC,EAAgB,8BAChBC,EAAoB,qCACpBC,EAAmB,+BACnBC,EAAmB,+BACnBC,EAAuB,8BACvBC,EAAuB,sCACvBC,EAAqB,qCACrBC,EAAiB,iCACjBC,EACX,uDACWC,EAAgB,uCAChBC,EAAgB,oCAEvB,QAEJrrB,YAAmB4U,kBADV3U,UAAOirB,GAIZ,QAEJlrB,YAAmB4U,kBADV3U,UAAOgrB,GAIZ,QAEJjrB,YAAmB4U,EAAyB0W,GAAW,GAApCrrB,eAAyBA,gBADnCA,UAAOwqB,GAIZ,QAEJzqB,YAAmB4U,kBADV3U,UAAO2qB,GAIZ,QAEJ5qB,YAAmB4U,kBADV3U,UAAO4qB,GAIZ,QAEJ7qB,cADSC,UAAOsqB,GAIZ,QAEJvqB,cADSC,UAAOuqB,GAIZ,QAEJxqB,YAAmB4U,EAAwB2W,GAAe,GAAvCtrB,eAAwBA,oBADlCA,UAAO6qB,GAIZ,QAEJ9qB,YAAmB4U,kBADV3U,UAAOyqB,GASZ,QAEJ1qB,YAAmB4U,kBADV3U,UAAO8qB,GAIZ,QAEJ/qB,YAAmB4U,kBADV3U,UAAO+qB,GAIZ,QAEJhrB,cADSC,UAAOkrB,GASZ,QAEJnrB,YAAmB4U,kBADV3U,UAAOorB,mQChGX,MAAMG,EACX,uDAGWC,EAAmB,oCACnBC,EAAgB,8BAChBC,EAAgB,iCAChBC,EAAmB,qCACnBC,EAAoB,sCAGpBC,EAAiB,kCACjBC,EAAmB,qCACnBC,EAAoB,sCACpBC,EAAmB,qCACnBC,EAAoB,sCACpBC,EAAkB,oCAEzB,QAEJnsB,cADSC,UAAOwrB,GAIZ,QAEJzrB,cADSC,UAAOisB,GAIZ,QAEJlsB,YAAmB4U,kBADV3U,UAAO6rB,GAIZ,QAEJ9rB,YAAmB4U,kBADV3U,UAAOksB,GAIZ,QAEJnsB,YAAmB4U,kBADV3U,UAAOyrB,GAIZ,QAEJ1rB,YAAmB4U,kBADV3U,UAAO2rB,GAIZ,QAEJ5rB,YAAmB4U,kBADV3U,UAAO4rB,GAcZ,QAEJ7rB,YAAmB4U,kBADV3U,UAAO8rB,GAIZ,QAEJ/rB,YAAmB4U,kBADV3U,UAAO+rB,GAIZ,QAEJhsB,cADSC,UAAOgsB,GAIZ,QAEJjsB,YAAmB4U,kBADV3U,UAAOurB,GAIZ,QAEJxrB,YAAmB4U,kBADV3U,UAAO0rB,oMChFX,MAAMS,EAAe,6BACfC,EAAe,oCACfC,EAAe,sCACfC,EAAkB,6BAClBC,EACX,kDACWC,EAAa,iDACbC,EAAU,8BACVC,EAAa,kCACbC,EAAe,qCAEtB,QAEJ5sB,YAAmB4U,kBADV3U,UAAOosB,GAIZ,QAEJrsB,YAAmB4U,kBADV3U,UAAO0sB,GAIZ,QAEJ3sB,YAAmB4U,kBADV3U,UAAOmsB,GASZ,QAEJpsB,cADSC,UAAOusB,GAIZ,QAEJxsB,cADSC,UAAOssB,GAIZ,QAEJvsB,cADSC,UAAOwsB,GAIZ,QAEJzsB,YAAmB4U,kBADV3U,UAAO2sB,GAIZ,QAEJ5sB,YAAmB4U,kBADV3U,UAAOysB,iMCnCX,IAAMlpB,EAAb,MAAM,QAIJxD,YAAmB6sB,gBACjB5sB,KAAK6sB,WAAa7sB,KAAK4sB,MAAM9e,MAAKgf,QAAOC,OACzC/sB,KAAKgtB,MAAQhtB,KAAK4sB,MAAM9e,MAAKgf,QAAOG,OAGtC7E,aAAatC,GACX9lB,KAAK4sB,MAAMM,SAAS,IAAIC,KAAarH,IAGvCsH,aAAaC,GACXrtB,KAAK4sB,MAAMM,SAAS,IAAII,KAAaD,IAGvCE,kBACEvtB,KAAK4sB,MAAMM,SAAS,IAAIM,MAG1B5F,aACE5nB,KAAK4sB,MAAMM,SAAS,IAAIO,MAG1BC,uBACE1tB,KAAK4sB,MAAMM,SAAS,IAAIS,MAG1B5F,cAAcJ,GACZ3nB,KAAK4sB,MAAMM,SAAS,IAAIU,KAAajG,IAGvCkG,QAAQC,GACN9tB,KAAK4sB,MAAMM,SAAS,IAAIa,KAAQD,IAGlCE,WAAWlI,GACT9lB,KAAK4sB,MAAMM,SAAS,IAAIe,KAAWnI,kDAtC1BviB,GAAiBqL,wCAAjBrL,EAAiBlD,QAAjBkD,EAAiB,qBAFhB,SAEDA,GAAb,kBCSO,IAAM2qB,EAAb,MAAM,QASJnuB,YAAsB6sB,gBACpB5sB,KAAKmuB,cAAgBnuB,KAAK4sB,MAAM9e,QAAKgf,MAAOsB,OAC5CpuB,KAAKquB,iBAAmBruB,KAAK4sB,MAAM9e,MAAKgf,QAAOwB,OAC/CtuB,KAAKuuB,oBAAsBvuB,KAAK4sB,MAAM9e,QAAKgf,MAAO0B,OAClDxuB,KAAKyuB,sBAAwBzuB,KAAK4sB,MAAM9e,MACtCgf,QAAO4B,OAET1uB,KAAK2uB,aAAe3uB,KAAK4sB,MAAM9e,MAAKgf,QAAO8B,OAG7CvgB,cAAcwgB,GACZ7uB,KAAK4sB,MAAMM,SAAS,IAAI4B,KAAsBD,IAGhDE,cAAcvT,GACZxb,KAAK4sB,MAAMM,SAAS,IAAI8B,KAAcxT,IAGxCyT,mBACEjvB,KAAK4sB,MAAMM,SAAS,IAAIgC,MAG1BC,cAAc3T,GACZxb,KAAK4sB,MAAMM,SAAS,IAAIkC,KAAiB5T,EAAQ6T,gBAGnD3U,eAAe4U,GACbtvB,KAAK4sB,MAAMM,SACT,IAAIqC,KAAkBD,EAASrkB,IAAKgR,GAAMA,EAAEoT,iBAIhDG,oBACExvB,KAAK4sB,MAAMM,SAAS,IAAIuC,MAG1BC,cAAclU,GACZxb,KAAK4sB,MAAMM,SAAS,IAAIyC,KAAiBnU,IAG3CoU,cAAcpU,GACZxb,KAAK4sB,MAAMM,SAAS,IAAI2C,KAAcrU,IAGxCsU,WAAWC,GACT,OAAO/vB,KAAK4sB,MAAM9e,MAAKgf,WAAOkD,MAAcD,KAG9CE,cACE,OAAOjwB,KAAK4sB,MAAM9e,MAAKgf,QAAOmD,OAGhCC,0BACElwB,KAAK4sB,MAAMM,SAAS,IAAIiD,UAAgBzb,kDA9D/BwZ,GAAoBtf,wCAApBsf,EAAoB7tB,QAApB6tB,EAAoB,qBAFnB,SAEDA,GAAb,kBCXO,IAAMkC,EAAb,MAAM,QAGJrwB,YAAmB6sB,gBACjB5sB,KAAKqwB,qBAAuBrwB,KAAK4sB,MAAM9e,MAAKgf,QAAOwD,OAErDC,YAAYC,GACVxwB,KAAK4sB,MAAMM,SAAS,IAAIuD,KAAkBD,IAG5CllB,eAAeklB,GACbxwB,KAAK4sB,MAAMM,SAAS,IAAIwD,KAAqBF,EAASjK,KAGxDoK,gBAAgBH,GACdxwB,KAAK4sB,MAAMM,SAAS,IAAI0D,KAAsBJ,EAASvlB,IAAKgR,GAAMA,EAAEsK,MAGtEsK,eAAeL,GACbxwB,KAAK4sB,MAAMM,SAAS,IAAI4D,KAAqBN,IAG/CO,eAAeP,GACbxwB,KAAK4sB,MAAMM,SAAS,IAAI8D,KAAkBR,IAG5CS,YAAYC,GACV,OAAOlxB,KAAK4sB,MAAM9e,MAAKgf,WAAOqE,MAAkBD,KAGlDE,eACE,OAAOpxB,KAAK4sB,MAAM9e,MAAKgf,QAAOuE,OAGhCC,2BACEtxB,KAAK4sB,MAAMM,SAAS,IAAIqE,UAAoB7c,kDAnCnC0b,GAAwBxhB,wCAAxBwhB,EAAwB/vB,QAAxB+vB,EAAwB,qBAFvB,SAEDA,GAAb,iBCCO,IAAMoB,EAAb,MAAM,QAGJzxB,YAAmB6sB,gBACjB5sB,KAAKyxB,yBAA2BzxB,KAAK4sB,MAAM9e,MACzCgf,QAAO4E,OAIXC,gBAAgBC,GACd5xB,KAAK4sB,MAAMM,SAAS,IAAI2E,KAAsBD,IAGhDnO,mBAAmBmO,GACjB5xB,KAAK4sB,MAAMM,SAAS,IAAI4E,KAAyBF,EAAarL,KAGhEwL,oBAAoBH,GAClB5xB,KAAK4sB,MAAMM,SACT,IAAI8E,KAA0BJ,EAAa3mB,IAAKgR,GAAMA,EAAEsK,MAI5D5C,yBACE3jB,KAAK4sB,MAAMM,SAAS,IAAI+E,MAG1BC,mBAAmBN,GACjB5xB,KAAK4sB,MAAMM,SAAS,IAAIiF,KAAyBP,IAGnDQ,mBAAmBR,GACjB5xB,KAAK4sB,MAAMM,SAAS,IAAImF,KAAsBT,IAGhDU,gBAAgBC,GACd,OAAOvyB,KAAK4sB,MAAM9e,MAAKgf,WAAO0F,MAAsBD,KAGtDE,mBACE,OAAOzyB,KAAK4sB,MAAM9e,MAAKgf,QAAO4F,OAGhCC,+BACE3yB,KAAK4sB,MAAMM,SAAS,IAAI0F,UAAwBle,kDA5CvC8c,GAA4B5iB,wCAA5B4iB,EAA4BnxB,QAA5BmxB,EAA4B,qBAF3B,SAEDA,GAAb,6GCZO,IAAM9tB,EAAb,MAAM,QAGJ3D,YAAmB6sB,gBACjB5sB,KAAK6yB,8BAAgC7yB,KAAK4sB,MAAM9e,MAC9Cgf,QAAOgG,OAIXC,yBAAyBC,GACvBC,WAAW,KACTjzB,KAAK4sB,MAAMM,SAAS,IAAIgG,KAAyBF,KAChD,KAGLG,4BACEF,WAAW,KACTjzB,KAAK4sB,MAAMM,SACT,IAAIgG,KAAyBE,uDAlBxB1vB,GAA6BkL,wCAA7BlL,EAA6BrD,QAA7BqD,EAA6B,qBAF5B,SAEDA,GAAb,4GCAO,IAAMD,EAAb,MAAM,QAGJ1D,YAAmB6sB,gBACjB5sB,KAAKqzB,gBAAkBrzB,KAAK4sB,MAAM9e,MAAKgf,QAAOwG,OAGhDC,kBAAkBP,GAChBC,WAAW,KACTjzB,KAAK4sB,MAAMM,SAAS,IAAIsG,KAAkBR,MAI9CS,sBACER,WAAW,KACTjzB,KAAK4sB,MAAMM,SAAS,IAAIsG,KAAkBE,uDAfnCjwB,GAAsBmL,wCAAtBnL,EAAsBpD,QAAtBoD,EAAsB,qBAFrB,SAEDA,GAAb,yJCgCO,IAAMD,EAAb,MAAM,QASJzD,YACS0W,EACAmW,EACA+G,EACAC,EACAC,EACA9M,GALA/mB,cACAA,aACAA,uBACAA,6BACAA,cACAA,cAEPA,KAAK8zB,YAAc9zB,KAAK4sB,MAAM9e,MAAKgf,QAAOiH,OAC1C/zB,KAAKg0B,eAAiBh0B,KAAK4sB,MAAM9e,QAAKgf,MAAOmH,OAC7Cj0B,KAAKk0B,gBAAkBl0B,KAAK4sB,MAAM9e,QAAKgf,MAAOqH,OAC9Cn0B,KAAKo0B,gBAAkBp0B,KAAK4sB,MAAM9e,MAAKgf,QAAOuH,OAC9Cr0B,KAAKs0B,kBAAoBt0B,KAAK4sB,MAAM9e,QAAKgf,MAAOyH,OAChDv0B,KAAKw0B,mBAAqBx0B,KAAK4sB,MAAM9e,MAAKgf,QAAO2H,OACjDz0B,KAAK00B,gBAAkB10B,KAAK4sB,MAAM9e,MAAKgf,QAAO6H,OAGhDC,yBACE50B,KAAK4sB,MAAMM,SAAS,IAAI2H,MAG1BC,qBAAqBC,EAAuB1J,GAAW,GACrDrrB,KAAK4sB,MAAMM,SAAS,IAAI8H,KAAsBD,EAAc1J,IAG9D4J,eAAehP,GACbjmB,KAAK4sB,MAAMM,SAAS,IAAIgI,KAAoBjP,IAG9CkP,aAAaxN,GACX3nB,KAAK4sB,MAAMM,SAAS,IAAIkI,KAAkBzN,IAG5C0N,aAAa1iB,GACX3S,KAAK4sB,MAAMM,SAAS,IAAIoI,KAAkB3iB,IAG5C4iB,yBACEv1B,KAAK4sB,MAAMM,SAAS,IAAIsI,MAG1BC,cAAcC,GACZ11B,KAAK4sB,MAAMM,SAAS,IAAIyI,KAAqBD,IAC7C11B,KAAK2zB,gBAAgBF,sBAGvBmC,gBAAgBC,GACd71B,KAAK4sB,MAAMM,SAAS,IAAI4I,KAAqBD,IAG/C7d,oBAAoB+d,EAAmBzK,GAAe,GACpDtrB,KAAK4sB,MAAMM,SAAS,IAAI8I,KAAkBD,EAAWzK,IAGvD2K,0BAA0Bxb,EAAqB6Q,GAAe,GAG5DtrB,KAAK4sB,MAAMM,SAAS,IAAI8I,KAFJhqB,aAAqByO,GACX1C,QACuBuT,IAGvD4K,8BACEl2B,KAAK4sB,MAAMM,SAAS,IAAIiJ,MAG1BC,aAAaC,GACXr2B,KAAK4sB,MAAMM,SAAS,IAAIoJ,KAAkBD,IAG5CpO,cAAcsO,EAAmBC,GAC/Bx2B,KAAK4sB,MAAMM,SACT,IAAIuJ,KAAc,CAChB/jB,MAAO6jB,EACPG,OAAQF,KAGZx2B,KAAK2zB,gBAAgBF,sBACrBzzB,KAAK4zB,sBAAsBT,0EArFlB3vB,GAAkBoL,mGAAlBpL,EAAkBnD,QAAlBmD,EAAkB,qBAFjB,SAEDA,GAAb,0ICxCO,MAAM4vB,EAA2D,CACtEuD,qBAAiBjiB,GAGb,WACJ/B,EAAoCygB,EACpCwD,GAEA,OAAQA,EAAOtpB,OACR4c,KACI0M,EAAOjiB,QAQPhC,gBClBN,MAAM+gB,EAA6C,CACxDmD,6BAAyBniB,EACzBoiB,mBAAepiB,GAGX,WACJ/B,EAA6B+gB,EAC7BkD,GAEA,OAAQA,EAAOtpB,OACR8c,KACIwM,EAAOjiB,QAQPhC,ECtBN,IAAKokB,EAMX,MAND,OAAYA,QAAc,KACxBA,wBACAA,wCACAA,oCACAA,4BACAA,oCALUA,EAAZ,IAAYA,GAMX,yBCaD,MAAMC,EAAqC,CACzCC,sBAAkBviB,EAClBwiB,gBAAgB,EAChBC,sBAAsB,EACtBC,cAAe92B,iBACf+2B,iBAAkB,EAClB7c,eAAW9F,EACX4iB,eAAW5iB,EACX6iB,UAAWR,oBACXS,mBAAe9iB,EACf+iB,sBAAkB/iB,EAClBgjB,eAAe,GAGX,WACJ/kB,EAAyBqkB,EACzBJ,GAEA,OAAQA,EAAOtpB,WACRod,KAmBH,MAlBiB,IACZ/X,EACHykB,cACE,kBAAmBR,EAAOjiB,QACtBiiB,EAAOjiB,QAAQyiB,cACfzkB,EAAMykB,cACZI,cACE,kBAAmBZ,EAAOjiB,QACtBiiB,EAAOjiB,QAAQ6iB,cACf7kB,EAAM6kB,cACZC,iBACE,qBAAsBb,EAAOjiB,QACzBiiB,EAAOjiB,QAAQ8iB,iBACf9kB,EAAM8kB,iBACZJ,iBAAkB1kB,EAAM0kB,iBACxB7c,UACE,cAAeoc,EAAOjiB,QAAUiiB,EAAOjiB,QAAQ6F,eAAY9F,QAK5DuW,KAKH,MAJiB,IACZtY,EACHskB,iBAAkBL,EAAOjiB,cAKxBqW,KAKH,MAJiB,IACZrY,EACHukB,eAAgBN,EAAOjiB,cAKtB6V,KAKH,MAJiB,IACZ7X,EACHwkB,qBAAsBP,EAAOjiB,cAK5BgW,KAMH,MALiB,IACZhY,EACH2kB,UAAWV,EAAOjiB,QAClB4iB,UAAWR,oBAKVnM,KAKH,MAJiB,IACZjY,EACH4kB,UAAWX,EAAOjiB,cAKjB8V,KAYuB4M,KAKvB5M,KAKH,MAJiB,IACZ9X,EACH0kB,iBAAkBT,EAAOjiB,SAjBAA,KAKxBmW,KAMH,MALiB,IACZnY,EACH+jB,OAAQE,EAAOjiB,QAAQyiB,cACvBC,iBAAkB1kB,EAAM0kB,kBAQC1iB,KAKxBkW,KAKH,MAJiB,IACZlY,EACH8kB,iBAAkBb,EAAOjiB,cAKxB2V,KAKH,MAJiB,IACZ3X,EACH+kB,eAAe,QAKdnN,KAKH,MAJiB,IACZ5X,EACH+kB,eAAe,GAYehB,QAKhC,OAAO/jB,EAXAA,KAGJyY,KACH,MAAO,IACFzY,EACHykB,cAAeR,EAAOjiB,QAAQ+hB,wBChJtC,MAAMiB,EAAmC,CACvChQ,WAAOjT,EACPkjB,SAAS,EACTviB,aAASX,EACTmjB,KAAM,IAGF,WACJllB,EAAwBglB,EACxBf,GAEA,OAAQA,EAAOtpB,WACR8e,KACH,MAAO,IACFzZ,EACHilB,SAAS,EACTjQ,MAAOiP,EAAOjiB,cAIbwX,KAIQ,KAIRM,KAIQ,KAIRC,KACH,MAAO,IACF/Z,EACHklB,KAAMjB,EAAOjiB,QACbijB,SAAS,QAIRvL,KAIH,MAHiB,IACZ1Z,QAKF2Z,KACH,MAAO,IACF3Z,EACHilB,SAAS,EACTjQ,WAAOjT,QAINiY,KACH,MAAO,IACFha,EACHilB,SAAS,EACTjQ,WAAOjT,QAIN8X,KACH,MAAO,IACF7Z,EACHklB,KAAM,SAILtL,KACH,OAAOoL,UAIP,OAAOhlB,6BCrEN,MAAMmlB,KACXC,KAAkC,CAChCC,SANE,SAA0Bxc,GAC9B,OAAOA,EAAQ+K,MAQJ0R,EAAyCH,EAAQI,gBAAgB,CAC5EvQ,WAAOjT,EACPkjB,SAAS,EACTO,YAAa,OACbC,kBAAkB,IAGd,WACJzlB,EAA2BslB,EAC3BrB,GAEA,OAAQA,EAAOtpB,WACRqe,UACAD,KAAe,CAClB,MAAM2M,EAAcP,EAAQQ,UAAU1B,EAAOjiB,QAAShC,GACtD,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,EACTQ,kBAAkB,QAIjBvM,KACH,MAAO,IACFlZ,EACHwlB,YAAavB,EAAOjiB,cAInB8W,KAAe,CAClB,MAAM4M,EAAcP,EAAQW,OAAO7B,EAAOjiB,QAAShC,GACnD,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,EACTQ,kBAAkB,QAIjBxM,KAAmB,CACtB,MAAMyM,EAAcP,EAAQY,WAAW9B,EAAOjiB,QAAShC,GACvD,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,EACTQ,kBAAkB,QAIjBtM,KAAkB,CACrB,MAAMuM,EAAcP,EAAQa,UAAU/B,EAAOjiB,QAAShC,GACtD,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,EACTQ,kBAAkB,QAIjBrM,KAAmB,CACtB,MAAMsM,EAAcP,EAAQc,WAAWhC,EAAOjiB,QAAShC,GACvD,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,EACTQ,kBAAkB,QAIjBpM,KAAkB,CACrB,MAAMqM,EAAcP,EAAQe,UAAUlmB,GACtC,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,EACTQ,kBAAkB,QAIjBnM,KAAmB,CACtB,MAAMqD,EAAW3c,EAAM6lB,SACjBM,EAAkB,GACxB,UAAWnjB,KAAK9K,OAAOC,KAAKwkB,GAC1BwJ,EAAgB3tB,KAAK,IAAKmkB,EAAS3Z,GAAIojB,UAAU,IAEnD,MAAMV,EAAcP,EAAQY,WAAWI,EAAiBnmB,GACxD,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,EACTQ,kBAAkB,QAIjBlM,KACH,MAAO,IACFvZ,EACHgV,MAAOiP,EAAOjiB,QACdijB,SAAS,EACTQ,kBAAkB,QAIjB1M,KACH,MAAO,IACF/Y,EACHgV,WAAOjT,EACPkjB,SAAS,EACTQ,kBAAkB,QAIjB5M,KACH,MAAO,IACF7Y,EACHgV,WAAOjT,EACPkjB,SAAS,EACTQ,kBAAkB,WAKpB,OAAOzlB,iBCjJN,MAAMqmB,KACXjB,KAA4C,CAC1CC,SARE,SACJpG,GAEA,OAAOA,EAAarL,MAQT0S,EACXD,EAAuBd,gBAAgB,CACrCvQ,WAAOjT,EACPkjB,SAAS,IAGP,WACJjlB,EAAmCsmB,EACnCrC,GAEA,OAAQA,EAAOtpB,WACRsc,UACAD,KAAuB,CAC1B,MAAM0O,EAAcW,EAAuBV,UACzC1B,EAAOjiB,QACPhC,GAEF,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIRlO,KAAuB,CAC1B,MAAM2O,EAAcW,EAAuBP,OAAO7B,EAAOjiB,QAAShC,GAClE,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIR/N,KAA2B,CAC9B,MAAMwO,EAAcW,EAAuBN,WACzC9B,EAAOjiB,QACPhC,GAEF,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIR9N,KAA0B,CAC7B,MAAMuO,EAAcW,EAAuBL,UACzC/B,EAAOjiB,QACPhC,GAEF,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIR7N,KAA2B,CAC9B,MAAMsO,EAAcW,EAAuBJ,WACzChC,EAAOjiB,QACPhC,GAEF,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIR5N,KAA0B,CAC7B,MAAMqO,EAAcW,EAAuBH,UAAUlmB,GACrD,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIR3N,KACH,MAAO,IACFtX,EACHgV,MAAOiP,EAAOjiB,QACdijB,SAAS,QAIRjO,KACH,MAAO,IACFhX,EACHgV,WAAOjT,EACPkjB,SAAS,WAKX,OAAOjlB,kBClHN,MAAMumB,KACXnB,KAA4C,CAC1CC,SANE,SAA8BxH,GAClC,OAAOA,EAASjK,MAQL4S,EACXD,EAAmBhB,gBAAgB,CACjCvQ,WAAOjT,EACPkjB,SAAS,IAGP,WACJjlB,EAA+BwmB,EAC/BvC,GAEA,OAAQA,EAAOtpB,WACR6b,UACAD,KAAmB,CACtB,MAAMmP,EAAca,EAAmBZ,UAAU1B,EAAOjiB,QAAShC,GACjE,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIR3O,KAAmB,CACtB,MAAMoP,EAAca,EAAmBT,OAAO7B,EAAOjiB,QAAShC,GAC9D,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIRxO,KAAuB,CAC1B,MAAMiP,EAAca,EAAmBR,WAAW9B,EAAOjiB,QAAShC,GAClE,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIRvO,KAAsB,CACzB,MAAMgP,EAAca,EAAmBP,UAAU/B,EAAOjiB,QAAShC,GACjE,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIRtO,KAAuB,CAC1B,MAAM+O,EAAca,EAAmBN,WAAWhC,EAAOjiB,QAAShC,GAClE,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIRrO,KAAsB,CACzB,MAAM8O,EAAca,EAAmBL,UAAUlmB,GACjD,MAAO,IACFA,EACH4lB,IAAKF,EAAYE,IACjBC,SAAUH,EAAYG,SACtB7Q,WAAOjT,EACPkjB,SAAS,QAIRpO,KACH,MAAO,IACF7W,EACHgV,MAAOiP,EAAOjiB,QACdijB,SAAS,QAIR1O,KACH,MAAO,IACFvW,EACHgV,WAAOjT,EACPkjB,SAAS,WAKX,OAAOjlB,4RCnHN,MAAMymB,KACXC,MAAkD,yBAEvCvG,KAAkCwG,MAC7CF,EACCzmB,GAAsCA,GCL5B4mB,KACXF,MAA2C,kBAEhC/F,GAA2BgG,QACtCC,EACC5mB,GAA+BA,GCLrB6mB,GACXH,QAAuC,cAE5BtF,GAAuBuF,QAClCE,EACC7mB,GAA2BA,GAQjBgiB,IALyB2E,QACpCE,EACC7mB,GAA2BA,EAAM6kB,kBAGI8B,MACtCE,EACC7mB,GAA2BA,EAAMukB,iBAGvBuC,KAA2BH,MACtCE,EACC7mB,GAA2BA,EAAM8kB,kBAGvBlD,GAA0B+E,QACrCE,EACC7mB,GAA2BA,EAAM+kB,eAGvBjD,GAAwB6E,QACnCE,EACC7mB,GAA2BA,EAAMwkB,sBAGvBhD,KAAemF,MAC1BE,EACC7mB,GAA2BA,EAAM4kB,WAGvBlD,GAAeiF,QAC1BE,EACC7mB,GAA2BA,EAAM2kB,WAGvBrD,GAAsBqF,QACjCE,EACC7mB,IACC,GAAI,cAAeA,QAGK+B,IAApB/B,EAAM6H,UAGV,OAAO7H,EAAM6H,YCpDJkf,GAAeL,QAAsC,aACrDM,GAAUL,QAAeI,EAAe/mB,GAAUA,GAClDoa,GAAsBuM,QACjCI,EACC/mB,GAA0BA,GAEhBsa,KAAiBqM,MAC5BK,EACChnB,GAA0BA,EAAMklB,MCLtB+B,KACXP,MAAyC,gBAE9BjL,GAAkBkL,QAC7BM,EACCjnB,GAAUA,GAGAic,GAAiB0K,QAC5BM,EACCjnB,GAAUA,EAAMwlB,aAGNlI,KAAcqJ,MAAeM,EAAsBjnB,GAC9D9H,OAAOsH,OAAOQ,EAAM6lB,WAQTxI,MALgBsJ,MAC3BM,EACCjnB,GAAUA,EAAM4lB,KAGWhS,IAC5B+S,QAAeM,EAAsBjnB,IACnC,KAAKA,EAAM4lB,IAAiBpf,QAAQoN,KAAO,GAG3C,OAAO5T,EAAM6lB,SAASjS,MAGbiI,KAAuB8K,MAClCM,EACCjnB,GAAUA,EAAMgV,OAGN+G,GAAyB4K,QACpCM,EACCjnB,GAAUA,EAAMilB,SAGNtJ,GAAqBgL,QAChCM,EACCjnB,IACC,MAAMknB,EAA4B,GAC5BC,GAAKjvB,OAAOsH,OAAOQ,EAAM6lB,UAC/B,UAAW7iB,MAAKmkB,IACU,IAApBnkB,GAAEokB,eACJF,EAAU1uB,KAAKwK,IAGnB,OAAIkkB,EAAU9vB,QAAU,EACf,KAEF8vB,ICvDEG,ID2DsBV,QACjCM,EACCjnB,IACC,MAAMsnB,EAA6B,GAC7BH,GAAKjvB,OAAOsH,OAAOQ,EAAM6lB,UAC/B,UAAW7iB,MAAKmkB,IACK,IAAfnkB,GAAEojB,UACJkB,EAAW9uB,KAAKwK,IAGpB,OAAIskB,EAAWlwB,QAAU,EAChB,KAEFkwB,OCvETZ,MAAiD,yBAEtC3H,GAA0B4H,QACrCU,EACCrnB,GAAUA,GAGA+f,KAAsB4G,MACjCU,EACCrnB,GAAU9H,OAAOsH,OAAOQ,EAAM6lB,WAQpBhG,IALwB8G,QACnCU,EACCrnB,GAAUA,EAAM4lB,KAGmBhS,IACpC+S,QAAeU,EAA8BrnB,IAC3C,KAAKA,EAAM4lB,IAAiBpf,QAAQoN,KAAO,GAG3C,OAAO5T,EAAM6lB,SAASjS,MCvBb2T,MD0B+BZ,MAC1CU,EACCrnB,GAAUA,EAAMgV,UAG2B2R,MAC5CU,EACCrnB,GAAUA,EAAMilB,YChCjByB,MAA6C,qBAElC/I,GAAsBgJ,QACjCY,EACCvnB,GAAUA,GAGA0e,KAAkBiI,MAC7BY,EACCvnB,GAAU9H,OAAOsH,OAAOQ,EAAM6lB,WAQpBrH,KALoBmI,QAC/BY,EACCvnB,GAAUA,EAAM4lB,KAGehS,IAChC+S,QAAeY,EAA0BvnB,IACvC,KAAKA,EAAM4lB,IAAiBpf,QAAQoN,KAAO,GAG3C,OAAO5T,EAAM6lB,SAASjS,SAGc+S,MACtCY,EACCvnB,GAAUA,EAAMgV,QAGuB2R,QACxCY,EACCvnB,GAAUA,EAAMilB,6LC9BbhpB,SAA8CA,mBAAMA,kCACpDA,SACEA,SACFA,+BADEA,oEAPJA,sBAKEA,gCACAA,gCAGFA,+BAPEA,qCAGeA,8CACAA,qEAMfA,SAA8CA,kBAAKA,kCACnDA,SACEA,SACFA,+BADEA,oEAfNA,SACEA,4BAWAA,sBACEA,gCACAA,gCAGFA,QACFA,8BAhBKA,+CAUOA,8CACOA,8CACAA,wEAKnBA,iBAKEA,aACEA,8BACFA,QACFA,8BAPEA,6BAKEA,8EAGJA,kBAKEA,8BACFA,8BAJEA,6BAGAA,4EAEFA,kBAKEA,8BACFA,8BALEA,6BAIAA,mDC9BG,IAAMurB,EAAb,MAAM,QAIJp6B,YACY0W,EACA2jB,EACHC,EAEAprB,GAJGjP,cACAA,0BACHA,wBAEAA,YARTA,yBAAsB,EACtBA,qBAAiB,EAwBjBs6B,WACEt6B,KAAKq6B,iBAAiBE,gBAAgBC,UAAU,MAClB,IAAxBx6B,KAAKy6B,gBAGTz6B,KAAK06B,gBAEP,MAAMC,EAAWC,SAASC,uBACxB,6BAEIC,EAAWF,SAASC,uBACxB,8BAGF,GADA76B,KAAK+6B,oBAAsBJ,EAAS5wB,OAChC4wB,EAAS5wB,OAAS,EAAG,CACvB,QAASgE,EAAI,EAAGA,EAAI4sB,EAAS5wB,OAAQgE,IACnC4sB,EAAS5sB,GAAGitB,SAEd,MAAMC,EAAOL,SAASM,gBAAgB,SACtCD,EAAK/zB,MAAQ,4BACbyzB,EAAS,GAAGQ,WAAWC,aAAaH,GACpC,MAAMI,EACJP,EAASA,EAAS/wB,OAAS,GAAGoxB,WAAWG,aAAa,SAClDC,EAAUX,SAASM,gBAAgB,SAGzC,OAFAK,EAAQr0B,MAAQm0B,EAAan0B,MAAQ,kCACrC4zB,EAASA,EAAS/wB,OAAS,GAAGoxB,WAAWC,aAAaG,IAK1Db,cACE,MAAMC,EAAWC,SAASC,uBACxB,6BAEIC,EAAWF,SAASC,uBACxB,8BAEF,GAAI76B,KAAK+6B,oBAAsB,EAAG,CAChC,MAAME,EAAOL,SAASM,gBAAgB,SACtCD,EAAK/zB,MAAQ,4BACbyzB,EAAS,GAAGQ,WAAWC,aAAaH,GACpC,MAAMI,EACJP,EAASA,EAAS/wB,OAAS,GAAGoxB,WAAWG,aAAa,SAClDC,EAAUX,SAASM,gBAAgB,SAIzC,OAHAK,EAAQr0B,MAAQm0B,EAAan0B,MAAQ,6BACrC4zB,EAASA,EAAS/wB,OAAS,GAAGoxB,WAAWC,aAAaG,QACtDv7B,KAAKq6B,iBAAiBmB,SAGI,IAAxBx7B,KAAKy6B,qBAAqD/lB,IAAzB1U,KAAKiP,KAAKwsB,YAC7Cz7B,KAAKo6B,mBAAmBnS,cACtBjoB,KAAKiP,KAAKwsB,WACVz7B,KAAKiP,KAAKysB,gBAKhBC,WACE37B,KAAKy6B,gBAAiB,OACO/lB,IAAzB1U,KAAKiP,KAAK2sB,YACZ57B,KAAKo6B,mBAAmBnS,cACtBjoB,KAAKiP,KAAK2sB,WACV57B,KAAKiP,KAAK4sB,mBAGd77B,KAAKq6B,iBAAiBmB,QAGpBM,gBACF,MAA4B,KAAxB97B,KAAKiP,KAAK6sB,UACL,GAC0B,UAAxB97B,KAAKiP,KAAK6sB,UACZ,iBAC0B,WAAxB97B,KAAKiP,KAAK6sB,UACZ,uBADF,gDAnGE3B,GAAsBvrB,0CAQvB3G,gCARCkyB,EAAsB4B,64BDXnCntB,iBACEA,gCAmBAA,uBASAA,uBAOAA,uBAOFA,QACAA,iBAIEA,oBAAQA,gCAASotB,eACfptB,aACEA,8BAMFA,QACFA,QACFA,eAzDiBA,+CAqBZA,wEAQAA,wEAQAA,2CAQHA,yFAIIA,0MCvCOurB,GAAb,wMCSO,IAAM8B,EAAb,MAAM,QAUJl8B,YACSm8B,EACA/gB,GADAnb,2BACAA,qBAXAA,cAAW,GAEpBA,gBAAY,EAWVA,KAAKm8B,cAAgBn8B,KAAKk8B,oBAAoBrmB,oBAC9C7V,KAAKo8B,OAASjhB,EAAcqN,aAAapjB,YACzC,MAAMi3B,EAA8B,IAAIC,KACxCt8B,KAAKu8B,uBAAwBC,OAAS,GACnC1uB,QACC2uB,KAAUJ,MACVruB,KAAWD,QACS2G,IAAd1U,KAAK08B,MAIP,kBAAmB18B,KAAK08B,MACc,KAAtC18B,KAAK08B,KAAKC,cAAcC,YAI1B58B,KAAK68B,QAAU78B,KAAK08B,KAAKC,cAAcC,UAAUE,WAAW,IAAK,IAIlD,OAAXr4B,SAHoBs4B,eACtB,eAAiB/8B,KAAK68B,QAAU78B,KAAKo8B,YAKhCnuB,KACL+uB,KAAKC,SAAS,YAAcj9B,KAAKm8B,cAAcn8B,KAAK68B,YAH7CnlB,SAAG,OAMdzM,KAAKiyB,IACH,IAAa,IAATA,EACF,OAEF,MAAMz4B,EAASm2B,SAASmC,eACtB,eAAiB/8B,KAAK68B,QAAU78B,KAAKo8B,QAEvC33B,EAAO04B,MAAQD,EAAKC,MACpB14B,EAAO24B,OAASF,EAAKE,OACrBp9B,KAAKq9B,cAAgBH,EACrBl9B,KAAKq9B,cAAcC,WAAW74B,EAAO84B,WAAW,OAChDv9B,KAAKw9B,WACLnB,EAAU3rB,MAAK,GACf2rB,EAAU1rB,cAIb6pB,YAGLgD,WACEx9B,KAAKq9B,cAAcI,SACf36B,aAA4B9C,KAAK68B,UAAW,IAGhD5J,WAAW,KACTjzB,KAAKq9B,cAAcK,UACiB,GAAnC19B,KAAKq9B,cAAcM,OAAO5zB,QAI/B6zB,0BAC6BlpB,IAAvB1U,KAAKq9B,oBAA6C3oB,IAAd1U,KAAK08B,OAKzB,GAAlB18B,KAAK69B,WACmC,MAAxC79B,KAAK08B,KAAKC,cAAcmB,cAExB99B,KAAK69B,WAAY,EACjB79B,KAAKw9B,YAEa,GAAlBx9B,KAAK69B,WACmC,MAAxC79B,KAAK08B,KAAKC,cAAcmB,eAExB99B,KAAK69B,WAAY,IAIrBE,cACM/9B,KAAKu8B,wBACPv8B,KAAKu8B,sBAAsByB,cAC3Bh+B,KAAKu8B,2BAAwB7nB,iDA9FtBunB,GAAartB,kDAAbqtB,EAAaF,mVCpB1BntB,mBACEA,SACFA,QACAA,iBAMEA,oBAMFA,eATEA,yCAAgC,yBAK9BA,yCAAgC,yBADhCA,sIDUSqtB,GAAb,iEElBM,QAANl8B,cAEUC,aAA4B,IAAIs8B,KAChCt8B,aAAUA,KAAKi+B,QAAQC,uCAG7B,OAAKC,EAAeC,WAClBD,EAAeC,SAAW,IAAID,GAEzBA,EAAeC,SAGjBC,cACL,OAAOr+B,KAAKs+B,QAGPC,UACLv+B,KAAKi+B,QAAQvtB,MAAK,oDCnBf,MAAM1E,EAAc,CAAEwyB,YAAY,EAAMC,aAAa,EAAOC,UAAU,EAAM1V,MAAM,EAAO2V,OAAO,EAAOC,QAAQ,EAAOC,aAAc,YAAaC,QAAS,6BAA8BC,cAAe,CAAE,EAAK,SAAU,EAAK,aAAgBC,SAAU,CAAEC,OAAQ,CAAEC,UAAW,SAAUzkB,YAAa,iBAAkB1C,QAAS,EAAG6O,YAAa,mCAAoCuY,OAAQ,0BAA2BpvB,eAAgB,kFAAmFG,cAAe,gEAAmEkvB,UAAW,CAAEF,UAAW,YAAazkB,YAAa,UAAW1C,QAAS,EAAG6O,YAAa,mCAAoCuY,OAAQ,0BAA2BpvB,eAAgB,mFAAoFG,cAAe,gKCKn2B,MAAMmvB,EAAiB,CACrB,CACErsB,KAAM,GACNssB,WAAY,YACZC,UAAW,QAEb,CACEvsB,KAAM,YACNwsB,aAAc,IACZC,gIAAqChvB,KAAM/R,GAAMA,EAAEghC,kBAEvD,CACE1sB,KAAM,OACNwsB,aAAc,IACZC,2HAAgChvB,KAAM/R,GAAMA,EAAEihC,aAElD,CACE3sB,KAAM,SACNwsB,aAAc,IACZC,6HAAkChvB,KAAM/R,GAAMA,EAAEkhC,eAEpD,CACE5sB,KAAM,iBACNwsB,aAAc,IACZC,6HAAkChvB,KAAM/R,GAAMA,EAAEmhC,eAEpD,CACE7sB,KAAM,gBACNwsB,aAAc,IACZC,8HAAmChvB,KAAM/R,GAAMA,EAAEohC,gBAErD,CACE9sB,KAAM,WACNwsB,aAAc,IACZC,+HAAoChvB,KAAM/R,GAAMA,EAAEqhC,iBAEtD,CACE/sB,KAAM,mBACNwsB,aAAc,IACZC,+HAAoChvB,KAAM/R,GAAMA,EAAEqhC,iBAEtD,CACE/sB,KAAM,KACNP,QAAS,CACPO,KAAMR,MAERgtB,aAAc,IACZC,gIAAqChvB,KAAM/R,GAAMA,EAAEshC,kBAQlD,IAAMC,EAAb,MAAM,sDAAOA,4DAHF,CAAC73B,aAAqBi3B,EAAQ,CAAEa,SAAS,KACxC93B,QAEC63B,GAAb,GC5DO,IAAKE,EAGX,MAHD,OAAYA,QAAiB,KAC5BA,uBACAA,uBAFWA,EAAZ,IAAYA,GAGX,sGCHDvxB,iBAIEA,8BAKFA,eAFIA,2BCeG,IAAMwxB,EAAb,MAAM,QAiBJrgC,YACY0W,EACA4pB,EACAC,GACAvsB,GAHA/T,cACAA,0BACAA,6BACAA,mBAjBZugC,gBAAgBC,GACdxgC,KAAK+T,YAAY6hB,gBAAgB,CAC/B4B,cAAe2I,WAKnBM,iBAAiBD,GACfxgC,KAAK+T,YAAY6hB,gBAAgB,CAC/B4B,cAAe2I,YAWnB7F,WACE,MAAMoG,EAAM1gC,KAAKqgC,mBAAmB5Z,oBACpCzmB,KAAKsgC,qBAAqBxqB,qBAC1B9V,KAAK+T,YAAYiE,oBAAoB0oB,GAAK,GAG5C3C,eAEA4C,mBAC2B,IAArBjc,UAAUkc,OACZ5gC,KAAK+T,YAAY6hB,gBAAgB,CAC/B4B,cAAe2I,WAGjBngC,KAAK+T,YAAY6hB,gBAAgB,CAC/B4B,cAAe2I,YAKrBU,YACE,OAAOpxB,OAAOqxB,YAAc,KAG1BC,uBACF,YAAyBrsB,IAArB1U,KAAK+T,aACA2D,SAAG,GAEL1X,KAAK+T,YAAYugB,gEApDf8L,GAAYxxB,yEAAZwxB,EAAYrE,8LAAZC,uBAAuB,sCAAvBA,wBAAwB,wZDtBrCptB,wCAUAA,eACEA,yBACFA,QACAA,iBAGEA,qBACFA,eAhBGA,iDASEA,2mCCYQwxB,GAAb,sJChBO,IAAMY,EAAb,MAAM,QACJjhC,YACUkhC,EACDrU,GADC5sB,gBACDA,2DAHEghC,GAAgBpyB,oDAAhBoyB,EAAgB3gC,QAAhB2gC,EAAgB,YAAhBA,GAAb,0JCAO,IAAME,GAAb,MAAM,QACJnhC,eAEAohC,UACE,OAAOl3B,aAAaC,QAAQ,cAG9Bk3B,QAAQC,GACNp3B,aAAamB,QAAQ,aAAchB,KAAKiB,UAAUg2B,IAGpDC,YACEr3B,aAAa0Q,WAAW,4DAZfumB,gCAAU7gC,QAAV6gC,EAAU,qBAFT,SAEDA,GAAb,GCkDA,MAAM1zB,WAGC,IAAM+zB,GAAb,MAAM,QACJxhC,YACYkhC,EACAvuB,EACA8uB,GACA5U,EACAyT,GACAtsB,GACAkH,GACAwmB,GACH5N,GACA9M,IATG/mB,gBACAA,aACAA,uBACAA,aACAA,2BACAA,oBACAA,oBACAA,mBACHA,eACAA,eAeTA,YAAQ0hC,QACN,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAAOC,SACP5zB,KAAW2H,GACF3V,KAAK0S,MAAMmvB,OAAO/zB,MACvB2uB,OACEz8B,KAAK+mB,OAAO+a,kBAAkB,IACrB3D,qBAAgCE,mBAK/CpzB,OAAK6J,IACCA,aAAaitB,MACoB,MAA9BjtB,EAAsBzS,KACzBrC,KAAK+T,YAAY6gB,yBAGjB9f,aAAaktB,MACf/O,WAAW,KACTjzB,KAAK+T,YAAYwhB,0BAChB,MAEDzgB,aAAamtB,MACfhP,WAAW,KACTjzB,KAAK+T,YAAYwhB,0BAChB,MAILv1B,KAAKkiC,sBADHl2B,aAAqBA,kBAA0B+L,YAIvD,CAAEmV,UAAU,IAGdltB,qBAAiB0hC,QACf,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAA4B1W,OAC5BhgB,OAAK2rB,IACH,MAAM7e,EACJ/L,aAAqBA,kBAA0B+L,QACjD,QAAuBrD,IAAnBkiB,EAAOjiB,QAGT,OAFA3U,KAAKmiC,eAAepqB,QACpB/X,KAAKyhC,WAAWH,YAGlBthC,KAAKmiC,eAAepqB,EAAS6e,EAAOjiB,SACpC3U,KAAKyhC,WAAWL,QAAQxK,EAAOjiB,cAEjCgD,KAAYgQ,IACHjQ,SAAG,KAGhB,CAAEwV,UAAU,IAGdltB,qBAAiB0hC,QACf,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAA6B5W,OAC7B9f,OAAK4qB,IAEDA,EAAalhB,QAAQ6iB,gBAAkB2I,WAEvCngC,KAAK4sB,MAAMM,SAAS,IAAIiJ,WAG5Bxe,KAAYgQ,IACHjQ,SAAG,KAGhB,CAAEwV,UAAU,IAGdltB,4BAAwB0hC,QACtB,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAuCzW,OACvCkX,QAAepiC,KAAK4sB,MAAM9e,QAAKgf,MAAOiH,SACtC9oB,OAAKo3B,IACH,MAAOC,EAASC,IAAaF,OAM/B1qB,KAAYgQ,IACHjQ,SAAG,KAGhB,CAAEwV,UAAU,IAGdltB,0BAAoB0hC,MAClB,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAA0B9W,OAC1BuX,QACEpiC,KAAK4sB,MAAM9e,QAAKgf,MAAOiH,OACvB/zB,KAAK4sB,MAAM9e,MAAKgf,QAAOG,WAEzBuV,MAAM,MACNv3B,OAAKo3B,IACH,MAAOzL,EAAQ2L,GAAWzc,IAAYuc,EACtC,QACqB3tB,IAAnBkiB,EAAOjiB,WACPiiB,EAAOjiB,WAAW3I,oBAClB4qB,EAAOjiB,UACL3I,aAAqBA,kBAA0B+L,QAWjD,OATA/X,KAAK+mB,OAAO0b,IAAI,KACIziC,KAAK6zB,OAAOnkB,KAAKyqB,IAAwB,CACzDlrB,KAAM,CACJyzB,QAAS,wCAEXC,WAAY,8BAGhB3iC,KAAK4sB,MAAMM,SAAS,IAAIO,MAG1BztB,KAAKkiC,sBAAsBtL,EAAOjiB,YAIxC,CAAEuY,UAAU,IAGdltB,2BAAqB0hC,MACnB,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAA8BnX,OAC9B/e,QAAQmrB,IAA+B,IAApBA,EAAOvL,aAC1BpgB,KAAK2rB,IACH52B,KAAK0S,MAAMkwB,cAAc,kBAG3BjrB,KAAYgQ,IACHjQ,SAAG,KAGhB,CAAEwV,UAAU,IAGdltB,qBAAiB0hC,QACf,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAsBvW,OACtBngB,OAAKyH,IACyB,cAAxBA,EAAMiC,QAAQjC,OAChB1S,KAAK+T,YAAY+gB,sBAAqB,GAAO,GAE/C90B,KAAK0S,MAAMkwB,cAAclwB,EAAMiC,QAAQjC,YAGzCiF,KAAYgQ,IACHjQ,SAAG,KAGhB,CAAEwV,UAAU,IA/KZ0N,SAASiI,iBACP,mBACA,KACMjI,SAASkI,OACX9iC,KAAK4sB,MAAMM,SAAS,IAAI6V,MAAmB,IAE3C/iC,KAAK4sB,MAAMM,SAAS,IAAI6V,MAAmB,MAG/C,GAyKJZ,eAAepqB,EAAiBkO,EAAiC,MAC/D,MAAMC,GAAclmB,KAAKqgC,mBAAmBra,uBAC1CjO,EACAkO,GAEFzY,EAAUuK,QAAUA,EACpBvK,EAAUmB,eAAiBuX,GAG7Bgc,sBAAsBnqB,GACpB,MAAMkO,EAAejmB,KAAKyhC,WAAWN,UAEjB,MAAjBlb,QAC4BvR,IAA7BlH,EAAUmB,eAEV3O,KAAKmiC,eAAepqB,GAEpB/X,KAAK4sB,MAAMM,SAAS,IAAIgI,KAAoB9qB,KAAKC,MAAM4b,mDAhNhDsb,GAAY3yB,oJAAZ2yB,EAAYlhC,QAAZkhC,EAAY,YAAZA,GAAb,sDC1BA,MAAM/zB,YAGC,IAAMw1B,GAAb,MAAM,QACJjjC,YACUkhC,EACDvuB,EACAuI,GACA6I,EACAuc,GACA1a,GACAsd,GACAC,GACAtW,GACA7F,GACA8M,GAVC7zB,gBACDA,aACAA,oBACAA,0BACAA,2BACAA,wBACAA,sBACAA,sBACAA,cACAA,eACAA,cAGTA,YAAQ0hC,QACN,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAOC,OACP32B,OAAKsJ,KACa,IAAInN,MAAOgK,UAA3B,MACM+xB,GAAoBnjC,KAAKqgC,mBAAmBta,kBAClD,GAA6D,MAAzDod,GACF,OAEF,MAAMrd,GAAW1b,KAAKC,MAAM84B,IACtBC,GAAiBpjC,KAAKqgC,mBAAmB5Z,oBAC3CX,GAASud,cAAgBh+B,eAC3BrF,KAAK2lB,gBAAgB/N,8BAGrBkO,GAASud,cAAgBh+B,eACzBrF,KAAK2lB,gBAAgB1N,cAAgBmrB,GAWvCpjC,KAAK4sB,MAAMM,SACT,IAAIa,KAAQ3jB,KAAKC,MAAM84B,OAVLnjC,KAAK6zB,OAAOnkB,KAAKyqB,IAAwB,CACzDlrB,KAAM,CACJyzB,QAAS,wCAEXC,WAAY,uBAEd3iC,KAAK4sB,MAAMM,SAAS,IAAIO,UAQhC,CAAEP,UAAU,IAGdltB,kBAAc0hC,QACZ,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAmBnV,OACnBvhB,OAAK2rB,IACH52B,KAAKqgC,mBAAmBza,qBAG9B,CAAEsH,UAAU,IAGdltB,sBAAgB0hC,MACd,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAAqBhV,SACrB6V,MAAM,MACNx0B,OAAW4oB,IACT,MAAM0M,IAAU,IAAIl8B,MAAOgK,UACrBgyB,GAAiBpjC,KAAKqgC,mBAAmB5Z,oBAC/C,GACEmQ,EAAOjiB,QAAQ0T,aAAehjB,eAC9BrF,KAAK2lB,gBAAgB1N,cAAgBmrB,GAErC,YAAKxW,MAAMM,SAAS,IAAIO,SACjB/V,OAAG,GAEZ,OAAQkf,EAAOjiB,QAAQ0T,iBAChBhjB,oBAED,SAAOqS,MAAG,CACR4rB,GACA1M,EAAOjiB,QAAQnhB,QACfojC,EAAOjiB,QAAQ0T,kBAIhBhjB,cAED,OAAOrF,KAAK2lB,gBAAgB3R,QAAQsvB,IAASx1B,QAC3CE,KAAWuG,KAEAmD,SADC,IAANnD,IAGM,CAAC+uB,GAAS/uB,GAAGqiB,EAAOjiB,QAAQ0T,oBAKzChjB,YAED,OAAOrF,KAAKijC,cAAcjvB,QAAQsvB,IAASx1B,QACzCE,KAAWuG,KAEAmD,SADC,IAANnD,IAGM,CAAC+uB,GAAS/uB,GAAGqiB,EAAOjiB,QAAQ0T,oBAKzChjB,YAED,OAAOrF,KAAKkjC,cAAclvB,QAAQsvB,IAASx1B,QACzCE,KAAWuG,KAEAmD,SADC,IAANnD,IAGM,CAAC+uB,GAAS/uB,GAAGqiB,EAAOjiB,QAAQ0T,mBAOlDpd,OAAKsJ,IACH,IAAU,IAANA,EAIF,YAHAvU,KAAK4sB,MAAMM,SACT,IAAIU,KAAazqB,qBAIrB,MAAO4e,GAAWvuB,GAAS60B,IAAc9T,EACnCgvB,GAAc,CAClBC,sBAAkB9uB,EAClBqN,UAAWA,GACXhG,cAAevoB,GACfiwC,uBAAwBjwC,GACxBkwC,eAAgBhf,UAAUX,UAAY,QACtCsf,YAAahb,IAEf7a,GAAUwa,aAAeub,GACzBvjC,KAAK4sB,MAAMM,SAAS,IAAIa,KAAQwV,KAC5Blb,KAAehjB,eACjBrF,KAAK2lB,gBAAgB/N,8BAEvB5X,KAAKqgC,mBAAmBxa,gBAAgB0d,SAG1C5rB,KAAYgQ,IACHjQ,SAAG,KAGhB,CAAEwV,UAAU,kDAzJH8V,GAAWp0B,iKAAXo0B,EAAW3iC,QAAX2iC,EAAW,YAAXA,GAAb,+JC8BA,MAAMx1B,YAGC,IAAMm2B,GAAb,MAAM,QAGJ5jC,YACUkhC,EACEjkB,EACA7B,GACAF,EACAlH,GACA6vB,GACApsB,GACAoV,GACA9I,GACA5I,GACA2oB,EACAle,EACAme,GACAb,GACAc,GACAb,GACApvB,GACAiP,GACAihB,GACAjd,IAnBF/mB,gBACEA,sBACAA,sBACAA,mBACAA,oBACAA,4BACAA,0BACAA,cACAA,2BACAA,wBACAA,+BACAA,uBACAA,6BACAA,sBACAA,8BACAA,sBACAA,kBACAA,iBACAA,8BACAA,eAQZA,YAAQ0hC,QACN,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAOC,OACP5zB,OAAWuG,IACT,MAAM+a,EAAWtvB,KAAK+jC,sBAAsBjpB,eAM5C,IALiB,IAAbwU,GACFtvB,KAAK4sB,MAAMM,SACT,IAAI+W,MAAkB3U,KAGT,IAAbA,GAAmC,OAAbA,GAAqBA,EAASvlB,QAAU,EAChE,OAAO/J,KAAK6jC,wBAAwBl2B,YAEtC,UAAWgI,MAAK2Z,EAEM,OAAlB3Z,GAAEuuB,aACgB,KAAlBvuB,GAAEuuB,cACkB,IAApBvuB,GAAEokB,eAEF/5B,KAAK4sB,MAAMM,SAAS,IAAIiX,MAAsBxuB,KAGlD,OAAO3V,KAAK6jC,wBAAwBl2B,eAG1C,CAAEuf,UAAU,IAGdltB,oBAAc0hC,MACZ,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAsBlW,QACtB2W,QACEpiC,KAAK4sB,MAAM9e,MAAKgf,QAAOmD,OACvBjwB,KAAK4sB,MAAM9e,QAAKgf,MAAOG,OACvBjtB,KAAK4sB,MAAM9e,MAAKgf,QAAO2M,WAEzBzrB,KAAU,EAAE4oB,EAAQtH,EAAUuI,GAAM9f,OAClC,MAAM+D,GAAWtO,GAAUmB,eAC3B,OAAO3O,KAAKgd,eAAeZ,YAAYN,IAAUhO,MAC/CE,OAAWuN,OACF7D,MAAG,CAACkf,EAAQiB,GAAM/b,GAAU/D,GAASwD,YAIlDvN,KAAU,EAAE4oB,EAAQiB,EAAM/b,GAAU/D,GAASwD,MACpCvb,KAAKgd,eACTd,eAAeJ,GAAU+b,EAAK9b,eAC9BjO,QACCE,KAAWkH,OACFwC,MAAG,CAACkf,EAAQiB,EAAM/b,GAAU/D,GAASwD,GAAUrG,WAI9DlH,KACE,EAAE4oB,EAAQiB,EAAM/b,GAAU/D,GAASwD,GAAUrG,OAC3C,MAAMkvB,GAAapkC,KAAKgd,eAAe5B,mBACrCrD,GACA7C,GACA0hB,EAAOjiB,QAAQ0vB,qBACfzN,EAAOjiB,QAAQ2vB,gBACf/oB,GAASA,SACTqb,EAAOjiB,SAWT,GATA3U,KAAK+iB,SAASrT,KACZ1P,KAAKukC,6BAA6B/qC,4BAClC,QACA,CACE6pB,mBAAoB,SACpBC,iBAAkB,SAClB1R,SAAU,MAGVimB,EAAKwL,cAAgBh+B,YAAwB,CAC/C,MAAMm/B,GAAQlvB,MAA2B8uB,IACzC,OAAOpkC,KAAKkjC,cAAcnuB,YAAYyvB,IAAO12B,MAC3CE,OAAWoH,KACT,MAAMqvB,GAAenvB,MAA2B8uB,GAAY,CAC1D7uB,EAAG7I,WAAe,KAAO0I,GAAOG,GAAGhH,WACnCgG,EAAG,KAAOa,GAAOb,EACjBiB,EAAG,KAAOJ,GAAOI,IAEnB,OAAOvH,QAAK6N,GAASwM,gBAAgBmc,UAEvCz2B,KAAWuG,KACFmD,QAAG,CAACkf,EAAQriB,GAAGW,OAI5B,GAAI2iB,EAAKwL,cAAgBh+B,oBAAgC,CACvD,MAAMq/B,GAAa,IACdN,GACHn2B,KAAM4pB,EAAK9b,eAEb,cAAO2oB,GAAWnpB,gBACXmpB,GAAWxvB,MACXlV,KAAK8jC,qBAAqB/uB,YAAY2vB,IAAY52B,QACvDE,KAAWuG,KACFmD,QAAG,CAACkf,EAAQriB,GAAGW,OAI5B,GAAI2iB,EAAKwL,cAAgBh+B,cAA0B,CACjD,MAAMq/B,GAAa,IACdN,GACHn2B,KAAM4pB,EAAK9b,eAEb,cAAO2oB,GAAWnpB,gBACXmpB,GAAWxvB,MACXlV,KAAK2lB,gBAAgB5Q,YAAY,CAAC2vB,KAAa52B,QACpDE,KAAWuG,KACFmD,QAAG,CAACkf,EAAQriB,GAAGW,OAI5B,GAAI2iB,EAAKwL,cAAgBh+B,YACvB,OAAOrF,KAAKijC,cAAcluB,YAAYqvB,IAAYt2B,QAChDE,KAAWoH,KACFnH,QAAK6N,GAASwM,gBAAgBlT,SAEvCpH,KAAWuG,KACFmD,QAAG,CAACkf,EAAQriB,GAAGW,YAMhClH,KAAU,EAAE4oB,EAAQ+N,EAAMzvB,OACxB,IAAa,IAATyvB,EACF,YAAK/X,MAAMM,SAAS,IAAIkC,MAAiBwH,EAAOjiB,QAAQ4R,KACxDvmB,KAAK+iB,SAASrT,KACZ1P,KAAK4kC,6BAA6BnnC,kBAClC,QACA,CACE4lB,mBAAoB,SACpBC,iBAAkB,SAClB1R,SAAU,OAGd5R,KAAK4sB,MAAMM,SAAS,IAAI2X,OACxB7kC,KAAK4sB,MAAMM,SAAS,IAAIkC,MAAiBwH,EAAOjiB,QAAQ4R,QACjD7O,OAAG,GAEZ1X,KAAK4sB,MAAMM,SACT,IAAIyC,MAAiB,IAChBiH,EAAOjiB,QACVolB,eAAe,EACfmK,YAAaS,EACbG,aAAc5vB,MAGlB,MAAM6vB,GAAkB,IAAIzI,MAC5B,OAAOt8B,KAAK+T,YAAY2gB,gBAAgB5mB,QACtCs0B,MAAepiC,KAAK4sB,MAAM9e,MAAKgf,QAAOmD,WACtCwM,KAAUsI,KACV95B,OAAK+5B,KACH,MAAOC,GAAI3V,IAAY0V,GACjBxpB,GAAU8T,GAASsH,EAAOjiB,QAAQ4R,IAEtC/K,IACA,kBAAmBA,KACO,IAA1BA,GAAQue,cAERgL,GAAgBr0B,MAAK,IAGZ,IAAPu0B,IACFjlC,KAAK4sB,MAAMM,SACT,IAAIiX,MAAsB,IACrBvN,EAAOjiB,QACVuvB,YAAaS,EACbG,aAAc5vB,YAQ9B,CAAEgY,UAAU,IAGdltB,qBAAiB0hC,QACf,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAyBhW,UACzByW,MAAepiC,KAAK4sB,MAAM9e,MAAKgf,QAAOmD,SACtCjiB,OAAU,EAAEsF,EAAG4xB,MACb,MAAM5V,GAAW4V,EACjB,IAAI1pB,GACJ,UAAW7F,MAAK2Z,GACV3Z,GAAE4Q,KAAOjT,EAAEqB,QAAQ4R,KACrB/K,GAAUlI,EAAEqB,SAGhB,SAAO+C,MAAG4X,SAEZrkB,KAAK0K,GACI3V,KAAK+jC,sBAAsBnpB,aAAajF,KAGrD,CAAEuX,UAAU,IAGdltB,yBAAqB0hC,QACnB,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAA0B1V,UAC1BmW,MAAepiC,KAAK4sB,MAAM9e,MAAKgf,QAAOmD,SACtChlB,OAAI,EAAE2rB,EAAQtH,MACZtvB,KAAK+jC,sBAAsBnpB,aAAa0U,MAG9C,CAAEpC,UAAU,IAGdltB,wBAAoB0hC,QAClB,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAyB3V,QACzB/gB,OAAK2rB,IACH52B,KAAK+jC,sBAAsBrpB,oBAGjC,CAAEwS,UAAU,IAGdltB,8BAA0B0hC,QACxB,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAA8BpW,QAC9B4Z,SAAUvO,IACR,MAAMwO,EAAc,IAAI9I,MACxB,OAAOE,QAASl8B,+BAAgDwN,QAC9D2uB,KAAU2I,IACVp3B,OAAWD,KACT,MAAM+N,GAAWtO,GAAUmB,eAC3B,YAAiB+F,IAAboH,IACKpE,SAAG,MAELzJ,MAAK6N,GAASupB,kBAAkBv3B,MACrCE,OAAWs3B,KACT,GACkB,OAAhBA,KACgB,IAAhBA,SACgB5wB,IAAhB4wB,GAEA,MAAM,EAER,MAAMC,GAAqBD,GAAyB,EAC9C9sB,GAAK,CACTvK,KAAM2oB,EAAOjiB,QAAQ6wB,aACrB/pB,GAAImb,EAAOjiB,QAAQ8wB,aACnBvwB,MAAO0hB,EAAOjiB,QAAQmwB,cAExB,OAAO72B,QACL6N,GAAS4pB,sBAAsB9O,EAAOjiB,QAAQuvB,cAC9Cp2B,QACAE,KAAW23B,IACO,OAAZA,KAAgC,IAAZA,IACf13B,WACL23B,OACE9pB,GACAypB,GACA/sB,GAAGvK,KACHuK,GAAGtD,QAELpH,MACAE,OAAWuG,IACC,OAANA,IACKmD,QAAG,SAELzJ,MAAK6N,GAAS4pB,sBAAsBnxB,GAAEowB,UAI5CjtB,QAAGiuB,QAEZhuB,KAAY7C,OACH4C,MAAG,WAIhBzM,OAAKsJ,KACH,GAAU,MAANA,GAGJ,IAAiB,IAAbA,GAAEsxB,OAUJ,OATA7lC,KAAK4sB,MAAMM,SACT,IAAIyC,MAAiB,CACnBpJ,GAAIqQ,EAAOjiB,QAAQ4R,GACnB2d,YAAatN,EAAOjiB,QAAQuvB,YAC5BnK,eAAe,EACfzf,aAAcpV,6BAGlBkgC,EAAY10B,MAAK,GAGnB,GACe,IAAb6D,GAAEsxB,QACFtxB,GAAEuxB,eACAxlC,kCAeF,OAbAN,KAAK4sB,MAAMM,SACT,IAAIyC,MAAiB,CACnBpJ,GAAIqQ,EAAOjiB,QAAQ4R,GACnBwf,YACEnP,EAAOjiB,QAAQqxB,cAAgB7gC,aAC3B,IAAIiC,MAAOgK,UACXwlB,EAAOjiB,QAAQoxB,YACrB7B,YAAatN,EAAOjiB,QAAQuvB,YAC5BnK,eAAe,EACfzf,aAAcpV,kBAGlBkgC,EAAY10B,MAAK,aASjC,CAAEwc,UAAU,IA5UZltB,KAAK4kC,6BACH5kC,KAAK8jB,mBAAmBc,yBAAyB,WACnD5kB,KAAKukC,6BACHvkC,KAAK8jB,mBAAmBc,yBAAyB,yDA5B1C+e,GAAc/0B,gRAAd+0B,EAActjC,QAAdsjC,EAAc,YAAdA,GAAb,8BC/CO,IAAMsC,GAAb,MAAM,QACJlmC,YACUkhC,EACEiF,EACHtZ,IAFC5sB,gBACEA,uBACHA,cAGTA,YAAQ0hC,QACN,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAOC,OACP32B,OAAK0K,IACH,MAAM5K,GAAY/K,KAAKkmC,gBAAgBp8B,uBACvC,UAAWyJ,MAAK1I,OAAOC,KAAKC,IAC1B/K,KAAK4sB,MAAMM,SACT,IAAIuD,MACF,CACElK,GAAIxb,GAAUwI,IAAG5I,aACdI,GAAUwI,MAEf,OAMZ,CACE2Z,UAAU,IAIdltB,wBAAkB0hC,MAChB,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAA0B1Y,QAC1Bxd,QAAQmrB,IAA6B,IAAlBA,EAAOnN,WAC1Bxe,KAAK2rB,IACH52B,KAAKkmC,gBAAgB57B,aAAassB,EAAOjiB,YAI/C,CAAEuY,UAAU,IAGdltB,yBAAqB0hC,QACnB,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAA6BtY,UAC7B5d,MAAQmrB,IAA6B,IAAlBA,EAAOnN,SAC1B2Y,QAAepiC,KAAK4sB,MAAM9e,QAAKgf,MAAOuE,SACtCpmB,OAAK0H,IACH,MAAOikB,GAAQ7rB,IAAa4H,EAC5B3S,KAAKkmC,gBAAgB56B,eAAeP,GAAW6rB,GAAOjiB,YAI5D,CAAEuY,UAAU,IAGdltB,2BAAqB0hC,MACnB,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAA6BxY,QAC7B1d,QAAQmrB,IAA6B,IAAlBA,EAAOnN,WAC1Bxe,KAAK2rB,IACH52B,KAAKkmC,gBAAgB57B,aAAassB,EAAOjiB,YAI/C,CAAEuY,UAAU,kDArEH+Y,GAAkBr3B,gEAAlBq3B,EAAkB5lC,QAAlB4lC,EAAkB,YAAlBA,GAAb,8BCIO,IAAME,GAAb,MAAM,QACJpmC,YACUkhC,EACEmF,EACAC,GACHzZ,GAHC5sB,gBACEA,2BACAA,oCACHA,aAGTA,YAAQ0hC,QACN,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAOC,OACP32B,OAAK0K,KACH,MAAM6N,GACJxjB,KAAKomC,oBAAoBnjB,2BAC3B,UAAW1P,MAAK1I,OAAOC,KAAK0Y,IAC1BxjB,KAAK4sB,MAAMM,SACT,IAAI2E,MACF,CACEtL,GAAI/C,GAAcjQ,IAAG5I,aAClB6Y,GAAcjQ,MAEnB,OAMZ,CACE2Z,UAAU,IAIdltB,4BAAsB0hC,MACpB,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAA8BjY,QAC9Bje,QAAQmrB,KAA6B,IAAlBA,GAAOnN,WAC1Bxe,KAAK2rB,KACH52B,KAAKomC,oBAAoBhjB,kBAAkBwT,GAAOjiB,YAIxD,CAAEuY,UAAU,IAGdltB,6BAAyB0hC,QACvB,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAA8B7X,UAC9Bre,MAAQmrB,KAA6B,IAAlBA,GAAOnN,SAC1B2Y,QAAepiC,KAAK4sB,MAAM9e,QAAKgf,MAAO4F,SACtCznB,OAAK0H,KACH,MAAOikB,GAAQpT,IAAiB7Q,GAChC3S,KAAKomC,oBAAoB3iB,mBACvBD,GACAoT,GAAOjiB,QAAQhK,cAKvB,CAAEuiB,UAAU,IAGdltB,6BAAyB0hC,QACvB,IACE1hC,KAAKihC,SAASnzB,QACZ6zB,MAAiC3X,QACjC/e,OAAI,KACFjL,KAAKomC,oBAAoBziB,4BAI/B,CAAEuJ,UAAU,IAGdltB,+BAAyB0hC,MACvB,IACE1hC,KAAKihC,SAASnzB,MACZ6zB,QAAiC/X,QACjCne,QAAQmrB,KAA6B,IAAlBA,GAAOnN,WAC1Bxe,KAAK2rB,KACH52B,KAAKomC,oBAAoBhjB,kBAAkBwT,GAAOjiB,YAIxD,CAAEuY,UAAU,kDAtFHiZ,GAAsBv3B,8EAAtBu3B,EAAsB9lC,QAAtB8lC,EAAsB,YAAtBA,GAAb,GC8FaG,GAAb,MAAM,sDAAOA,8BAAS5hC,WAJR07B,kCAdD,IACNh9B,KACH,CACEuE,QAASC,KACTC,SAAUhI,MAEZ,CACE8H,QAAS4+B,KACT1+B,SAAU2O,IACVgwB,OAAO,GAET,CAAE7+B,QAASM,KAAiBF,SAAU,IACtC,CAAEJ,QAASO,KAAcH,SAAU,KACpCxC,SAnEQ,CACPkhC,KACAC,KACAv+B,KACAC,KACA63B,EACAt6B,KACAc,KACA8C,MACA/D,KACAmhC,aACE,CACEC,UAAWC,KACXC,eAAgBC,KAChBC,WAAYC,KACZC,aAAcC,KACdC,sBAAuBC,KACvBC,qBAAsBC,KACtBC,iBAAkBC,MAEpB,CACEC,cAAe,CACbC,0BAA0B,KAIhCC,aAAsB,CACpB5E,GACAhC,EACAO,GACAoC,GACAwC,GACAF,MAEuB,IAAzBj6B,aACI,GACA67B,gBAA+B,CAC7BC,OAAQ,MAEdriC,KACAC,KACAS,MAIAsgC,KACAt+B,KACAC,KACAs+B,KACA/gC,KACAH,KACA+D,MACApD,QAoBSmgC,GAAb,+BCzFA,IAAIyB,GAfHt4B,OAAeu4B,OAASv4B,OACxBA,OAAew4B,QAAUx4B,OACzBA,OAAew4B,QAAQC,SAAU,EACjCz4B,OAAew4B,QAAQ1nC,QAAU,GACjCkP,OAAew4B,QAAQE,SAAW,CAAEC,MAAM,GAC1C34B,OAAeu4B,OAAOK,YAAc,IAAIC,MAAgB,IAE1B,IAA3Bt8B,iBACFu8B,WAWWpK,qBACVE,cACA7D,UAAU,KACLuN,KACE,UAAWt4B,QAAU,YAAaA,OAAO+4B,OAC3C/4B,OAAO+4B,MAASC,UAElBh5B,OAAO+4B,MAAWT,IAEpBA,GAhBKW,OAAyBC,gBAAgBrC,IAgB7BzxB,MAAO+zB,GAAQC,GAAQlhB,MAAM,mBAAoBihB,MAEtEzK,qBAAgCI","names":["ContractAddressesMainnetEnum","contractChainlinkMainnet","bulkRegistrationMainnet","acceptedCurrenciesMainnet","ContractAddressesTestnetEnum","contractChainlinkTestnet","bulkRegistrationTestnet","acceptedCurrenciesTestnet","currency","address","ETH","decimals","decimalRepresentation","highValueAsset","DAI","USDT","WBTC","SupportedCurrenciesEnum","ENSContracts","registrar","resolver","registrarController","migrationContract","nullResolver","payNoMarketAddress","BlockExplorersEnum","BUTTON","SAVE_CHANGES","PROCEED","DISMISS","CONNECT","CONNECT_WALLET","DISCONNECT","LOGOUT","CLOSE","SETTINGS","LAUNCH_APP","CONNECT_TO_PROCEED","VIEW_DETAILS","REFRESH","START_REGISTRATION","CANCEL","PRESS_ENTER","LEARN_MORE","CLOSE_WINDOW","SHOW_AVAILABLE_ONLY","SHOW_AVAILABLE","PROCEED_SEARCH","DOWNLOAD","SHOW_ALL","DESELECT_ALL","SHOW_SELCTED","LINK","CUSTOM_LINK","SET_QR_LINK_ALL","SET_QR_LINK","DISABLE_ALL","DISABLE_QR_CODE","ENABLE_QR_CODE","SET_QR_COLOR","SET_COLOR","SET_ALL_COLORS","SET_PRICE","SET_PRICE_ALL","RESET","CHECK_PROFILE","GO_TO_DASHBOARD","GO_TO_HOME","VIEW_PROFILE","CHECK_DOMAINS","TRANSACTION_DETAILS","BUY_NOW","CLEAR_HISTORY","DEFAULT","CUSTOM","FRACTIONALISE","HEADER","FAQ","BACK_TO_HOME","HELP_SUPPORT","CANCEL_REGISTRATION","PROFILE","DOCS","DOCUMENTATIONS","CART","BOOKMARKS","PAYMENTS_HISTORY","LIGHT_MODE","CUSTOM_RPC","IPFS","INITIALISING","FINDING_PEERS","FAILED","READY","PUBLISHING","EVENTS","TRANSFER","REGISTRATION","RENEWAL","SALE","MINT","BURN","GENERIC","NETWORK_CHANGED_INCOMPATIBLE","IPNS_PUBLISHING_COMPLETED","PENDING_TRANSACTION_CERATED","LABELS","PlEASE_WAIT","SELECT_A_DOMAIN","RENEW","MANAGE_DOMAINS","SEARCH_FOR","MANAGE","COLLECT","LANDING_TEXT","SEARCH","CONTAIN_ALPHABET","CONTAIN_NUMBERS","CONTAIN_EMOJI","MIN_LENGTH","MAX_LENGTH","CONTAINING_KEYWORDS","FILTERS","DOMAINS","DOMAIN","DOMAIN_HISTORY","EXPIRATION_DATE","REGISTRATION_DATE","CREATION_DATE","DETAILS","YOUR_DOMAINS","PROCESSING","LAYOUT","ENTER_SUFFIX","ENTER_PREFIX","CLICK","CONNECT_TO_START","TIP","ACTION","ADVANCED_SEARCH_TIP","ADVANCED_SEARCH","ADVANCED_MODE","REGISTER_DOMAINS_TO","NO_DOMAINS_SELECTED","FIND_AND_REGISTER","SELECTED_DOMAINS","REGISTER","SEARCH_RESULTS","PROCEED_TO_REGISTRATION","REGISTER_DOMAINS","REGISTRANT_ADDRESS","SET_RESOLVER","TOTAL_COST","GAS_PRICE","NO_ADDRESS_DETECTED","DURATION","NOTICE_SELECT_AN_RPC","ENABLE_LIGHT_MODE","BEFORE_COMMIT","COMMIT_SENT","COMMIT_COMPLETE","AWAIT","BEFORE_REGISTRATION","REGISTRATION_SENT","REGISTRATION_COMPLETE","REGISTRATION_COMPLETE_TITLE","YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED","BASKET_EMPTY","PLEASE_SELECT_DOMAINS_TO_REGISTER","PAYMENT","PAYMENT_CANCELLED","SPINNER","NO_DATA_TO_DISPLAY","PERFORMING_SEARCH","LOADING_DATA","FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET","FORM_LABELS","ENTER_DURATION","ENTER_QR_LINK","ENTER_PRICE","ENTER_CUSTOM_ADDRESS","FORM_ERRORS","INVALID_DURATION","INVALID_QR_LINK","INVALID_PRICE","o","S","m","A","E","O","validTranslations","en","EN","de","DE","es","ES","fr","FR","ru","RU","jp","JP","cn","CN","HammerJsConf","HammerGestureConfig","constructor","this","swipe","velocity","threshold","t","factory","generalConfigurations","version","defaultLanguage","defaultPage","PagesEnum","maximumDecimalInPrices","maxAttemptsToCheckoutData","sessionTimeout","maxRPCCallRetries","timeUntilImageLoadErrors","timeToUpdateEthUSDRate","timeToUpdateCheckoutPipe","timeToUpdateRegistrationGasPrice","timeUntilCheckoutExpires","maxConfirmationsUntilTxFinal","declarePaymentStatusUnkownUntilXFailedDataFetches","gasLimitBuffer","maxCheckoutRetryUntilRehydrateProcessId","maxIpfsSubscriptionRetries","maxDomainsToRegister","maxYearsRegistration","maxTotalCostBuffer","defaultCurrency","enableCustomRPC","docsLink","blockscanLink","trezorManifest","email","appUrl","appMeta","description","url","icons","name","wallectConnectSupportedWallets","check","confetti","cart_empty","llayers","spin","infiniteLoopedIcons","imageToPreload","privatePages","EnsEventsEnum","EnsEvensSymbolEnum","UserStoreErrorsEnum","serviceProviders","UserService","UserSessionService","UserFacadeService","PagesFacadeService","NavigatorFacadeService","NavigatorButtonsFacadeService","FormValidationService","MiscUtilsService","TranslationService","FormatTimePipe","TimeAgoPipe","HttpClient","EnsService","RegistrationDataService","BookmarksServiceService","RegistrationServiceService","PaymentStorageService","WalletConnectService","DownloadService","routerPaths","canvas","bootstrap","home","checkout","notfound","profile","domain","manage","ValidRPCProvidersEnum","PaymentErrorCodes","PaymentTypesEnum","NonceTypesEnum","WalletTypesEnum","IconModule","imports","TranslationModule","MatDialogModule","MatButtonModule","FlexLayoutModule","CustomAddressDialogModule","ReactiveFormsModule","CommonModule","FormsModule","MatIconModule","MatFormFieldModule","MatInputModule","GenericDialogModule","OnboardDialogModule","SharedModule","SpinnerCustomModule","BulkSearchModule","MatSlideToggleModule","MatProgressBarModule","BlockyModule","SettingsDialogModule","MainHeaderModule","MatBadgeModule","MatMenuModule","MatAutocompleteModule","DatePipe","transform","value","inputDate","Date","parseInt","super","pure","TimeAgo","timeAgo","format","provide","HAMMER_GESTURE_CONFIG","useClass","MAT_PROGRESS_BAR_DEFAULT_OPTIONS","useValue","MAT_BOTTOM_SHEET_DATA","MAT_DIALOG_DATA","MatDialogRef","HttpClientModule","RouterModule","MatBottomSheetModule","MatExpansionModule","MatChipsModule","MatSelectModule","MatTabsModule","MatCardModule","MatDividerModule","MatRadioModule","MatStepperModule","MatCheckboxModule","MatSliderModule","MatRippleModule","MatProgressSpinnerModule","MatTableModule","MatListModule","MatTooltipModule","MatDatepickerModule","MatNativeDateModule","MatSnackBarModule","MatPaginatorModule","DragDropModule","OverlayModule","QRCodeModule","NgxColorsModule","countBookmarks","loadBookmarksAndFeed","length","loadBookmarks","localStorage","getItem","sBookmarks","JSON","parse","saveBookmark","domainData","bookmarksRaw","reduce","accumulator","labelName","bKeys","Object","keys","bookmarks","Set","map","k","push","setItem","stringify","removeBookmark","domainName","bookmarksUpdated","filter","d","clearBookmarks","isDomainBookmarked","CurrencyService","deriveCurrencyAddressFromName","currencies","environment","toUpperCase","deriveCurrencyDataFromCurrencyName","currencySearched","c","convertAmountToDecimal","amountInString","paymentCurrency","currencyData","bnAmount","BigNumber","ethers","convertAmountToToken","getSupportedCurrencies","determineDefaultCurrencyForPayment","searchType","chooseSecondDefault","secondDefaultToBeChosen","chainlinkV3ABI","inputs","outputs","internalType","type","stateMutability","globalAny","CurrencyExchangeService","paymentFacade","getPrices","processorLocked","timer","pipe","i","switchMap","from","chainlink","latestRoundData","normalizedPrices","setEthUsdRate","answer","toNumber","toString","chainlinkAddress","Contract","canvasProvider","i0","mistUtils","download","meta","dataRaw","data","TextEncoder","encode","blob","Blob","fileURL","URL","createObjectURL","window","open","http","getDomainMetadata","domainHash","get","ensMetadataAPI","findDomains","domains","ensGraphQLAPI","Observable","observer","query","gql","request","domainNames","then","next","complete","getDomain","downloadDomainsListCSV","finalForm","join","kk","calculateExpiry","expiryDate","eDate","getTime","calculateGracePeriodPercentage","timeUtilGraceEnds","gracePeriod","isDomainNameNotValid","ens_normalize","calculateDomainsPrice","ethToUsdRate","duration","ethUsdRate","nameCost","parseFloat","toFixed","markFormGroupTouched","formGroup","values","controls","forEach","control","markAsTouched","PathResolveService","resolve","route","state","typoPath","replace","getThreshold","dictionary","path","Math","abs","sortByDistances","pathsDistance","sort","a","b","levenshtein","matrix","j","charAt","min","TrezorService","miscUtils","pagesFacade","connect","time","TrezorConnect","lazyLoad","webusb","popup","manifest","r","coin","result","undefined","payload","descriptor","catch","e","signPayment","accountInfo","transaction","nonce","toHexString","signed","success","utils","v","s","getWeb3Provider","detectEthereumProvider","p","IconRegistryService","injectCustomIcons","perloadCustomIcons","ic","ici","Image","src","PaymentEffectsService","recordLastConnectionAddress","connectionAddress","getLastConnectionAddress","lConnectionAddres","Intercept","router","userFacade","intercept","req","handle","LedgerService","TransportUSB","transport","ledger","LedgerEth","getAddress","createTransport","signTransaction","substring","MetamaskService","userFacadeService","getAccounts","of","catchError","chainChangedDetectionDaemon","ethereum","on","chainId","setNetworkChainCode","getChainId","networkVersion","method","accounts","Ethers","payloadHash","params","tx","roundUp","num","roundTo","round","testJSON","json","str","checksumEtheruemAddress","toLowerCase","commafied","indexOf","parts","split","prependToArray","array","newArray","slice","unshift","toHex","rb","testNumeric","RegExp","testAlphaNumeric","testAlpha","testEmoji","testIntNumeric","PaymentStoreErrorsEnum","PaymentErrorService","getPaymentErrorTranslatedTextKey","paymentError","getPaymentErrorEnumKey","errorCode","networkName","removePayments","removeItem","savePayments","paymentData","loadPayments","l","PaymentService","userService","currencyService","walletService","prepareTransaction","toAddress","gasLimit","gasPrice","payment","to","gas","paymentTotal","paymentAbstractBytesSlot","resolveAddressOfEth","provider","walletAddress","resolveName","n","getWalletNonce","getTransactionCount","getGasPrice","getFeeData","feeData","ENSBulkRegistrationContractMainnetABI","anonymous","indexed","payable","components","constant","ENSBulkRegistrationContractTestnetABI","RegistrationFacilityService","miscUtilsService","paymentService","registrationDomainsToCommitmentPacket","owner","secret","commitments","compiled","nc","reverseRecord","fuses","wrapperExpiry","metadata","commitmentPacketToRegistrationDomains","decompiled","createRegistrationCommitmentPacket","payer","contract","getEnsBulkRegistrationContract","comitmentsPrepared","nCP","isResolverSet","commitmentResult","createCommitmentsForRegistration","getGasLimitEstimation","toPromise","priceRanges","pr","mul","div","createRegistrationRequestPaymentPacket","commitmentsPrepared","interface","encodeFunctionData","decodeRegistrationPacket","abstractData","parseTransaction","completeRegistration","totalCost","names","namesLengths","dataMethod","dataParams","dataInput","add","bulkRegistrationContractAddress","BulkRegistrationContractABI","providerFunction","estimateGas","EnsTestnetABI","EnsABI","EnsRegistrarControllerTestnetABI","EnsRegistrarControllerABI","martketSaleTopics","SEAPORT","RARIBLE","X2Y2","LOOKSRARE","SortableMarkets","resolevTxType","relatedNameLabelHash","marketTopics","markets","qualifiedTx","logs","topics","includes","resolvedEventType","labelHashInHex","paymentNoAddressBytes","topicNormalised","x","whichMarket","marketBuyer","getMarketBuyer","marketSeller","getMarketSeller","txHash","transactionHash","txValueToEther","date","timestamp","registrant","w","uniqueSet","filteredEvents","re","isDuplicate","has","market","eventWholeData","event","match","getENSContract","ensContractABI","getENSRegistrarControllerContract","ensRegistrarControllerContractABI","snackBar","countRegistrations","loadRegistrationsAndFeed","loadRegistrations","sRegistrations","saveRegistrations","horizontalPosition","verticalPosition","registrationsRaw","registrations","removeRegistration","registrationsUpdated","removeAllRegistrations","isDomainOnRegistrationList","TranslationPipe","translationService","language","getLanguage","translations","getTranslation","keysSplit","default","currentKey","key","lang","savedLanguage","loadLanguage","navigator","getLocale","getCacheableLanguagekeys","translation","getText","saveLanguage","getUserDomains","getEthAddress","ethName","getEthName","lookupAddress","getUserText","text","getResolver","getUserContentHash","getContentHash","web2Link","metamaskService","quitUserSession","saveUserSession","userData","loadUserSession","getUserSessionProvider","providerData","newProvider","createAlchemyFrontDefaultProvider","T","createAlchemyFrontProvider","createInfuraFrontProvider","id","createJSONFrontProvider","getDefaultChainId","chain","providers","providerKey","projectId","projectSecret","ngZone","dateNow","walletConnect","connector","WalletConnect","bridge","qrcodeModal","QRCodeModal","qrcodeModalOptions","mobileLinks","desktopLinks","clientMeta","error","removeUser","wc","killSession","setErrorState","chainAccount","gotoPageRoute","createSession","account","registerUser","walletType","sendTransaction","WalletService","produceNonce","nonceLength","charLibrary","nonceString","rnum","floor","random","validateWalletAddress","test","AddOneENSBookmark","UpdateENSBookmark","UpsertOneENSBookmark","UpsertManyENSBookmark","RemoveOneENSBookmark","RemoveManyENSBookmark","RemoveAllENSBookmark","SetENSBookmarkError","toSave","AddOneENSRegistration","UpdateENSRegistration","UpsertOneENSRegistration","UpsertManyENSRegistration","RemoveOneENSRegistration","RemoveManyENSRegistration","RemoveAllENSRegistration","SetENSRegistrationError","SetNavigatorButtonsState","GetNavigatorButtonsState","SetNavigatorState","GetNavigatorState","ShowLoadingProgressBarOnLoad","HideLoadingProgressBarOnLoadFinished","SetPagesCriticalError","SetPagesPageSlide","SetPagesState","SetPageIpfsErrors","SetPageIpfsState","SetPageChainCode","SetPagesNewPageState","SetPagesNetworkState","SetPagesVisibility","SetRPCProvider","SetPagesNetworkStateOffline","GetPagesState","GotoPageRoute","redirect","firstTimeSet","PaymentCheckFulfilled","CancelledPayment","AddOnePayment","UpdatePayment","UpsertOnePayment","UpsertManyPayment","SetEthUSDRates","RemoveOnePayment","RemoveManyPayment","RemoveAllPayment","ArchiveAllPayment","SetPaymentError","SetUserState","SetUserError","GetUserState","RemoveUserError","RemoveUserState","RemoveUser","AddUser","UpdateUser","RegisterUser","store","userState$","select","getCurrentUserState","user$","getCurrentUser","dispatch","UserRegister","newUserState","userState","UserStateSet","removeUserState","UserStateRemove","UserRemove","removeUserStateError","UserErrorRemove","UserErrorSet","addUser","userAddData","UserAdd","updateUser","UserUpdate","PaymentFacadeService","paymentState$","getPaymentState","pendingPayments$","getPendingPayments","paymentsStoreError$","getPaymentStateError","paymentsStoreLoading$","getPaymentStateLoading","ethUsdPrice$","getEthUsdPrice","usdRate","PaymentETHUSDRatesSet","createPayment","PaymentAddOne","removeAllPayment","PaymentRemoveAll","removePayment","PaymentRemoveOne","paymentSerial","payments","PaymentRemoveMany","archiveAllPayment","PaymentArchiveAll","upsertPayment","PaymentUpsertOne","updatePayment","PaymentUpdate","getPayment","paymentId","selectPayment","getPayments","removePaymentStateError","PaymentErrorSet","ENSBookmarkFacadeService","getENSBookmarkState$","getENSBookmarkState","addBookmark","bookmark","ENSBookmarkAddOne","ENSBookmarkRemoveOne","removeBookmarks","ENSBookmarkRemoveMany","upsertBookmark","ENSBookmarkUpsertOne","updateBookmark","ENSBookmarkUpdate","getBookmark","bookmarkId","selectENSBookmark","getBookmarks","getENSBookmarks","removeBookmarkStateError","ENSBookmarkErrorSet","ENSRegistrationFacadeService","getENSRegistrationState$","getENSRegistrationState","addRegistration","registration","ENSRegistrationAddOne","ENSRegistrationRemoveOne","removeRegistrations","ENSRegistrationRemoveMany","ENSRegistrationRemoveAll","upsertRegistration","ENSRegistrationUpsertOne","updateRegistration","ENSRegistrationUpdate","getRegistration","registrationId","selectENSRegistration","getRegistrations","getENSRegistrations","removeRegistrationStateError","ENSRegistrationErrorSet","disabledButtonnavigatorState$","getCurrentNavigatorButtonsState","newNavigatorButtonsState","navigatorState","setTimeout","NavigatorButtonsStateSet","resetNavigatorButtonState","initialNavigatorButtonsState","navigatorState$","getCurrentNavigatorState","newNavigatorState","NavigatorStateSet","resetNavigatorState","initialNavigatorState","navigatorFacade","navigatorButtonFacade","dialog","pagesState$","getCurrentPagesState","pageErrorCode$","getCurrentErrorCode","pagesIpfsState$","getIpfsState","pagesIpfsError$","getIpfsError","pageLoadingState$","getCurrentPageLoadState","pageCritiaclError$","getCriticalErrorState","pageVisibility$","getCurrentPageVisibility","showLoadingProgressBar","PagesShowLoadingProgressBarOnLoad","setPageCriticalError","errorOccured","PagesSetCriticalError","setRpcProvider","PagesSetRPCProvider","setIpfsError","PagesSetIpfsError","setIpfsState","PagesSetIpfsState","hideLoadingProgressBar","PagesHideLoadingProgressBarOnLoadFinished","newPagesState","pagesState","PagesNewPageStateSet","newNetworkState","networkState","PagesNetworkStateSet","chainCode","PagesSetChainCode","setChainCodeByNetworkName","triggerNetworkOfflineDialog","PagesNetworkOfflineStateInvoke","setPageSlide","pageSlide","PagesSetPageSlide","pageRoute","toPageId","PageGotoRoute","pageId","disabledButtons","action","navigatorActiveButtonId","navigatorData","IpfsStatesEnum","initialPagesState","optionalProvider","pageVisibility","criticalErrorOccured","currentPageId","currentPageSlide","ipfsError","ipfsReady","networkStatus","networkChainCode","isPageLoading","initialUserState","loading","user","adapter","createEntityAdapter","selectId","initialPaymentState","getInitialState","ethUsdPrice","paymentCancelled","stateChange","upsertOne","ids","entities","addOne","upsertMany","removeOne","removeMany","removeAll","updatedPayments","archived","ensRegistrationAdapter","initialENSRegistrationState","ensBookmarkAdapter","initialENSBookmarkState","getNavigatorButtonsState","createFeatureSelector","createSelector","getNavigatorState","getPagesState","getCurrentNetworkChainId","getUserState","getUser","getPaymentStateFull","pendingPs","ps","paymentStatus","getENSRegistrationStateFull","archivedPs","getENSBookmarkStateFull","GenericDialogComponent","pagesFacadeService","genericDialogRef","ngOnInit","backdropClick","subscribe","closedByButton","closeDialog","overlays","document","getElementsByClassName","wrappers","overlaysCountOnInit","remove","attr","createAttribute","attributes","setNamedItem","existingAttr","getNamedItem","newAttr","close","goToOnExit","goToOnExitPage","goToLink","buttonLink","buttonLinkPageRef","textAlign","selectors","ctx","IconComponent","iconRegistryService","iconsRegistry","iconId","stopCheck","Subject","checkIconSubscription","interval","takeUntil","icon","nativeElement","innerText","setIcon","replaceAll","getElementById","APNG","parseURL","apng","width","height","iconAnimation","addContext","getContext","playIcon","play","rewind","frames","ngAfterViewChecked","isVisible","offsetParent","ngOnDestroy","unsubscribe","_reboot","asObservable","BootController","instance","watchReboot","reboot$","restart","production","development","deployed","local","chrome","defaultChain","baseUrl","validChainIds","networks","goerli","networkId","ensApp","homestead","routes","redirectTo","pathMatch","loadChildren","Promise","BootstrapModule","HomeModule","CanvasModule","DomainModule","ProfileModule","CheckoutModule","NotFoundModule","AppRoutingModule","useHash","NetworkStatusEnum","AppComponent","userSessionService","iconsRegistryService","onNetworkOnline","target","onNetworkOffline","cId","ngAfterViewInit","onLine","getHeight","innerHeight","pageLoadingState","NavigatorEffects","actions$","RpcService","loadRpc","saveRpc","rpcData","removeRPC","PagesEffects","activatedRoute","rpcService","createEffect","ofType","ROOT_EFFECTS_INIT","events","runOutsideAngular","NavigationStart","NavigationEnd","NavigationError","assessProviderChanges","createProvider","withLatestFrom","networkAndPageState","network","pageState","delay","run","message","panelClass","navigateByUrl","addEventListener","hidden","PagesSetVisibility","UserEffects","trezorService","ledgerService","userSessionStored","defaultChainId","connectType","timeNow","userSession","connectSignature","originalConnectAddress","deviceLanguage","PaymentEffects","paymentErrorService","currencyExchangeService","walletConnectService","paymentStorageService","paymentEffectsService","PaymentUpsertMany","paymentHash","CheckPaymentFulfilled","preparedTx","paymentMarketAddress","paymentGasLimit","staticGenericTranslatedTexts","txHex","signedPacked","txToFilter","hash","staticPaymentTranslatedTexts","PaymentCancelled","paymentNonce","paymentResolved","pvp","pv","paymentState","mergeMap","hasResolved","getBlockNumber","blockNumber","searchTxFromBlock","paymentPayer","paymentPayee","getTransactionReceipt","foundTx","getTransactionByNonce","status","confirmations","paymentDate","paymentType","ENSBookmarkEffects","bookMarkService","ENSRegistrationEffects","registrationService","registrationFacilityService","AppModule","HTTP_INTERCEPTORS","multi","BrowserModule","BrowserAnimationsModule","StoreModule","UserState","UserReducers","NavigatorState","NavigatorReducers","PagesState","PagesReducers","PaymentState","PaymentReducers","NavigatorButtonsState","NavigatorButtonsReducers","ENSRegistrationState","ENSRegistrationReducers","ENSBookmarkState","ENSBookmarkReducers","runtimeChecks","strictActionImmutability","EffectsModule","StoreDevtoolsModule","maxAge","mainApp","global","process","browser","versions","node","appIsPaused","BehaviorSubject","enableProdMode","ngRef","destroy","__NgCli_bootstrap_1","bootstrapModule","err","console"],"sources":["./src/app/configurations/contracts/contract-addresses-mainnet.enum.ts","./src/app/configurations/contracts/contract-addresses-testnet.enum.ts","./src/app/configurations/contracts/supported-currencies.enum.ts","./src/app/configurations/contracts/ens-contracts.model.ts","./src/app/configurations/contracts/block-explorers.enum.ts","./src/app/configurations/translations/en.conf.ts","./src/app/configurations/translations/de.conf.ts","./src/app/configurations/translations/cn.conf.ts","./src/app/configurations/translations/jp.conf.ts","./src/app/configurations/translations/es.conf.ts","./src/app/configurations/translations/ru.conf.ts","./src/app/configurations/translations/fr.conf.ts","./src/app/configurations/translation.conf.ts","./src/app/configurations/hammer-js.conf.ts","./src/app/configurations/general.conf.ts","./src/app/configurations/icons.ts","./src/app/configurations/image-to-preload.conf.ts","./src/app/configurations/private-pages.conf.ts","./src/app/models/ens/ens-events.enum.ts","./src/app/models/error-enums/user-store-errors.enum.ts","./src/app/models/service-providers.model.ts","./src/app/models/pay-no-market-address.model.ts","./src/app/models/router-paths.model.ts","./src/app/models/rpc/valid-rpc-providers.enum.ts","./src/app/models/states/pages-interfaces/pages.enum.ts","./src/app/models/states/payment-interfaces/payment-error-codes.enum.ts","./src/app/models/states/payment-interfaces/payment-types.enum.ts","./src/app/models/states/wallet-interfaces/nonce-types.enum.ts","./src/app/models/states/wallet-interfaces/wallet-types.enum.ts","./src/app/modules/miscs/icon.module.ts","./src/app/modules/miscs/custom-address-dialog.module.ts","./src/app/modules/miscs/generic-dialog.module.ts","./src/app/modules/miscs/onboard-dialog.module.ts","./src/app/modules/miscs/spinner-custom.module.ts","./src/app/modules/miscs/bulk-search.module.ts","./src/app/modules/miscs/blocky.module.ts","./src/app/modules/miscs/settings-dialog.module.ts","./src/app/modules/miscs/main-header.module.ts","./src/app/modules/miscs/translation.module.ts","./src/app/modules/pipes/format-time.pipe.ts","./src/app/modules/pipes/time-ago.pipe.ts","./src/app/modules/shared.module.ts","./src/app/services/bookmarks/bookmarks-service.service.ts","./src/app/services/currency/currency.service.ts","./src/app/configurations/contracts/chainlink-aggregator-v3.abi.ts","./src/app/services/currency/currency-exchange.service.ts","./src/app/services/download/download.service.ts","./src/app/services/ens/ens.service.ts","./src/app/services/form-validation/form-validation.service.ts","./src/app/services/path-resolve/path-resolve.service.ts","./src/app/services/trezor/trezor.service.ts","./src/app/services/icon-registry/icon-registry.service.ts","./src/app/services/store/payments/payment-effects.service.ts","./src/app/services/intercept/intercept.ts","./src/app/services/ledger/ledger.service.ts","./src/app/services/metamask/metamask.service.ts","./src/app/services/misc-utils/misc-utils.service.ts","./src/app/models/error-enums/payment-store-errors.enum.ts","./src/app/services/payment/payment-error.service.ts","./src/app/services/payment/payment-storage.service.ts","./src/app/services/payment/payment.service.ts","./src/app/configurations/contracts/ens-bulk-registration-mainnet.abi.ts","./src/app/configurations/contracts/ens-bulk-registration-testnet.abi.ts","./src/app/services/registration/registration-facility.service.ts","./src/app/configurations/contracts/ens-abi-testnet.model.ts","./src/app/configurations/contracts/ens-abi.model.ts","./src/app/configurations/contracts/ens-registrar-controller-abi-testnet.model.ts","./src/app/configurations/contracts/ens-registrar-controller-abi.model.ts","./src/app/services/registration/registration-data.service.ts","./src/app/services/registration/registration-service.service.ts","./src/app/services/translations/translation.pipe.ts","./src/app/services/translations/translation.service.ts","./src/app/services/user/user.service.ts","./src/app/services/user/user-session.service.ts","./src/app/services/wallet-connect/wallet-connect.service.ts","./src/app/services/wallet/wallet.service.ts","./src/app/store/actions/ens-bookmark.action.ts","./src/app/store/actions/ens-registration.action.ts","./src/app/store/actions/navigation-buttons.actions.ts","./src/app/store/actions/navigator.actions.ts","./src/app/store/actions/pages.actions.ts","./src/app/store/actions/payment.actions.ts","./src/app/store/actions/user.actions.ts","./src/app/store/facades/user.facades.ts","./src/app/store/facades/payment.facade.ts","./src/app/store/facades/ens-bookmark.facades.ts","./src/app/store/facades/ens-registration.facades.ts","./src/app/store/facades/navigator-buttons.facades.ts","./src/app/store/facades/navigator.facades.ts","./src/app/store/facades/pages.facades.ts","./src/app/store/reducers/navigator-buttons.reducers.ts","./src/app/store/reducers/navigator.reducers.ts","./src/app/models/ipfs/ipfs-states.enum.ts","./src/app/store/reducers/pages.reducers.ts","./src/app/store/reducers/user.reducers.ts","./src/app/store/reducers/payment.reducers.ts","./src/app/store/reducers/ens-registration.reducers.ts","./src/app/store/reducers/ens-bookmark.reducers.ts","./src/app/store/selectors/navigator-buttons.selectors.ts","./src/app/store/selectors/navigator.selectors.ts","./src/app/store/selectors/pages.selectors.ts","./src/app/store/selectors/user.selectors.ts","./src/app/store/selectors/payment.selectors.ts","./src/app/store/selectors/ens-registration.selectors.ts","./src/app/store/selectors/ens-bookmark.selectors.ts","./src/app/widgets/generic-dialog/generic-dialog.component.html","./src/app/widgets/generic-dialog/generic-dialog.component.ts","./src/app/widgets/icon/icon.component.ts","./src/app/widgets/icon/icon.component.html","./src/boot-control.ts","./src/environments/environment.prod.ts","./src/app/app-routing.module.ts","./src/app/models/states/pages-interfaces/network-status.enum.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/store/effects/navigator.effects.ts","./src/app/services/rpc/rpc.service.ts","./src/app/store/effects/pages.effects.ts","./src/app/store/effects/user.effects.ts","./src/app/store/effects/payment.effects.ts","./src/app/store/effects/ens-bookmark.effects.ts","./src/app/store/effects/ens-registration.effects.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { AcceptedCurrencyModel } from '../../models/currencies';\n\nexport enum ContractAddressesMainnetEnum {\n  ETH = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n  DAI = '0xf80A32A835F79D7787E8a8ee5721D0fEaFd78108',\n  USDT = '0xB404c51BBC10dcBE948077F18a4B8E553D160084',\n  WBTC = '0xa0E54Ab6AA5f0bf1D62EC3526436F3c05b3348A0',\n}\n\nexport const contractChainlinkMainnet =\n  '0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419';\nexport const bulkRegistrationMainnet =\n  '0xC55079A6AB7A123746806748d847228aFe1d2397';\n\nexport const acceptedCurrenciesMainnet = [] as AcceptedCurrencyModel[];\n","import { AcceptedCurrencyModel } from '../../models/currencies';\n\nexport enum ContractAddressesTestnetEnum {\n  ETH = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n  DAI = '0xFf795577d9AC8bD7D90Ee22b6C1703490b6512FD',\n  USDT = '0x13512979ADE267AB5100878E2e0f485B568328a4',\n  WBTC = '0x3b92f58feD223E2cB1bCe4c286BD97e42f2A12EA',\n}\n\nexport const contractChainlinkTestnet =\n  '0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e';\nexport const bulkRegistrationTestnet =\n  '0x6348E0369fE98ba2f01a183049348D7cfa263F0d';\n\nexport const acceptedCurrenciesTestnet = [\n  {\n    currency: 'ETH',\n    address: ContractAddressesTestnetEnum.ETH,\n    decimals: 18,\n    decimalRepresentation: '1000000000000000000',\n    highValueAsset: true,\n  },\n  {\n    currency: 'DAI',\n    address: ContractAddressesTestnetEnum.DAI,\n    decimals: 18,\n    decimalRepresentation: '1000000000000000000',\n    highValueAsset: false,\n  } as AcceptedCurrencyModel,\n  {\n    currency: 'USDT',\n    address: ContractAddressesTestnetEnum.USDT,\n    decimals: 6,\n    decimalRepresentation: '1000000',\n    highValueAsset: false,\n  } as AcceptedCurrencyModel,\n  {\n    currency: 'WBTC',\n    address: ContractAddressesTestnetEnum.WBTC,\n    decimals: 18,\n    decimalRepresentation: '1000000000000000000',\n    highValueAsset: true,\n  } as AcceptedCurrencyModel,\n] as AcceptedCurrencyModel[];\n","export enum SupportedCurrenciesEnum {\n  ETH = \"Ethereum\",\n  DAI = \"Dai Stablecoin\",\n  USDT = \"Tether USD\",\n  WBTC = \"Wrapped Bitcoin\",\n}\n","import { payNoMarketAddress } from 'src/app/models/pay-no-market-address.model';\n\nexport const ENSContracts = {\n  registrar: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  resolver: '0x42D63ae25990889E35F215bC95884039Ba354115',\n  registrarController: '0x283Af0B28c62C092C9727F1Ee09c02CA627EB7F5',\n  migrationContract: '0x6109DD117AA5486605FC85e040ab00163a75c662',\n  nullResolver: payNoMarketAddress,\n};\n","export enum BlockExplorersEnum {\n  homestead = 'https://etherscan.io/',\n  goerli = 'https://goerli.etherscan.io/',\n}\n","export default {\n  BUTTON: {\n    SAVE_CHANGES: 'Save Changes',\n    PROCEED: 'Proceed',\n    DISMISS: 'Dismiss',\n    CONNECT: 'Connect',\n    CONNECT_WALLET: 'Connect Wallet',\n    DISCONNECT: 'Disconnect',\n    LOGOUT: 'Logout',\n    CLOSE: 'Close',\n    SETTINGS: 'Settings',\n    LAUNCH_APP: 'Launch App',\n    CONNECT_TO_PROCEED: 'Connect Wallet',\n    VIEW_DETAILS: 'View Details',\n    REFRESH: 'Refresh',\n    START_REGISTRATION: 'Start Registration',\n    CANCEL: 'Cancel',\n    PRESS_ENTER: 'Press Enter',\n    LEARN_MORE: 'Learn More',\n    CLOSE_WINDOW: 'Close Window',\n    SHOW_AVAILABLE_ONLY: 'Show Available Only',\n    SHOW_AVAILABLE: 'Show Available',\n    PROCEED_SEARCH: 'Proceed Search',\n    DOWNLOAD: 'Download',\n    SHOW_ALL: 'Show All',\n    DESELECT_ALL: 'Deselect All',\n    SHOW_SELCTED: 'Show Selected',\n    LINK: 'Link',\n    CUSTOM_LINK: 'Custom Link',\n    SET_QR_LINK_ALL: 'Set QR Link All',\n    SET_QR_LINK: 'Set QR Link',\n    DISABLE_ALL: 'Disable All',\n    DISABLE_QR_CODE: 'Disable QR Code',\n    ENABLE_QR_CODE: 'Enable QR Code',\n    SET_QR_COLOR: 'Set QR Color',\n    SET_COLOR: 'Set Color',\n    SET_ALL_COLORS: 'Set All Colors',\n    SET_PRICE: 'Set Price',\n    SET_PRICE_ALL: 'Set Price All',\n    RESET: 'Reset',\n    CHECK_PROFILE: 'Check Profile',\n    GO_TO_DASHBOARD: 'Go to Dashboard',\n    GO_TO_HOME: 'Go To Home',\n    VIEW_PROFILE: 'View Profile',\n    CHECK_DOMAINS: 'Check Domains',\n    TRANSACTION_DETAILS: 'Transaction Details',\n    BUY_NOW: 'Buy Now',\n    CLEAR_HISTORY: 'Clear History',\n    DEFAULT: 'Default',\n    CUSTOM: 'Custom',\n    FRACTIONALISE: 'Fractionalise',\n  },\n  HEADER: {\n    FAQ: 'FAQs',\n    BACK_TO_HOME: 'Back to Home',\n    HELP_SUPPORT: 'Help & Support',\n    CANCEL_REGISTRATION: 'Cancel Registration',\n    PROFILE: 'Profile',\n    SETTINGS: 'Settings',\n    DOCS: 'Docs',\n    DOCUMENTATIONS: 'Documentations',\n    CART: 'Cart',\n    BOOKMARKS: 'Bookmarks',\n    PAYMENTS_HISTORY: 'Payments History',\n    LIGHT_MODE: 'Light Mode',\n    CUSTOM_RPC: 'Custom RPC',\n  },\n  IPFS: {\n    INITIALISING: 'Starting p2p',\n    FINDING_PEERS: 'Finding peers',\n    FAILED: 'Failed',\n    READY: 'Ready',\n    PUBLISHING: 'Publishing',\n  },\n  EVENTS: {\n    TRANSFER: 'Transfer',\n    REGISTRATION: 'Registration',\n    RENEWAL: 'Renewal',\n    SALE: 'Sale',\n    MINT: 'Mint',\n    BURN: 'Burn',\n  },\n  GENERIC: {\n    NETWORK_CHANGED_INCOMPATIBLE:\n      'Network is not supported. Please change your network.',\n    IPNS_PUBLISHING_COMPLETED: 'Publishing completed!',\n    PENDING_TRANSACTION_CERATED:\n      'A new transaction has been created. Please check your wallet.',\n  },\n  LABELS: {\n    PlEASE_WAIT: 'Please wait',\n    SELECT_A_DOMAIN: 'Select a Domain',\n    RENEW: 'Renew',\n    MANAGE_DOMAINS: 'Manage Domains',\n    SEARCH_FOR: 'Search For',\n    MANAGE: 'Manage',\n    COLLECT: 'Collect',\n    LANDING_TEXT:\n      'Open-source, decentralised, ENS domains search, registration & marketplace.',\n    PROFILE: 'Profile',\n    SEARCH: 'Search',\n    CONTAIN_ALPHABET: 'Contain Alphabet',\n    CONTAIN_NUMBERS: 'Contain Numbers',\n    CONTAIN_EMOJI: 'Contain Emoji',\n    MIN_LENGTH: 'Min. Length',\n    MAX_LENGTH: 'Max. Length',\n    CONTAINING_KEYWORDS: 'Containing Keywords',\n    FILTERS: 'Filters',\n    DOMAINS: 'Domains',\n    DOMAIN: 'Domain',\n    DOMAIN_HISTORY: 'Domain History',\n    EXPIRATION_DATE: 'Expiration Date',\n    REGISTRATION_DATE: 'Registration Date',\n    CREATION_DATE: 'Creation Date',\n    DETAILS: 'Details',\n    YOUR_DOMAINS: 'Your Domains',\n    PROCESSING: 'Processing',\n    LAYOUT: 'Layout',\n    ENTER_SUFFIX: 'Enter suffix',\n    ENTER_PREFIX: 'Enter prefix',\n    CLICK: 'Click',\n    CONNECT_TO_START: ' to get started or ',\n    TIP: 'Tip',\n    ACTION: 'Action',\n    ADVANCED_SEARCH_TIP:\n      'use new line or commas to seperate your domain entries.',\n    ADVANCED_SEARCH: 'Avanced Search',\n    ADVANCED_MODE: 'Advanced Mode',\n    REGISTER_DOMAINS_TO: 'Register Domains To',\n    NO_DOMAINS_SELECTED: 'No domains selected.',\n    FIND_AND_REGISTER: 'Find domains e.g. domain1, domain2...',\n    SELECTED_DOMAINS: 'Selected Domains',\n    REGISTER: 'Register',\n    BOOKMARKS: 'Bookmarks',\n    SEARCH_RESULTS: 'Search Results',\n    PROCEED_TO_REGISTRATION: 'Proceed To Registration',\n    REGISTER_DOMAINS: 'Register Domains',\n    REGISTRANT_ADDRESS: 'Registrant Address',\n    SET_RESOLVER: 'Set Resolver',\n    TOTAL_COST: 'Total Cost',\n    GAS_PRICE: 'Gas Price',\n    NO_ADDRESS_DETECTED: 'No address detected.',\n    DURATION: 'Duration',\n    NOTICE_SELECT_AN_RPC:\n      'Notice: select an RPC that will be used in the application to replace the default RPC provider.',\n    ENABLE_LIGHT_MODE: 'Enable light layout style.',\n  },\n  REGISTRATION: {\n    BEFORE_COMMIT: 'Step 1: request registration.',\n    COMMIT_SENT: 'Processing request...',\n    COMMIT_COMPLETE: 'Step 1: request registration received...',\n    AWAIT: 'Finalising request...',\n    BEFORE_REGISTRATION: 'Complete registration.',\n    REGISTRATION_SENT: 'Completing registration...',\n    REGISTRATION_COMPLETE: 'Registration complete!',\n    REGISTRATION_COMPLETE_TITLE: 'Registration Complete',\n    YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED:\n      'Your domains have now been registered.',\n    BASKET_EMPTY: 'Your basket is empty',\n    PLEASE_SELECT_DOMAINS_TO_REGISTER: 'Please select new domains to register.',\n  },\n  PAYMENT: {\n    PAYMENT_CANCELLED: 'Transaction cancelled. Please try again.',\n  },\n  SPINNER: {\n    NO_DATA_TO_DISPLAY: 'No items to display.',\n    PERFORMING_SEARCH: 'Performing search...',\n    LOADING_DATA: 'Loading Data...',\n    FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET:\n      'Please follow the instructions in your wallet to proceed.',\n  },\n  FORM_LABELS: {\n    ENTER_DURATION: 'Enter Duration',\n    ENTER_QR_LINK: 'Enter custom QR Code URL',\n    ENTER_PRICE: 'Enter price',\n    ENTER_CUSTOM_ADDRESS: 'Enter custom address',\n  },\n  FORM_ERRORS: {\n    INVALID_DURATION: 'Invalid Duration',\n    INVALID_QR_LINK: 'Invalid URL, please try again.',\n    INVALID_PRICE: 'Invalid price, please try again.',\n    NO_ADDRESS_DETECTED: 'No address detected, please try again.',\n  },\n};\n","export default {\n  BUTTON: {\n    SAVE_CHANGES: 'Änderungen speichern',\n    PROCEED: 'Fortfahren',\n    DISMISS: 'Verwerfen',\n    CONNECT: 'Verbinden',\n    CONNECT_WALLET: 'Wallet verbinden',\n    DISCONNECT: 'Verbindung trennen',\n    LOGOUT: 'Abmelden',\n    CLOSE: 'Schließen',\n    SETTINGS: 'Einstellungen',\n    LAUNCH_APP: 'App starten',\n    CONNECT_TO_PROCEED: 'Wallet verbinden',\n    VIEW_DETAILS: 'Details anzeigen',\n    REFRESH: 'Aktualisieren',\n    START_REGISTRATION: 'Registrierung starten',\n    CANCEL: 'Abbrechen',\n    PRESS_ENTER: 'Drücke Enter',\n    LEARN_MORE: 'Mehr erfahren',\n    CLOSE_WINDOW: 'Fenster schließen',\n    SHOW_AVAILABLE_ONLY: 'Nur verfügbare anzeigen',\n    SHOW_AVAILABLE: 'Nur verfügbare anzeigen',\n    PROCEED_SEARCH: 'Suche fortsetzen',\n    DOWNLOAD: 'Download',\n    SHOW_ALL: 'Alle anzeigen',\n    DESELECT_ALL: 'Alle abwählen',\n    SHOW_SELCTED: 'Ausgewählte anzeigen',\n    LINK: 'Link',\n    CUSTOM_LINK: 'Eigener Link',\n    SET_QR_LINK_ALL: 'QR-Link alle setzen',\n    SET_QR_LINK: 'QR-Link alle setzen',\n    DISABLE_ALL: 'Alle deaktivieren',\n    DISABLE_QR_CODE: 'QR-Code deaktivieren',\n    ENABLE_QR_CODE: 'QR-Code deaktivieren',\n    SET_QR_COLOR: 'QR-Farbe festlegen',\n    SET_COLOR: 'QR-Farbe festlegen',\n    SET_ALL_COLORS: 'QR-Farbe festlegen',\n    SET_PRICE: 'Preis festlegen',\n    SET_PRICE_ALL: 'Preis alle festlegen',\n    RESET: 'Reset',\n    CHECK_PROFILE: 'Profil prüfen',\n    GO_TO_DASHBOARD: 'Zum Dashboard gehen',\n    GO_TO_HOME: 'Gehe zu Home',\n    VIEW_PROFILE: 'Profil anzeigen',\n    CHECK_DOMAINS: 'Domänen überprüfen',\n    TRANSACTION_DETAILS: 'Transaktionsdetails',\n    BUY_NOW: 'Jetzt kaufen',\n    CLEAR_HISTORY: 'Verlauf löschen',\n    DEFAULT: 'Standard',\n    CUSTOM: 'Brauch',\n  },\n  HEADER: {\n    FAQ: 'FAQ',\n    BACK_TO_HOME: 'Zurück zur Startseite',\n    HELP_SUPPORT: 'Hilfe & Support',\n    CANCEL_REGISTRATION: 'Registrierung abbrechen',\n    PROFILE: 'Profil',\n    SETTINGS: 'Einstellungen',\n    DOCS: 'Texte',\n    DOCUMENTATIONS: 'Dokumentationen',\n    CART: 'Warenkorb',\n    BOOKMARKS: 'Lesezeichen',\n    CUSTOM_RPC: 'Benutzerdefinierter RPC',\n  },\n  IPFS: {\n    INITIALISING: 'Starte p2p',\n    FINDING_PEERS: 'Suche Partner',\n    FAILED: 'Fehler',\n    READY: 'Bereit',\n    PUBLISHING: 'Veröffentlichen',\n  },\n  EVENTS: {\n    TRANSFER: 'Überweisung',\n    REGISTRATION: 'Anmeldung',\n    RENEWAL: 'Erneuern',\n    SALE: 'Verkauf',\n    MINT: 'Minze',\n    BURN: 'Verbrennen',\n  },\n  GENERIC: {\n    NETWORK_CHANGED_INCOMPATIBLE:\n      'Netzwerk wird nicht unterstützt. Bitte Netzwerk wechseln.',\n    IPNS_PUBLISHING_COMPLETED: 'Veröffentlichung abgeschlossen!',\n    PENDING_TRANSACTION_CERATED:\n      'Eine neue Transaktion wurde erstellt. Bitte überprüfen Sie Ihre Wallet.',\n  },\n  LABELS: {\n    PlEASE_WAIT: 'Warten Sie mal',\n    SEARCH_FOR: 'Suchen nach',\n    MANAGE: 'Verwalten',\n    COLLECT: 'Sammeln',\n    LANDING_TEXT:\n      'Open-Source, dezentrale Suche, Registrierung und Marktplatz für ENS-Domains.',\n    PROFILE: 'Profil',\n    SEARCH: 'Suchen',\n    CONTAIN_ALPHABET: 'Enthält Alphabet',\n    CONTAIN_NUMBERS: 'Enthält Zahlen',\n    CONTAIN_EMOJI: 'Enthält Emoji',\n    MIN_LENGTH: 'Min. Länge',\n    MAX_LENGTH: 'Max. Länge',\n    CONTAINING_KEYWORDS: 'Enthält Stichwörter',\n    FILTERS: 'Filtern',\n    DOMAINS: 'Domains',\n    DOMAIN_HISTORY: 'Domänengeschichte',\n    EXPIRATION_DATE: 'Verfallsdatum',\n    REGISTRATION_DATE: 'Anmeldung',\n    CREATION_DATE: 'Erstellungsdatum',\n    DETAILS: 'Details',\n    YOUR_DOMAINS: 'Ihre Domains',\n    PROCESSING: 'Verarbeitung',\n    LAYOUT: 'Layout',\n    ENTER_SUFFIX: 'Suffix eingeben',\n    ENTER_PREFIX: 'Präfix eingeben',\n    CLICK: 'Click',\n    CONNECT_TO_START: ' loslegen oder ',\n    TIP: 'Tip',\n    ADVANCED_SEARCH_TIP:\n      'verwenden Sie neue Zeile oder Kommas um Ihre Domain-Einträge zu trennen.',\n    ADVANCED_SEARCH: 'Durchschnittliche Suche',\n    ADVANCED_MODE: 'Erweiterter Modus',\n    REGISTER_DOMAINS_TO: 'Domains registrieren zu',\n    NO_DOMAINS_SELECTED: 'Keine Domains ausgewählt.',\n    FIND_AND_REGISTER: 'Domänen finden z.B. domain1, domain2...',\n    SELECTED_DOMAINS: 'Ausgewählte Domains',\n    REGISTER: 'Registrieren',\n    BOOKMARKS: 'Lesezeichen',\n    SEARCH_RESULTS: 'Suchergebnisse',\n    PROCEED_TO_REGISTRATION: 'Zur Registrierung fortfahren',\n    REGISTER_DOMAINS: 'Domains registrieren zu',\n    REGISTRANT_ADDRESS: 'Adresse des Interessenten',\n    SET_RESOLVER: 'Auflöser setzen',\n    TOTAL_COST: 'Gesamtkosten',\n    GAS_PRICE: 'Gaspreis',\n    NO_ADDRESS_DETECTED: 'Keine Adresse erkannt.',\n    DURATION: 'Dauer',\n    NOTICE_SELECT_AN_RPC:\n      'Hinweis: Wählen Sie einen RPC aus, der in der Anwendung verwendet wird, um den Standard-RPC-Anbieter zu ersetzen.',\n    ENABLE_LIGHT_MODE: 'Aktivieren Sie den hellen Layoutstil.',\n  },\n  REGISTRATION: {\n    BEFORE_COMMIT: 'Schritt 1: Registrierung anfordern.',\n    COMMIT_SENT: 'Anfrage wird verarbeitet...',\n    COMMIT_COMPLETE: 'Schritt 1: Registrierung anfordern...',\n    AWAIT: 'Anfrage wird verarbeitet...',\n    BEFORE_REGISTRATION: 'Registrierung anfordern.',\n    REGISTRATION_SENT: 'Registrierung wird abgeschlossen...',\n    REGISTRATION_COMPLETE: 'Anmeldung!',\n    REGISTRATION_COMPLETE_TITLE: 'Anmeldung',\n    YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED:\n      'Ihre Domains wurden jetzt registriert.',\n    BASKET_EMPTY: 'Ihr Warenkorb ist leer',\n    PLEASE_SELECT_DOMAINS_TO_REGISTER:\n      'Bitte wählen Sie neue Domains zum Registrieren aus.',\n  },\n  PAYMENT: {\n    PAYMENT_CANCELLED:\n      'Transaktion abgebrochen. Bitte versuchen Sie es erneut.',\n  },\n  SPINNER: {\n    NO_DATA_TO_DISPLAY: 'Keine Elemente zum Anzeigen.',\n    PERFORMING_SEARCH: 'Suche wird durchgeführt...',\n    LOADING_DATA: 'Lade Daten...',\n    FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET:\n      'Bitte folgen Sie den Anweisungen in Ihrer Brieftasche um fortzufahren.',\n  },\n  FORM_LABELS: {\n    ENTER_DURATION: 'Dauer eingeben',\n    ENTER_QR_LINK: 'Eigene QR-Code URL eingeben',\n    ENTER_PRICE: 'Preis eingeben',\n    ENTER_CUSTOM_ADDRESS: 'Eigene Adresse eingeben',\n  },\n  FORM_ERRORS: {\n    INVALID_DURATION: 'Ungültige Dauer',\n    INVALID_QR_LINK: 'Ungültige URL, bitte versuchen Sie es erneut.',\n    INVALID_PRICE: 'Ungültiger Preis, bitte versuchen Sie es erneut.',\n    NO_ADDRESS_DETECTED:\n      'Keine Adresse erkannt, bitte versuchen Sie es erneut.',\n  },\n};\n","export default {\n  BUTTON: {\n    SAVE_CHANGES: '保存更改',\n    PROCEED: '继续',\n    DISMISS: '关闭',\n    CONNECT: '连接',\n    CONNECT_WALLET: '连接钱包',\n    DISCONNECT: '断开连接',\n    LOGOUT: '注销',\n    CLOSE: '关闭',\n    SETTINGS: '设置',\n    LAUNCH_APP: '启动应用程序',\n    CONNECT_TO_PROCEED: '连接钱包',\n    VIEW_DETAILS: '查看详情',\n    REFRESH: '刷新',\n    START_REGISTRATION: '开始注册',\n    CANCEL: '取消',\n    PRESS_ENTER: '按回车键',\n    LEARN_MORE: '了解更多',\n    CLOSE_WINDOW: '关闭窗口',\n    SHOW_AVAILABLE_ONLY: '仅显示可用的',\n    SHOW_AVAILABLE: '仅显示可用的',\n    PROCEED_SEARCH: '正在搜索',\n    DOWNLOAD: '下载',\n    SHOW_ALL: '显示全部',\n    DESELECT_ALL: '取消全选',\n    SHOW_SELCTED: '显示选中的',\n    LINK: '链接',\n    CUSTOM_LINK: '自定义链接',\n    SET_QR_LINK_ALL: '设置所有 QR 链接',\n    SET_QR_LINK: 'Set QR Link',\n    DISABLE_ALL: '禁用所有',\n    DISABLE_QR_CODE: '禁用二维码',\n    ENABLE_QR_CODE: '启用二维码',\n    SET_QR_COLOR: '设置 QR 颜色',\n    SET_COLOR: '设置颜色',\n    SET_ALL_COLORS: '设置 QR 颜色',\n    SET_PRICE: '设置价格',\n    SET_PRICE_ALL: '设置价格所有',\n    RESET: 'Reset',\n    CHECK_PROFILE: '检查个人资料',\n    GO_TO_DASHBOARD: '转到仪表板',\n    GO_TO_HOME: '返回首页',\n    VIEW_PROFILE: '查看个人资料',\n    CHECK_DOMAINS: '检查域',\n    TRANSACTION_DETAILS: '交易详情',\n    BUY_NOW: '立即购买',\n    CLEAR_HISTORY: '清除历史记录',\n    DEFAULT: '默认',\n    CUSTOM: '风俗',\n  },\n  HEADER: {\n    FAQ: '常见问题',\n    BACK_TO_HOME: '返回首页',\n    HELP_SUPPORT: '帮助与支持',\n    CANCEL_REGISTRATION: '取消注册',\n    PROFILE: '个人信息',\n    SETTINGS: '设置',\n    DOCS: '文档',\n    DOCUMENTATIONS: '文件',\n    CART: '购物车',\n    BOOKMARKS: '书签',\n    CUSTOM_RPC: '自定义 RPC',\n  },\n  IPFS: {\n    INITIALISING: '正在启动 p2p',\n    FINDING_PEERS: '查找节点',\n    FAILED: '失败',\n    READY: '准备好',\n    PUBLISHING: '发布',\n  },\n  EVENTS: {\n    TRANSFER: '转移',\n    REGISTRATION: '登记',\n    RENEWAL: '续费',\n    SALE: '销售',\n    MINT: '分钟数',\n    BURN: '刻录',\n  },\n  GENERIC: {\n    NETWORK_CHANGED_INCOMPATIBLE: '不支持网络。请更改您的网络。',\n    IPNS_PUBLISHING_COMPLETED: '发布已完成！',\n    PENDING_TRANSACTION_CERATED: '新交易已创建。请检查您的钱包。',\n  },\n  LABELS: {\n    PlEASE_WAIT: '请稍等',\n    SEARCH_FOR: '搜索',\n    MANAGE: '管理',\n    COLLECT: '搜集',\n    LANDING_TEXT: '开源、去中心化的 ENS 域名搜索、注册和市场',\n    PROFILE: '个人信息',\n    SEARCH: '搜索',\n    CONTAIN_ALPHABET: '包含字母表',\n    CONTAIN_NUMBERS: '包含数字',\n    CONTAIN_EMOJI: '包含表情',\n    MIN_LENGTH: '最小长度',\n    MAX_LENGTH: '最大长度',\n    CONTAINING_KEYWORDS: '包含关键字',\n    FILTERS: '筛选器',\n    DOMAINS: '域',\n    DOMAIN_HISTORY: '域名历史',\n    EXPIRATION_DATE: '过期日期',\n    REGISTRATION_DATE: '登记',\n    CREATION_DATE: '创建日期',\n    DETAILS: '详细信息',\n    YOUR_DOMAINS: '您的域',\n    PROCESSING: '处理中',\n    LAYOUT: '布局',\n    ENTER_SUFFIX: '输入后缀',\n    ENTER_PREFIX: '输入前缀',\n    CLICK: 'Click',\n    CONNECT_TO_START: ' 开始或 ',\n    TIP: 'Tip',\n    ADVANCED_SEARCH_TIP: '使用新行或逗号分隔你的域名。',\n    ADVANCED_SEARCH: '平均搜索',\n    ADVANCED_MODE: '高级模式',\n    REGISTER_DOMAINS_TO: '注册域名到',\n    NO_DOMAINS_SELECTED: '未选择域名。',\n    FIND_AND_REGISTER: '查找域，例如 domain1, domain2...',\n    SELECTED_DOMAINS: '选定域',\n    REGISTER: '注册',\n    BOOKMARKS: '书签',\n    SEARCH_RESULTS: '搜索结果',\n    PROCEED_TO_REGISTRATION: '继续注册',\n    REGISTER_DOMAINS: '注册域名到',\n    REGISTRANT_ADDRESS: '注册地址',\n    SET_RESOLVER: '设置解析器',\n    TOTAL_COST: '总成本',\n    GAS_PRICE: '煤气价格',\n    NO_ADDRESS_DETECTED: '未检测到地址。',\n    DURATION: '期限',\n    NOTICE_SELECT_AN_RPC:\n      '注意：选择一个将在应用程序中使用的 RPC 来替换默认的 RPC 提供程序。',\n    ENABLE_LIGHT_MODE: '启用灯光布局样式。',\n  },\n  REGISTRATION: {\n    BEFORE_COMMIT: '第 1 步：请求注册。',\n    COMMIT_SENT: '正在处理请求...',\n    COMMIT_COMPLETE: '第 1 步：请求注册。',\n    AWAIT: '正在处理请求...',\n    BEFORE_REGISTRATION: '请求注册。',\n    REGISTRATION_SENT: '正在完成注册...',\n    REGISTRATION_COMPLETE: '登记!',\n    REGISTRATION_COMPLETE_TITLE: '登记',\n    YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED: '您的域名已被注册。',\n    BASKET_EMPTY: '您的篮子是空的',\n    PLEASE_SELECT_DOMAINS_TO_REGISTER: '请选择要注册的新域名。',\n  },\n  PAYMENT: {\n    PAYMENT_CANCELLED: '交易已取消。请重试。',\n  },\n  SPINNER: {\n    NO_DATA_TO_DISPLAY: '没有要显示的项目。',\n    PERFORMING_SEARCH: '正在执行搜索...',\n    LOADING_DATA: '正在加载数据...',\n    FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET: '请按照你钱包中的说明继续操作。',\n  },\n  FORM_LABELS: {\n    ENTER_DURATION: '输入持续时间',\n    ENTER_QR_LINK: '输入自定义 QR 代码 URL',\n    ENTER_PRICE: '输入价格',\n    ENTER_CUSTOM_ADDRESS: '输入自定义地址',\n  },\n  FORM_ERRORS: {\n    INVALID_DURATION: '无效时长',\n    INVALID_QR_LINK: '无效的 URL，请重试。',\n    INVALID_PRICE: '价格无效，请重试。',\n    NO_ADDRESS_DETECTED: '未检测到地址，请重试。',\n  },\n};\n","export default {\n  BUTTON: {\n    SAVE_CHANGES: '変更を保存',\n    PROCEED: '続行する',\n    DISMISS: '却下する',\n    CONNECT: '接続する',\n    CONNECT_WALLET: 'ウォレットに接続',\n    DISCONNECT: '接続を解除',\n    LOGOUT: 'ログアウト',\n    CLOSE: '閉じる',\n    SETTINGS: '設定',\n    LAUNCH_APP: 'アプリを起動',\n    CONNECT_TO_PROCEED: 'ウォレットに接続',\n    VIEW_DETAILS: '詳細を表示',\n    REFRESH: '更新',\n    START_REGISTRATION: '登録を開始',\n    CANCEL: 'キャンセル',\n    PRESS_ENTER: 'Enter キーを押します',\n    LEARN_MORE: 'もっと詳しく',\n    CLOSE_WINDOW: 'ウィンドウを閉じる',\n    SHOW_AVAILABLE_ONLY: '利用可能なもののみ表示',\n    SHOW_AVAILABLE: '利用可能なもののみ表示',\n    PROCEED_SEARCH: '検索を続行する',\n    DOWNLOAD: 'ダウンロード',\n    SHOW_ALL: 'すべて表示',\n    DESELECT_ALL: 'すべての選択を解除',\n    SHOW_SELCTED: '選択したものを表示',\n    LINK: 'リンク',\n    CUSTOM_LINK: 'カスタムリンク',\n    SET_QR_LINK_ALL: 'QRリンクをすべて設定',\n    SET_QR_LINK: 'QRリンクをすべて設定',\n    DISABLE_ALL: 'すべて無効',\n    DISABLE_QR_CODE: 'QRコードを無効にする',\n    ENABLE_QR_CODE: 'QRコードを有効にする',\n    SET_QR_COLOR: 'QRコードの色を設定',\n    SET_COLOR: 'QRコードの色を設定',\n    SET_ALL_COLORS: 'QRコードの色を設定',\n    SET_PRICE: '価格の設定',\n    SET_PRICE_ALL: '価格を全て設定',\n    RESET: 'Reset',\n    CHECK_PROFILE: 'プロファイルを確認',\n    GO_TO_DASHBOARD: 'ダッシュボードに移動',\n    GO_TO_HOME: 'ホームへ移動',\n    VIEW_PROFILE: 'プロフィールを表示',\n    CHECK_DOMAINS: 'ドメインを確認',\n    TRANSACTION_DETAILS: 'トランザクションの詳細',\n    BUY_NOW: '今すぐ購入',\n    CLEAR_HISTORY: '履歴をクリア',\n    DEFAULT: 'デフォルト',\n    CUSTOM: 'カスタム',\n  },\n  HEADER: {\n    FAQ: 'よくある質問',\n    BACK_TO_HOME: 'ホームに戻る',\n    HELP_SUPPORT: 'ヘルプ & サポート',\n    CANCEL_REGISTRATION: '登録をキャンセル',\n    PROFILE: 'プロフィール',\n    SETTINGS: '設定',\n    DOCS: 'ドキュメント',\n    DOCUMENTATIONS: '文書',\n    CART: 'カート',\n    BOOKMARKS: 'ブックマーク',\n    CUSTOM_RPC: 'カスタム RPC',\n  },\n  IPFS: {\n    INITIALISING: 'p2pを開始',\n    FINDING_PEERS: 'ピアを検索中',\n    FAILED: '失敗しました',\n    READY: '準備完了',\n    PUBLISHING: '公開',\n  },\n  EVENTS: {\n    TRANSFER: '送金',\n    REGISTRATION: '登録',\n    RENEWAL: '更新',\n    SALE: '販売',\n    MINT: '造幣局',\n    BURN: '書き込み中',\n  },\n  GENERIC: {\n    NETWORK_CHANGED_INCOMPATIBLE:\n      'ネットワークはサポートされていません。ネットワークを変更してください。',\n    IPNS_PUBLISHING_COMPLETED: '公開完了！',\n    PENDING_TRANSACTION_CERATED:\n      '新しい取引が作成されました。ウォレットを確認してください。',\n  },\n  LABELS: {\n    PlEASE_WAIT: 'お待ちください',\n    SEARCH_FOR: '検索する',\n    MANAGE: '管理',\n    COLLECT: '収集',\n    LANDING_TEXT:\n      'オープンソース、分散型、ENS ドメインの検索、登録、および 市場。',\n    PROFILE: 'プロフィール',\n    SEARCH: '検索',\n    CONTAIN_ALPHABET: 'アルファベットが含まれています',\n    CONTAIN_NUMBERS: '数字が含まれています',\n    CONTAIN_EMOJI: '絵文字を含む',\n    MIN_LENGTH: '最小長さ',\n    MAX_LENGTH: '最大の長さ',\n    CONTAINING_KEYWORDS: 'キーワードを含む',\n    FILTERS: 'フィルタ',\n    DOMAINS: 'ドメイン',\n    DOMAIN_HISTORY: 'ドメイン履歴',\n    EXPIRATION_DATE: '有効期限日',\n    REGISTRATION_DATE: '登録',\n    CREATION_DATE: '作成日',\n    DETAILS: '詳細',\n    YOUR_DOMAINS: 'あなたのドメイン',\n    PROCESSING: '処理中',\n    LAYOUT: 'レイアウト',\n    ENTER_SUFFIX: 'サフィックスを入力',\n    ENTER_PREFIX: 'サフィックスを入力',\n    CLICK: 'Click',\n    CONNECT_TO_START: ' 始めるには ',\n    TIP: 'Tip',\n    ADVANCED_SEARCH_TIP:\n      '新しい行またはカンマを使用して、ドメインエントリを分離します。',\n    ADVANCED_SEARCH: '高度な検索',\n    ADVANCED_MODE: '詳細モード',\n    REGISTER_DOMAINS_TO: 'ドメインを登録先',\n    NO_DOMAINS_SELECTED: 'ドメインが選択されていません。',\n    FIND_AND_REGISTER: 'ドメインを検索します。例：domain1, domain2...',\n    SELECTED_DOMAINS: '選択したドメイン',\n    REGISTER: '登録',\n    BOOKMARKS: 'ブックマーク',\n    SEARCH_RESULTS: '検索結果',\n    PROCEED_TO_REGISTRATION: '登録に進む',\n    REGISTER_DOMAINS: 'ドメインを登録先',\n    REGISTRANT_ADDRESS: '登録者アドレス',\n    SET_RESOLVER: 'リゾルバーを設定',\n    TOTAL_COST: '合計コスト',\n    GAS_PRICE: 'ガス価格',\n    NO_ADDRESS_DETECTED: 'アドレスが見つかりません。',\n    DURATION: '期間',\n    NOTICE_SELECT_AN_RPC:\n      '注意: アプリケーションで使用される RPC を選択して、デフォルトの RPC プロバイダーを置き換えます。',\n    ENABLE_LIGHT_MODE: 'ライト レイアウト スタイルを有効にします。',\n  },\n  REGISTRATION: {\n    BEFORE_COMMIT: 'ステップ 1: リクエスト登録',\n    COMMIT_SENT: 'リクエストを処理しています...',\n    COMMIT_COMPLETE: 'ステップ 1: リクエスト登録',\n    AWAIT: 'リクエストを処理しています...',\n    BEFORE_REGISTRATION: 'リクエスト登録',\n    REGISTRATION_SENT: '登録を完了中...',\n    REGISTRATION_COMPLETE: '登録!',\n    REGISTRATION_COMPLETE_TITLE: '登録',\n    YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED: 'ドメインが登録されました。',\n    BASKET_EMPTY: 'カートが空です',\n    PLEASE_SELECT_DOMAINS_TO_REGISTER:\n      '登録する新しいドメインを選択してください。',\n  },\n  PAYMENT: {\n    PAYMENT_CANCELLED:\n      '取引がキャンセルされました。もう一度やり直してください。',\n  },\n  SPINNER: {\n    NO_DATA_TO_DISPLAY: '表示する項目がありません。',\n    PERFORMING_SEARCH: '検索を実行中...',\n    LOADING_DATA: 'データを読み込み中...',\n    FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET:\n      '続行するにはウォレットの指示に従ってください。',\n  },\n  FORM_LABELS: {\n    ENTER_DURATION: '期間を入力',\n    ENTER_QR_LINK: 'カスタム QR コードのURLを入力してください',\n    ENTER_PRICE: '価格を入力',\n    ENTER_CUSTOM_ADDRESS: 'カスタムアドレスを入力してください',\n  },\n  FORM_ERRORS: {\n    INVALID_DURATION: '無効な期間',\n    INVALID_QR_LINK: '無効な URL です。もう一度やり直してください。',\n    INVALID_PRICE: '無効な価格です。もう一度やり直してください。',\n    NO_ADDRESS_DETECTED:\n      'アドレスが見つかりませんでした。もう一度やり直してください。',\n  },\n};\n","export default {\n  BUTTON: {\n    SAVE_CHANGES: 'Guardar Cambios',\n    PROCEED: 'Continuar',\n    DISMISS: 'Descartar',\n    CONNECT: 'Conectar',\n    CONNECT_WALLET: 'Conectar cartera',\n    DISCONNECT: 'Desconectar',\n    LOGOUT: 'Cerrar sesión',\n    CLOSE: 'Cerrar',\n    SETTINGS: 'Ajustes',\n    LAUNCH_APP: 'Iniciar App',\n    CONNECT_TO_PROCEED: 'Conectar cartera',\n    VIEW_DETAILS: 'Ver detalles',\n    REFRESH: 'Refrescar',\n    START_REGISTRATION: 'Iniciar registro',\n    CANCEL: 'Cancelar',\n    PRESS_ENTER: 'Presione Entrar',\n    LEARN_MORE: 'Más información',\n    CLOSE_WINDOW: 'Cerrar ventana',\n    SHOW_AVAILABLE_ONLY: 'Mostrar sólo disponible',\n    SHOW_AVAILABLE: 'Mostrar sólo disponible',\n    PROCEED_SEARCH: 'Proceder búsqueda',\n    DOWNLOAD: 'Descargar',\n    SHOW_ALL: 'Mostrar todo',\n    DESELECT_ALL: 'Deseleccionar todo',\n    SHOW_SELCTED: 'Mostrar seleccionados',\n    LINK: 'Enlace',\n    CUSTOM_LINK: 'Enlace personalizado',\n    SET_QR_LINK_ALL: 'Establecer todos los enlaces QR',\n    SET_QR_LINK: 'Establecer todos los enlaces QR',\n    DISABLE_ALL: 'Desactivar todo',\n    DISABLE_QR_CODE: 'Desactivar código QR',\n    ENABLE_QR_CODE: 'Habilitar código QR',\n    SET_QR_COLOR: 'Establecer color QR',\n    SET_COLOR: 'Definir color',\n    SET_ALL_COLORS: 'Establecer todos los colores',\n    SET_PRICE: 'Fijar Precio',\n    SET_PRICE_ALL: 'Fijar precio todo',\n    RESET: 'Reset',\n    CHECK_PROFILE: 'Comprobar perfil',\n    GO_TO_DASHBOARD: 'Ir al Tablero',\n    GO_TO_HOME: 'Ir a Inicio',\n    VIEW_PROFILE: 'Ver perfil',\n    CHECK_DOMAINS: 'Comprobar dominios',\n    TRANSACTION_DETAILS: 'Detalles de la transacción',\n    BUY_NOW: 'Comprar ahora',\n    CLEAR_HISTORY: 'Borrar historial',\n    DEFAULT: 'Defecto',\n    CUSTOM: 'Disfraz',\n  },\n  HEADER: {\n    FAQ: 'FAQs',\n    BACK_TO_HOME: 'Volver a Inicio',\n    HELP_SUPPORT: 'Ayuda y soporte',\n    CANCEL_REGISTRATION: 'Cancelar Registro',\n    PROFILE: 'Perfil',\n    SETTINGS: 'Ajustes',\n    DOCS: 'Documentos',\n    DOCUMENTATIONS: 'Documentaciones',\n    CART: 'Carrito',\n    BOOKMARKS: 'Marcadores',\n    CUSTOM_RPC: 'RPC personalizado',\n  },\n  IPFS: {\n    INITIALISING: 'Iniciando p2p',\n    FINDING_PEERS: 'Encontrando pares',\n    FAILED: 'Fallo',\n    READY: 'Listo',\n    PUBLISHING: 'Publicación',\n  },\n  EVENTS: {\n    TRANSFER: 'Transferir',\n    REGISTRATION: 'Registro',\n    RENEWAL: 'Renovación',\n    SALE: 'Venta',\n    MINT: 'Moneda',\n    BURN: 'Quemar',\n  },\n  GENERIC: {\n    NETWORK_CHANGED_INCOMPATIBLE:\n      'La red no es compatible. Por favor, cambie su red.',\n    IPNS_PUBLISHING_COMPLETED: '¡Publicación completada!',\n    PENDING_TRANSACTION_CERATED:\n      'Se ha creado una nueva transacción. Por favor, comprueba tu cartera.',\n  },\n  LABELS: {\n    PlEASE_WAIT: 'Espere por favor',\n    SEARCH_FOR: 'Buscar',\n    MANAGE: 'Administrar',\n    COLLECT: 'Recoger',\n    LANDING_TEXT:\n      'Mercado, registro y búsqueda de dominios ENS descentralizados y de código abierto.',\n    PROFILE: 'Perfil',\n    SEARCH: 'Buscar',\n    CONTAIN_ALPHABET: 'Contiene el alfabeto',\n    CONTAIN_NUMBERS: 'Contiene números',\n    CONTAIN_EMOJI: 'Contiene Emoji',\n    MIN_LENGTH: 'Longitud Mínima',\n    MAX_LENGTH: 'Longitud Máxima',\n    CONTAINING_KEYWORDS: 'Conteniendo palabras clave',\n    FILTERS: 'Filtros',\n    DOMAINS: 'Dominios',\n    DOMAIN_HISTORY: 'Historial de dominios',\n    EXPIRATION_DATE: 'Fecha de caducidad',\n    REGISTRATION_DATE: 'Fecha de registro',\n    CREATION_DATE: 'Fecha de creación',\n    DETAILS: 'Detalles',\n    YOUR_DOMAINS: 'Tus dominios',\n    PROCESSING: 'Procesando',\n    LAYOUT: 'Diseño',\n    ENTER_SUFFIX: 'Introducir sufijo',\n    ENTER_PREFIX: 'Introduzca prefijo',\n    CLICK: 'Click',\n    CONNECT_TO_START: ' para empezar o ',\n    TIP: 'Tip',\n    ADVANCED_SEARCH_TIP:\n      'utilice una nueva línea o comas para separar sus entradas de dominio.',\n    ADVANCED_SEARCH: 'Búsqueda Avanzada',\n    ADVANCED_MODE: 'Modo avanzado',\n    REGISTER_DOMAINS_TO: 'Registrar Dominios a',\n    NO_DOMAINS_SELECTED: 'No hay dominios seleccionados.',\n    FIND_AND_REGISTER: 'Buscar dominios por ejemplo dominio1, dominio2...',\n    SELECTED_DOMAINS: 'Dominios seleccionados',\n    REGISTER: 'Registrarse',\n    BOOKMARKS: 'Marcadores',\n    SEARCH_RESULTS: 'Resultados de búsqueda',\n    PROCEED_TO_REGISTRATION: 'Continuar con el registro',\n    REGISTER_DOMAINS: 'Registrar Dominios a',\n    REGISTRANT_ADDRESS: 'Registrar dirección',\n    SET_RESOLVER: 'Definir Resolver',\n    TOTAL_COST: 'Coste total',\n    GAS_PRICE: 'Precio gas',\n    NO_ADDRESS_DETECTED: 'Ninguna dirección detectada.',\n    DURATION: 'Duración',\n    NOTICE_SELECT_AN_RPC:\n      'Aviso: seleccione un RPC que se utilizará en la aplicación para reemplazar el proveedor de RPC predeterminado.',\n    ENABLE_LIGHT_MODE: 'Habilite el estilo de diseño claro.',\n  },\n  REGISTRATION: {\n    BEFORE_COMMIT: 'Paso 1: solicitar registro.',\n    COMMIT_SENT: 'Procesando solicitud...',\n    COMMIT_COMPLETE: 'Paso 1: solicitar registro...',\n    AWAIT: 'Procesando solicitud...',\n    BEFORE_REGISTRATION: 'Solicitar registro.',\n    REGISTRATION_SENT: 'Completando registro...',\n    REGISTRATION_COMPLETE: 'Fecha de registro!',\n    REGISTRATION_COMPLETE_TITLE: 'Registro completado',\n    YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED: 'Tus dominios han sido registrados.',\n    BASKET_EMPTY: 'Tu cesta está vacía',\n    PLEASE_SELECT_DOMAINS_TO_REGISTER:\n      'Por favor, seleccione nuevos dominios para registrarse.',\n  },\n  PAYMENT: {\n    PAYMENT_CANCELLED: 'Transacción cancelada. Por favor, inténtelo de nuevo.',\n  },\n  SPINNER: {\n    NO_DATA_TO_DISPLAY: 'No hay elementos para mostrar.',\n    PERFORMING_SEARCH: 'Realizando búsqueda...',\n    LOADING_DATA: 'Cargando datos...',\n    FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET:\n      'Siga las instrucciones de su cartera para continuar.',\n  },\n  FORM_LABELS: {\n    ENTER_DURATION: 'Introducir duración',\n    ENTER_QR_LINK: 'Introduzca la URL personalizada del código QR',\n    ENTER_PRICE: 'Introducir precio',\n    ENTER_CUSTOM_ADDRESS: 'Introduzca dirección personalizada',\n  },\n  FORM_ERRORS: {\n    INVALID_DURATION: 'Duración no válida',\n    INVALID_QR_LINK: 'URL no válida, por favor inténtelo de nuevo.',\n    INVALID_PRICE: 'Precio no válido, por favor inténtalo de nuevo.',\n    NO_ADDRESS_DETECTED:\n      'No se ha detectado ninguna dirección, inténtelo de nuevo.',\n  },\n};\n","export default {\n  BUTTON: {\n    SAVE_CHANGES: 'Сохранить изменения',\n    PROCEED: 'Продолжить',\n    DISMISS: 'Отклонить',\n    CONNECT: 'Подключиться',\n    CONNECT_WALLET: 'Подключить кошелёк',\n    DISCONNECT: 'Отключиться',\n    LOGOUT: 'Выйти',\n    CLOSE: 'Закрыть',\n    SETTINGS: 'Настройки',\n    LAUNCH_APP: 'Запустить приложение',\n    CONNECT_TO_PROCEED: 'Подключить кошелёк',\n    VIEW_DETAILS: 'Подробности',\n    REFRESH: 'Обновить',\n    START_REGISTRATION: 'Начать регистрацию',\n    CANCEL: 'Отмена',\n    PRESS_ENTER: 'Нажмите Enter',\n    LEARN_MORE: 'Узнать больше',\n    CLOSE_WINDOW: 'Закрыть окно',\n    SHOW_AVAILABLE_ONLY: 'Показать только доступные',\n    SHOW_AVAILABLE: 'Показать доступные',\n    PROCEED_SEARCH: 'Продолжить поиск',\n    DOWNLOAD: 'Скачать',\n    SHOW_ALL: 'Показать все',\n    DESELECT_ALL: 'Отменить выбор',\n    SHOW_SELCTED: 'Показать выбранные',\n    LINK: 'Ссылка',\n    CUSTOM_LINK: 'Пользовательская ссылка',\n    SET_QR_LINK_ALL: 'Установить QR ссылку на все',\n    SET_QR_LINK: 'Установить QR ссылку',\n    DISABLE_ALL: 'Отключить все',\n    DISABLE_QR_CODE: 'Отключить QR-код',\n    ENABLE_QR_CODE: 'Включить QR-код',\n    SET_QR_COLOR: 'Установить цвет QR-кода',\n    SET_COLOR: 'Выбрать цвет',\n    SET_ALL_COLORS: 'Установить цвет для всего',\n    SET_PRICE: 'Установить цену',\n    SET_PRICE_ALL: 'Установить цену для всего',\n    RESET: 'Сбросить',\n    CHECK_PROFILE: 'Перейти в профиль',\n    GO_TO_DASHBOARD: 'Перейти к панели управления',\n    GO_TO_HOME: 'Перейти на главную',\n    VIEW_PROFILE: 'Просмотр профиля',\n    CHECK_DOMAINS: 'Просмотр доменов',\n    TRANSACTION_DETAILS: 'Подробности транзакции',\n    BUY_NOW: 'Купить сейчас',\n    CLEAR_HISTORY: 'Очистить историю',\n    DEFAULT: 'По умолчанию',\n    CUSTOM: 'Пользовательский',\n  },\n  HEADER: {\n    FAQ: 'ЧАВО',\n    BACK_TO_HOME: 'Назад на главную',\n    HELP_SUPPORT: 'Помощь и поддержка',\n    CANCEL_REGISTRATION: 'Отменить регистрацию',\n    PROFILE: 'Профиль',\n    SETTINGS: 'Настройки',\n    DOCS: 'Документация',\n    DOCUMENTATIONS: 'Документация',\n    CART: 'Корзина',\n    BOOKMARKS: 'Закладки',\n    CUSTOM_RPC: 'Пользовательский RPC',\n  },\n  IPFS: {\n    INITIALISING: 'Запуск p2p',\n    FINDING_PEERS: 'Поиск пиров',\n    FAILED: 'Неудача',\n    READY: 'Успех',\n    PUBLISHING: 'Публикация',\n  },\n  EVENTS: {\n    TRANSFER: 'Перевод',\n    REGISTRATION: 'Регистрация',\n    RENEWAL: 'Продление',\n    SALE: 'Продажа',\n    MINT: 'Чеканка',\n    BURN: 'Сжигание',\n  },\n  GENERIC: {\n    NETWORK_CHANGED_INCOMPATIBLE:\n      'Сеть не поддерживается. Пожалуйста, смените сеть.',\n    IPNS_PUBLISHING_COMPLETED: 'Публикация завершена!',\n    PENDING_TRANSACTION_CERATED:\n      'Была создана новая транзакция. Пожалуйста, проверьте ваш кошелек.',\n  },\n  LABELS: {\n    PlEASE_WAIT: 'Пожалуйста подождите',\n    SEARCH_FOR: 'искать',\n    MANAGE: 'управлять',\n    COLLECT: 'собирать',\n    LANDING_TEXT:\n      'Открытый децентрализованный поиск ENS доменов, регистрация и торговая площадка.',\n    PROFILE: 'Профиль',\n    SEARCH: 'Искать',\n    CONTAIN_ALPHABET: 'Содержащие буквы',\n    CONTAIN_NUMBERS: 'Содержащие цифры',\n    CONTAIN_EMOJI: 'Содержит эмодзи',\n    MIN_LENGTH: 'Мин. длина',\n    MAX_LENGTH: 'Макс. длина',\n    CONTAINING_KEYWORDS: 'Содержащие ключевые слова',\n    FILTERS: 'Фильтры',\n    DOMAINS: 'Домены',\n    DOMAIN_HISTORY: 'История доменов',\n    EXPIRATION_DATE: 'Дата истечения',\n    REGISTRATION_DATE: 'Регистрация',\n    CREATION_DATE: 'Дата создания',\n    DETAILS: 'Подробности',\n    YOUR_DOMAINS: 'Ваши домены',\n    PROCESSING: 'Обработка',\n    LAYOUT: 'Макет',\n    ENTER_SUFFIX: 'Введите постфикс',\n    ENTER_PREFIX: 'Укажите приставку',\n    CLICK: 'Нажать',\n    CONNECT_TO_START: ' чтобы начать или ',\n    TIP: 'Совет',\n    ADVANCED_SEARCH_TIP:\n      'используйте новую строку или запятую для разделения ваших доменов.',\n    ADVANCED_SEARCH: 'Расширенный поиск',\n    ADVANCED_MODE: 'Расширенный режим',\n    REGISTER_DOMAINS_TO: 'Регистрация доменов для',\n    NO_DOMAINS_SELECTED: 'Домены не выбраны.',\n    FIND_AND_REGISTER: 'Поиск доменов, например домен1, домен2...',\n    SELECTED_DOMAINS: 'Выбранные домены',\n    REGISTER: 'Зарегистрировать',\n    BOOKMARKS: 'Закладки',\n    SEARCH_RESULTS: 'Результаты поиска',\n    PROCEED_TO_REGISTRATION: 'Перейти к регистрации',\n    REGISTER_DOMAINS: 'Регистрация доменов для',\n    REGISTRANT_ADDRESS: 'Регистрационный адрес',\n    SET_RESOLVER: 'Установить резолвер',\n    TOTAL_COST: 'Общая стоимость',\n    GAS_PRICE: 'Цена газа',\n    NO_ADDRESS_DETECTED: 'Адрес не обнаружен.',\n    DURATION: 'Продолжительность регистрации',\n    NOTICE_SELECT_AN_RPC:\n      'Примечание: выберите RPC, который будет использоваться в приложении для замены RPC по умолчанию.',\n    ENABLE_LIGHT_MODE: 'Включить светлую тему.',\n  },\n  REGISTRATION: {\n    BEFORE_COMMIT: 'Шаг 1: запрос на регистрацию.',\n    COMMIT_SENT: 'Обработка запроса...',\n    COMMIT_COMPLETE: 'Шаг 1: запрос на регистрацию...',\n    AWAIT: 'Обработка запроса...',\n    BEFORE_REGISTRATION: 'запрос на регистрацию.',\n    REGISTRATION_SENT: 'Завершение регистрации...',\n    REGISTRATION_COMPLETE: 'Регистрация!',\n    REGISTRATION_COMPLETE_TITLE: 'Регистрация завершена',\n    YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED: 'Ваши домены зарегистрированы.',\n    BASKET_EMPTY: 'Ваша корзина пуста',\n    PLEASE_SELECT_DOMAINS_TO_REGISTER:\n      'Пожалуйста, выберите новые домены для регистрации.',\n  },\n  PAYMENT: {\n    PAYMENT_CANCELLED: 'Транзакция отменена. Пожалуйста, попробуйте еще раз.',\n  },\n  SPINNER: {\n    NO_DATA_TO_DISPLAY: 'Нет элементов для отображения.',\n    PERFORMING_SEARCH: 'Выполняется поиск...',\n    LOADING_DATA: 'Загрузка данных...',\n    FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET:\n      'Чтобы продолжить, следуйте инструкциям в вашем кошельке.',\n  },\n  FORM_LABELS: {\n    ENTER_DURATION: 'Введите длительность',\n    ENTER_QR_LINK: 'Введите ссылку на свой QR-код',\n    ENTER_PRICE: 'Введите цену',\n    ENTER_CUSTOM_ADDRESS: 'Введите свой адрес',\n  },\n  FORM_ERRORS: {\n    INVALID_DURATION: 'Неверная длительность',\n    INVALID_QR_LINK: 'Неправильный URL, попробуйте еще раз.',\n    INVALID_PRICE: 'Неправильная цена, попробуйте еще раз.',\n    NO_ADDRESS_DETECTED: 'Адрес не обнаружен, попробуйте еще раз.',\n  },\n};\n","export default {\n  BUTTON: {\n    SAVE_CHANGES: 'Enregistrer les modifications',\n    PROCEED: 'Procéder',\n    DISMISS: 'Refuser',\n    CONNECT: 'Connecter',\n    CONNECT_WALLET: 'Connecter le portefeuille',\n    DISCONNECT: 'Déconnecter',\n    LOGOUT: 'Déconnexion',\n    CLOSE: 'Fermer',\n    SETTINGS: 'Réglages',\n    LAUNCH_APP: \"Lancer l'application\",\n    CONNECT_TO_PROCEED: 'Connecter le portefeuille',\n    VIEW_DETAILS: 'Voir les détails',\n    REFRESH: 'Rafraîchir',\n    START_REGISTRATION: \"Commencer l'inscription\",\n    CANCEL: 'Abandonner',\n    PRESS_ENTER: 'Appuyez sur Entrée',\n    LEARN_MORE: 'En savoir plus',\n    CLOSE_WINDOW: 'Fermer la fenêtre',\n    SHOW_AVAILABLE_ONLY: 'Afficher uniquement les disponibilités',\n    SHOW_AVAILABLE: 'Afficher uniquement les disponibilités',\n    PROCEED_SEARCH: 'Poursuivre la recherche',\n    DOWNLOAD: 'Télécharger',\n    SHOW_ALL: 'Tout afficher',\n    DESELECT_ALL: 'Désélectionner tout',\n    SHOW_SELCTED: 'Afficher la sélection',\n    LINK: 'Lier',\n    CUSTOM_LINK: 'Lien personnalisé',\n    SET_QR_LINK_ALL: 'Définir le lien QR',\n    SET_QR_LINK: 'Définir le lien QR',\n    DISABLE_ALL: 'Désactiver tout',\n    DISABLE_QR_CODE: 'Désactiver le QR Code',\n    ENABLE_QR_CODE: 'Désactiver le QR Code',\n    SET_QR_COLOR: 'Définir la couleur du QR',\n    SET_COLOR: 'Définir la couleur du QR',\n    SET_ALL_COLORS: 'Définir la couleur du QR',\n    SET_PRICE: 'Fixer le prix',\n    SET_PRICE_ALL: 'Fixer le prix à tous',\n    RESET: 'Reset',\n    CHECK_PROFILE: 'Vérifier le profil',\n    GO_TO_DASHBOARD: 'Aller au tableau de bord',\n    GO_TO_HOME: \"Aller à la page d'accueil\",\n    VIEW_PROFILE: 'Voir le profil',\n    CHECK_DOMAINS: 'Vérifier les domaines',\n    TRANSACTION_DETAILS: 'Détails de la transaction',\n    BUY_NOW: 'Acheter maintenant',\n    CLEAR_HISTORY: 'Histoire claire',\n    DEFAULT: 'Défaut',\n    CUSTOM: 'Personnalisé',\n  },\n  HEADER: {\n    FAQ: 'Foire aux questions',\n    BACK_TO_HOME: \"Retour à la page d'accueil\",\n    HELP_SUPPORT: 'Aide & Support',\n    CANCEL_REGISTRATION: \"Annuler l'inscription\",\n    PROFILE: 'Profil',\n    SETTINGS: 'Réglages',\n    DOCS: 'Documents',\n    DOCUMENTATIONS: 'Documentations',\n    CART: 'Panier',\n    BOOKMARKS: 'Signets',\n    CUSTOM_RPC: 'RPC personnalisé',\n  },\n  IPFS: {\n    INITIALISING: 'Démarrage p2p',\n    FINDING_PEERS: 'Recherche de pairs',\n    FAILED: 'Echoué',\n    READY: 'Prêt',\n    PUBLISHING: 'Publication en cours',\n  },\n  EVENTS: {\n    TRANSFER: 'Transférer',\n    REGISTRATION: 'Inscription',\n    RENEWAL: 'Renouvellement',\n    SALE: 'Vente',\n    MINT: 'Médicaments',\n    BURN: 'Brûlure',\n  },\n  GENERIC: {\n    NETWORK_CHANGED_INCOMPATIBLE:\n      \"Le réseau n'est pas pris en charge. Veuillez modifier votre réseau.\",\n    IPNS_PUBLISHING_COMPLETED: 'Publication terminée !',\n    PENDING_TRANSACTION_CERATED:\n      'Une nouvelle transaction a été créée. Veuillez vérifier votre portefeuille.',\n  },\n  LABELS: {\n    PlEASE_WAIT: \"S'il vous plaît, attendez\",\n    SEARCH_FOR: 'Rechercher',\n    MANAGE: 'Faire en sorte',\n    COLLECT: 'Recueillir',\n    LANDING_TEXT:\n      'Recherche, enregistrement et marché de domaines ENS open source et décentralisés.',\n    PROFILE: 'Profil',\n    SEARCH: 'Chercher',\n    CONTAIN_ALPHABET: \"Contient l'alphabet\",\n    CONTAIN_NUMBERS: 'Contient des nombres',\n    CONTAIN_EMOJI: 'Contient des émoticônes',\n    MIN_LENGTH: 'Longueur min.',\n    MAX_LENGTH: 'Longueur Max.',\n    CONTAINING_KEYWORDS: 'Contenant des mots-clés',\n    FILTERS: 'Filtres',\n    DOMAINS: 'Domaines',\n    DOMAIN_HISTORY: 'Historique du domaine',\n    EXPIRATION_DATE: \"Date d'expiration\",\n    REGISTRATION_DATE: 'Inscription',\n    CREATION_DATE: 'Date de Création',\n    DETAILS: 'Détail',\n    YOUR_DOMAINS: 'Vos domaines',\n    PROCESSING: 'En cours de traitement',\n    LAYOUT: 'Disposition',\n    ENTER_SUFFIX: 'Saisir le suffixe',\n    ENTER_PREFIX: 'Entrez le préfixe',\n    CLICK: 'Click',\n    CONNECT_TO_START: ' pour commencer ou ',\n    TIP: 'Tip',\n    ADVANCED_SEARCH_TIP:\n      'utilisez une nouvelle ligne ou une nouvelle virgule pour séparer vos entrées de domaine.',\n    ADVANCED_SEARCH: 'Recherche Avancée',\n    ADVANCED_MODE: 'Mode Avancé',\n    REGISTER_DOMAINS_TO: 'Enregistrer les domaines à',\n    NO_DOMAINS_SELECTED: 'Aucun domaine sélectionné.',\n    FIND_AND_REGISTER: 'Trouver des domaines par exemple domaine1, domaine2...',\n    SELECTED_DOMAINS: 'Domaines sélectionnés',\n    REGISTER: 'Inscription',\n    BOOKMARKS: 'Signets',\n    SEARCH_RESULTS: 'Résultats de recherche',\n    PROCEED_TO_REGISTRATION: \"Procéder à l'inscription\",\n    REGISTER_DOMAINS: 'Enregistrer les domaines à',\n    REGISTRANT_ADDRESS: \"Adresse de l'inscrit\",\n    SET_RESOLVER: 'Définir le résolveur',\n    TOTAL_COST: 'Coût total',\n    GAS_PRICE: 'Prix du gaz',\n    NO_ADDRESS_DETECTED: 'Aucune adresse détectée.',\n    DURATION: 'Durée',\n    NOTICE_SELECT_AN_RPC:\n      \"Remarque : sélectionnez un RPC qui sera utilisé dans l'application pour remplacer le fournisseur RPC par défaut.\",\n    ENABLE_LIGHT_MODE: 'Activer le style de mise en page clair.',\n  },\n  REGISTRATION: {\n    BEFORE_COMMIT: \"Étape 1 : demande d'inscription.\",\n    COMMIT_SENT: 'Traitement de la requête...',\n    COMMIT_COMPLETE: \"Étape 1 : demande d'inscription...\",\n    AWAIT: 'Traitement de la requête...',\n    BEFORE_REGISTRATION: \"Demande d'inscription.\",\n    REGISTRATION_SENT: \"Fin de l'inscription...\",\n    REGISTRATION_COMPLETE: 'Inscription!',\n    REGISTRATION_COMPLETE_TITLE: 'Inscription',\n    YOUR_DOMAINS_HAVE_NOW_BEEN_REGISTERED: 'Vos domaines ont été enregistrés.',\n    BASKET_EMPTY: 'Votre panier est vide',\n    PLEASE_SELECT_DOMAINS_TO_REGISTER:\n      'Veuillez sélectionner de nouveaux domaines à enregistrer.',\n  },\n  PAYMENT: {\n    PAYMENT_CANCELLED: 'Transaction annulée. Veuillez réessayer.',\n  },\n  SPINNER: {\n    NO_DATA_TO_DISPLAY: 'Aucun élément à afficher.',\n    PERFORMING_SEARCH: 'Recherche en cours...',\n    LOADING_DATA: 'Chargement des données...',\n    FOLLOW_THE_INSTRUCTIONS_ON_YOUR_WALLET:\n      'Veuillez suivre les instructions de votre portefeuille pour continuer.',\n  },\n  FORM_LABELS: {\n    ENTER_DURATION: 'Entrez la durée',\n    ENTER_QR_LINK: \"Entrez l'URL du QR Code personnalisé\",\n    ENTER_PRICE: 'Entrez le prix',\n    ENTER_CUSTOM_ADDRESS: 'Entrez une adresse personnalisée',\n  },\n  FORM_ERRORS: {\n    INVALID_DURATION: 'Durée non valide',\n    INVALID_QR_LINK: 'URL invalide, veuillez réessayer.',\n    INVALID_PRICE: 'URL invalide, veuillez réessayer.',\n    NO_ADDRESS_DETECTED: 'Aucune adresse détectée, veuillez réessayer.',\n  },\n};\n","import * as EN from './translations/en.conf';\nimport * as DE from './translations/de.conf';\nimport * as CN from './translations/cn.conf';\nimport * as JP from './translations/jp.conf';\nimport * as ES from './translations/es.conf';\nimport * as RU from './translations/ru.conf';\nimport * as FR from './translations/fr.conf';\n\nexport const validTranslations = {\n  en: EN,\n  de: DE,\n  es: ES,\n  fr: FR,\n  ru: RU,\n  jp: JP,\n  cn: CN,\n};\n","import { HammerGestureConfig } from '@angular/platform-browser';\nimport { Injectable } from \"@angular/core\";\n\n@Injectable()\nexport class HammerJsConf extends HammerGestureConfig {\n\toverrides = {\n\t\tswipe: { velocity: 0.3, threshold: 10 },\n\t} as any;\n}\n","import { PagesEnum } from '../models/states/pages-interfaces';\n\nexport const generalConfigurations = {\n  version: '0.1.0',\n  defaultLanguage: 'en',\n  defaultPage: PagesEnum.HOME,\n  maximumDecimalInPrices: 8,\n  maxAttemptsToCheckoutData: 3,\n  sessionTimeout: 6000 * 15,\n  maxRPCCallRetries: 3,\n  timeUntilImageLoadErrors: 3000,\n  timeToUpdateEthUSDRate: 5000,\n  timeToUpdateCheckoutPipe: 3000,\n  timeToUpdateRegistrationGasPrice: 5000,\n  timeUntilCheckoutExpires: 3000,\n  maxConfirmationsUntilTxFinal: 1,\n  declarePaymentStatusUnkownUntilXFailedDataFetches: 5,\n  gasLimitBuffer: 50000,\n  maxCheckoutRetryUntilRehydrateProcessId: 5,\n  maxIpfsSubscriptionRetries: 5,\n  maxDomainsToRegister: 50,\n  maxYearsRegistration: 1000,\n  maxTotalCostBuffer: 115,\n  defaultCurrency: 'ETH',\n  enableCustomRPC: true,\n  docsLink: 'https://predomain.gitbook.io/predomain-docs/',\n  blockscanLink: 'https://chat.blockscan.com/index?a=',\n  trezorManifest: {\n    email: 'predomain@skiff.com',\n    appUrl: 'https://predomain.eth.limo',\n  },\n  appMeta: {\n    description: 'Decentralised ENS Search, Registration, & Marketplace',\n    url: 'https://predomain.eth.limo',\n    icons: ['https://ecanvas.eth.limo/assets/logo.png'],\n    name: 'Predomain.eth',\n  },\n  wallectConnectSupportedWallets: [\n    'rainbow',\n    'metamask',\n    'argent',\n    'trust',\n    'trezor',\n    'imtoken',\n    'pillar',\n    'coinbase',\n  ],\n};\n","export const icons = {\n  check: 'assets/icons/check.apng',\n  confetti: 'assets/icons/confetti.apng',\n  cart_empty: 'assets/icons/cart_empty.apng',\n  llayers: 'assets/icons/llayers.apng',\n  spin: 'assets/icons/spin.apng',\n};\n\nexport const infiniteLoopedIcons = ['spin', 'confetti'];\n","export const imageToPreload = [\n  'icn-ledger.svg',\n  'icn-metamask.svg',\n  'trezor-logo.png',\n  'metamask-connect-in-progress.png',\n  'metamask-sign-in-progress.png',\n  'trezor-connect-in-progress.png',\n  'trezor-sign-in-progress.png',\n  'ledger-connect-in-progress.png',\n  'ledger-sign-in-progress.png',\n];\n","import { PagesEnum } from '../models/states/pages-interfaces';\n\n/**\n * Define pages that are not accessible without a wallet connected.\n */\nexport const privatePages = [\n  PagesEnum.CANVAS,\n  PagesEnum.CHECKOUT,\n  PagesEnum.MANAGE,\n];\n","export enum EnsEventsEnum {\n  TRANSFER = 'EVENTS.TRANSFER',\n  REGISTRATION = 'EVENTS.REGISTRATION',\n  RENEWAL = 'EVENTS.RENEWAL',\n  SALE = 'EVENTS.SALE',\n  MINT = 'EVENTS.MINT',\n  BURN = 'EVENTS.BURN',\n}\n\nexport enum EnsEvensSymbolEnum {\n  'EVENTS.TRANSFER' = 'sync_alt',\n  'EVENTS.REGISTRATION' = 'sync_alt',\n  'EVENTS.RENEWAL' = 'update',\n  'EVENTS.SALE' = 'shopping_cart',\n  'EVENTS.MINT' = 'magic_button',\n  'EVENTS.BURN' = 'local_fire_department',\n}\n","export enum UserStoreErrorsEnum {\n  UNKNOWN = \"UNKNOWN_USER\",\n  CONNECT_ERROR = \"CONNECT_ERROR\",\n  EMAIL_INVALID = \"EMAIL_INVALID\",\n  COMPANY_NAME_INVALID = \"COMPANY_NAME_INVALID\",\n  COMPANY_ADDRESS_INVALID = \"COMPANY_ADDRESS_INVALID\",\n  SELECTED_CURRENCIES_INVALID = \"SELECTED_CURRENCIES_INVALID\",\n  WALLET_ADDRESS_INVALID = \"WALLET_ADDRESS_INVALID\",\n  ACCOUNT_EXISTS = \"ACCOUNT_EXISTS\",\n  USER_NO_NETWORK_CONNECTION = \"USER_NO_NETWORK_CONNECTION\",\n  CANNOT_FIND_WALLET_ADDRESS_TO_RECOVER = \"CANNOT_FIND_WALLET_ADDRESS_TO_RECOVER\",\n  DEVICE_VERIFICATION_FAILED = \"DEVICE_VERIFICATION_FAILED\",\n  REGISTRATION_EXPIRED = \"REGISTRATION_EXPIRED\",\n  REGISTER_CAPTCHA_INVALID = \"REGISTER_CAPTCHA_INVALID\",\n  EMAIL_VERIFICATION_FAILED = \"EMAIL_VERIFICATION_FAILED\",\n}\n","import { HttpClient } from '@angular/common/http';\nimport { FormatTimePipe, TimeAgoPipe } from '../modules/pipes';\nimport {\n  FormValidationService,\n  MiscUtilsService,\n  PaymentStorageService,\n  TranslationService,\n  UserService,\n  UserSessionService,\n} from '../services';\nimport { BookmarksServiceService } from '../services/bookmarks';\nimport { EnsService } from '../services/ens';\nimport { WalletConnectService } from '../services/wallet-connect';\nimport {\n  RegistrationDataService,\n  RegistrationServiceService,\n} from '../services/registration';\nimport {\n  NavigatorButtonsFacadeService,\n  NavigatorFacadeService,\n  PagesFacadeService,\n  UserFacadeService,\n} from '../store/facades';\nimport { DownloadService } from '../services/download/download.service';\n\nexport const serviceProviders = [\n  UserService,\n  UserSessionService,\n  UserFacadeService,\n  PagesFacadeService,\n  NavigatorFacadeService,\n  NavigatorButtonsFacadeService,\n  FormValidationService,\n  MiscUtilsService,\n  TranslationService,\n  FormatTimePipe,\n  TimeAgoPipe,\n  HttpClient,\n  EnsService,\n  RegistrationDataService,\n  BookmarksServiceService,\n  RegistrationServiceService,\n  PaymentStorageService,\n  WalletConnectService,\n  DownloadService,\n];\n","export const payNoMarketAddress = '0x0000000000000000000000000000000000000000';\n","export const routerPaths = {\n  canvas: 'canvas',\n  bootstrap: 'bootstrap',\n  home: 'home',\n  checkout: 'checkout',\n  notfound: 'notfound',\n  profile: 'profile',\n  domain: 'domain',\n  manage: 'manage',\n};\n","export enum ValidRPCProvidersEnum {\n  DEFAULT,\n  CUSTOM,\n  INFURA,\n  ALCHEMY,\n}\n","export enum PagesEnum {\n  BOOTSTRAP = 'BOOTSTRAP',\n  HOME = 'HOME',\n  CANVAS = 'CANVAS',\n  CHECKOUT = 'CHECKOUT',\n  ERROR = 'ERROR',\n  SUCCESS = 'SUCCESS',\n  PROFILE = 'PROFILE',\n  DOMAIN = 'DOMAIN',\n  NOTFOUND = 'NOTFOUND',\n  MANAGE = 'manage',\n}\n","export enum PaymentErrorCodes {\n  NONE,\n  PAYMENT_EXPIRED,\n  TOKEN_NOT_SUPPORTED,\n  INSUFFICIENT_FUNDS,\n  SIGNATURE_INVALID,\n  PAYMENT_FAILURE,\n  AMOUNT_ZERO,\n  MARKET_NOT_SUPPORTED,\n}\n","/**\n * LEAVE THE VALUES, IT MUST BE SET EXPLICITLY.\n */\nexport enum PaymentTypesEnum {\n  PAY = 0,\n  REGISTER = 1,\n  COMMIT = 2,\n}\n","export enum NonceTypesEnum {\n  SERIAL,\n  TOKEN\n}\n","export enum WalletTypesEnum {\n  METAMASK,\n  LEDGER,\n  TREZOR,\n  WALLET_CONNECT,\n}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { IconComponent } from 'src/app/widgets/icon';\n\n@NgModule({\n  imports: [\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [IconComponent],\n  exports: [\n    IconComponent,\n    MatDialogModule,\n    MatButtonModule,\n    TranslationModule,\n    FlexLayoutModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class IconModule {}\n","import { NgModule } from \"@angular/core\";\nimport { TranslationModule } from \"./translation.module\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport { serviceProviders } from \"../../models\";\nimport { CustomAddressComponent } from \"../../widgets/custom-address/custom-address.component\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { CommonModule } from \"@angular/common\";\n\n@NgModule({\n  imports: [\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    ReactiveFormsModule,\n    CommonModule,\n    FormsModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [CustomAddressComponent],\n  exports: [\n    CustomAddressComponent,\n    TranslationModule,\n    FlexLayoutModule,\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  bootstrap: [],\n  entryComponents: [CustomAddressComponent],\n  schemas: [],\n})\nexport class CustomAddressDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { GenericDialogComponent } from '../../widgets/generic-dialog/generic-dialog.component';\nimport { IconModule } from './icon.module';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [GenericDialogComponent],\n  exports: [\n    CommonModule,\n    GenericDialogComponent,\n    TranslationModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [GenericDialogComponent],\n  schemas: [],\n})\nexport class GenericDialogModule {}\n","import { NgModule } from \"@angular/core\";\nimport { TranslationModule } from \"./translation.module\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport { serviceProviders } from \"../../models\";\nimport { OnboardDialogComponent } from \"../../widgets/onboard-dialog\";\nimport { SharedModule } from \"../shared.module\";\n\n@NgModule({\n  imports: [\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    SharedModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [OnboardDialogComponent],\n  exports: [OnboardDialogComponent, TranslationModule, FlexLayoutModule],\n  bootstrap: [],\n  entryComponents: [OnboardDialogComponent],\n  schemas: [],\n})\nexport class OnboardDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { SpinnerCustomComponent } from 'src/app/widgets/spinner-custom';\nimport { CommonModule } from '@angular/common';\nimport { IconModule } from './icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [SpinnerCustomComponent],\n  exports: [\n    SpinnerCustomComponent,\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class SpinnerCustomModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { IconModule } from './icon.module';\nimport { CommonModule } from '@angular/common';\nimport { BulkSearchComponent } from 'src/app/widgets/bulk-search';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { SpinnerCustomModule } from './spinner-custom.module';\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatInputModule,\n    MatSlideToggleModule,\n    MatProgressBarModule,\n    SpinnerCustomModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [BulkSearchComponent],\n  exports: [\n    BulkSearchComponent,\n    CommonModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatInputModule,\n    MatSlideToggleModule,\n    MatProgressBarModule,\n    SpinnerCustomModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class BulkSearchModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { IconModule } from './icon.module';\nimport { CommonModule } from '@angular/common';\nimport { BlockyComponent } from 'src/app/widgets/blocky';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TranslationModule,\n    MatIconModule,\n    MatDialogModule,\n    MatButtonModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [BlockyComponent],\n  exports: [\n    CommonModule,\n    BlockyComponent,\n    MatIconModule,\n    TranslationModule,\n    FlexLayoutModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class BlockyModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { serviceProviders } from '../../models';\nimport { CommonModule } from '@angular/common';\nimport { SettingsComponent } from 'src/app/widgets/settings';\nimport { SharedModule } from '../shared.module';\n\n@NgModule({\n  imports: [CommonModule, TranslationModule, SharedModule],\n  providers: [...serviceProviders],\n  declarations: [SettingsComponent],\n  exports: [CommonModule, SettingsComponent, SharedModule],\n  bootstrap: [],\n  entryComponents: [SettingsComponent],\n  schemas: [],\n})\nexport class SettingsDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { TranslationModule } from './translation.module';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { serviceProviders } from '../../models';\nimport { IconModule } from './icon.module';\nimport { CommonModule } from '@angular/common';\nimport { MainHeaderComponent } from 'src/app/widgets/main-header';\nimport { BulkSearchModule } from './bulk-search.module';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { BlockyModule } from './blocky.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SpinnerCustomModule } from './spinner-custom.module';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { SettingsDialogModule } from './settings-dialog.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    TranslationModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatBadgeModule,\n    MatMenuModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    FlexLayoutModule,\n    SpinnerCustomModule,\n    BulkSearchModule,\n    SettingsDialogModule,\n    BlockyModule,\n    IconModule,\n  ],\n  providers: [...serviceProviders],\n  declarations: [MainHeaderComponent],\n  exports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MainHeaderComponent,\n    MatDialogModule,\n    MatButtonModule,\n    MatBadgeModule,\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatInputModule,\n    TranslationModule,\n    FlexLayoutModule,\n    SpinnerCustomModule,\n    BulkSearchModule,\n    SettingsDialogModule,\n    BlockyModule,\n    IconModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class MainHeaderModule {}\n","import { NgModule } from \"@angular/core\";\nimport { TranslationPipe } from \"../../services\";\n\n@NgModule({\n  imports: [],\n  providers: [],\n  declarations: [TranslationPipe],\n  exports: [TranslationPipe],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [],\n})\nexport class TranslationModule {}\n","import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTime',\n})\nexport class FormatTimePipe extends DatePipe implements PipeTransform {\n  transform(value: string): any {\n    if (value) {\n      const inputDate = new Date(parseInt(value));\n      return super.transform(inputDate, 'MMM d y HH:MM');\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport TimeAgo from 'javascript-time-ago';\nimport en from 'javascript-time-ago/locale/en';\nTimeAgo.addDefaultLocale(en);\n\n@Pipe({\n  name: 'timeAgo',\n})\nexport class TimeAgoPipe implements PipeTransform {\n  transform(value: string): any {\n    const timeAgo = new TimeAgo('en-US');\n    if (value) {\n      const time = timeAgo.format(new Date(parseInt(value)));\n      return time;\n    }\n  }\n}\n","import {\n  NgModule,\n  CUSTOM_ELEMENTS_SCHEMA,\n  NO_ERRORS_SCHEMA,\n} from '@angular/core';\nimport {\n  MAT_BOTTOM_SHEET_DATA,\n  MatBottomSheetModule,\n} from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport {\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n  MatDialogModule,\n} from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport {\n  MatProgressBarModule,\n  MAT_PROGRESS_BAR_DEFAULT_OPTIONS,\n} from '@angular/material/progress-bar';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { TranslationModule } from './miscs/translation.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport {\n  GenericDialogModule,\n  CustomAddressDialogModule,\n  IconModule,\n} from './miscs';\nimport { serviceProviders } from '../models';\nimport { HammerJsConf } from '../configurations';\nimport { GetScrollableXyDirective } from './directives';\nimport { FormatTimePipe, TimeAgoPipe } from './pipes';\nimport { HeaderComponent } from '../widgets/header';\nimport { NavigatorComponent } from '../widgets/navigator';\nimport { NavigatorButtonComponent } from '../widgets/navigator-button';\nimport { PinInputComponent } from '../widgets/pin-input';\nimport { SpinnerComponent } from '../widgets/spinner';\nimport { PreviewImageComponent } from '../widgets/preview-image';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { QRCodeModule } from 'angularx-qrcode';\nimport { NgxColorsModule } from 'ngx-colors';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    CommonModule,\n    RouterModule,\n    FlexLayoutModule,\n    ReactiveFormsModule,\n    FormsModule,\n    IconModule,\n    MatBottomSheetModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatExpansionModule,\n    MatButtonModule,\n    MatChipsModule,\n    MatInputModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatCardModule,\n    MatDividerModule,\n    MatIconModule,\n    MatRadioModule,\n    MatStepperModule,\n    MatCheckboxModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatRippleModule,\n    MatProgressSpinnerModule,\n    MatTableModule,\n    MatListModule,\n    MatMenuModule,\n    MatTooltipModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSnackBarModule,\n    MatProgressBarModule,\n    MatBadgeModule,\n    MatPaginatorModule,\n    TranslationModule,\n    DragDropModule,\n    OverlayModule,\n    GenericDialogModule,\n    CustomAddressDialogModule,\n    QRCodeModule,\n    NgxColorsModule,\n  ],\n  providers: [\n    ...serviceProviders,\n    {\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: HammerJsConf,\n    },\n    { provide: MAT_PROGRESS_BAR_DEFAULT_OPTIONS, useValue: {} },\n    { provide: MAT_BOTTOM_SHEET_DATA, useValue: {} },\n    { provide: MAT_DIALOG_DATA, useValue: {} },\n    { provide: MatDialogRef, useValue: {} },\n  ],\n  declarations: [\n    HeaderComponent,\n    NavigatorComponent,\n    NavigatorButtonComponent,\n    PinInputComponent,\n    SpinnerComponent,\n    GetScrollableXyDirective,\n    FormatTimePipe,\n    TimeAgoPipe,\n    PreviewImageComponent,\n  ],\n  exports: [\n    HttpClientModule,\n    TranslationModule,\n    CommonModule,\n    RouterModule,\n    HeaderComponent,\n    NavigatorComponent,\n    NavigatorButtonComponent,\n    MatAutocompleteModule,\n    PinInputComponent,\n    SpinnerComponent,\n    PreviewImageComponent,\n    FlexLayoutModule,\n    ReactiveFormsModule,\n    FormsModule,\n    IconModule,\n    MatBottomSheetModule,\n    MatExpansionModule,\n    MatDialogModule,\n    MatChipsModule,\n    MatButtonModule,\n    MatInputModule,\n    MatSelectModule,\n    MatTabsModule,\n    MatCardModule,\n    MatDividerModule,\n    MatIconModule,\n    MatRadioModule,\n    MatCheckboxModule,\n    MatSliderModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatSlideToggleModule,\n    MatRippleModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatListModule,\n    MatStepperModule,\n    MatTooltipModule,\n    MatMenuModule,\n    MatTableModule,\n    MatSnackBarModule,\n    MatBadgeModule,\n    MatPaginatorModule,\n    DragDropModule,\n    OverlayModule,\n    GetScrollableXyDirective,\n    FormatTimePipe,\n    TimeAgoPipe,\n    GenericDialogModule,\n    CustomAddressDialogModule,\n    QRCodeModule,\n    NgxColorsModule,\n  ],\n  bootstrap: [],\n  entryComponents: [],\n  schemas: [NO_ERRORS_SCHEMA, CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class SharedModule {}\n","import { Injectable } from '@angular/core';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BookmarksServiceService {\n  constructor() {}\n\n  countBookmarks() {\n    return this.loadBookmarksAndFeed().length;\n  }\n\n  loadBookmarks() {\n    return localStorage.getItem('canvas-bookmarks');\n  }\n\n  loadBookmarksAndFeed() {\n    const sBookmarks = this.loadBookmarks();\n    if (sBookmarks !== null && sBookmarks !== '' && sBookmarks !== '[]') {\n      return JSON.parse(sBookmarks);\n    }\n    return [];\n  }\n\n  saveBookmark(domainData: ENSDomainMetadataModel) {\n    const bookmarksRaw = this.loadBookmarksAndFeed().reduce(\n      (accumulator, value) => {\n        return { ...accumulator, [value.labelName]: value };\n      },\n      {}\n    );\n    const bKeys = Object.keys(bookmarksRaw);\n    const bookmarks = [...new Set(bKeys)].map((k) => bookmarksRaw[k]);\n    bookmarks.push(domainData);\n    localStorage.setItem('canvas-bookmarks', JSON.stringify(bookmarks));\n    return bookmarks;\n  }\n\n  removeBookmark(bookmarks: ENSDomainMetadataModel[], domainName: string) {\n    const bookmarksUpdated = [];\n    bookmarks.filter((d) => {\n      if (d.labelName !== domainName) {\n        bookmarksUpdated.push(d);\n      }\n    });\n    localStorage.setItem('canvas-bookmarks', JSON.stringify(bookmarks));\n    return bookmarks;\n  }\n\n  clearBookmarks() {\n    localStorage.setItem('canvas-bookmarks', JSON.stringify([]));\n  }\n\n  isDomainBookmarked(bookmarks: ENSDomainMetadataModel[], domainName: string) {\n    for (const d of bookmarks) {\n      if (d.labelName === domainName) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import * as ethers from 'ethers';\nimport { BigNumber } from 'ethers';\nimport { environment } from '../../../environments/environment';\nimport { Injectable } from '@angular/core';\nimport {\n  acceptedCurrenciesMainnet,\n  acceptedCurrenciesTestnet,\n  ContractAddressesMainnetEnum,\n  ContractAddressesTestnetEnum,\n  SupportedCurrenciesEnum,\n} from '../../configurations/contracts';\nimport { AcceptedCurrencyModel } from '../../models/currencies';\nimport { PaymentTypesEnum } from '../../models/states/payment-interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrencyService {\n  constructor() {}\n  /**\n   * Environment production: mainnet contracts are used.\n   * Environment development (true): devnet contracts are used.\n   * Environment development (false): testnet (ropsten) contracts are used.\n   * @param currency\n   */\n  deriveCurrencyAddressFromName(currency: string) {\n    let currencies;\n    if (environment.production === true) {\n      currencies = Object(ContractAddressesMainnetEnum);\n    } else {\n      currencies = Object(ContractAddressesTestnetEnum);\n    }\n    return currencies[currency.toUpperCase()];\n  }\n\n  deriveCurrencyDataFromCurrencyName(currency: string) {\n    let currencies;\n    if (environment.production === true) {\n      currencies = Object(acceptedCurrenciesMainnet) as AcceptedCurrencyModel[];\n    } else {\n      currencies = Object(acceptedCurrenciesTestnet) as AcceptedCurrencyModel[];\n    }\n    let currencySearched: any = false;\n    for (const c of currencies) {\n      if (c.currency === currency) {\n        currencySearched = c as AcceptedCurrencyModel;\n      }\n    }\n    return currencySearched;\n  }\n\n  convertAmountToDecimal(amountInString: string, currency: string) {\n    const paymentCurrency = this.deriveCurrencyDataFromCurrencyName(currency);\n    if (paymentCurrency === false) {\n      return false;\n    }\n    const currencyData = paymentCurrency as AcceptedCurrencyModel;\n    const bnAmount = BigNumber.from(amountInString);\n    return ethers.utils.formatUnits(bnAmount, currencyData.decimals);\n  }\n\n  convertAmountToToken(amountInString: string, currency: string) {\n    const paymentCurrency = this.deriveCurrencyDataFromCurrencyName(currency);\n    if (paymentCurrency === false) {\n      return false;\n    }\n    const currencyData = paymentCurrency as AcceptedCurrencyModel;\n    return ethers.utils.parseUnits(amountInString, currencyData.decimals);\n  }\n\n  getSupportedCurrencies() {\n    let currencies;\n    if (environment.production === true) {\n      currencies = Object(acceptedCurrenciesMainnet) as AcceptedCurrencyModel[];\n    } else {\n      currencies = Object(acceptedCurrenciesTestnet) as AcceptedCurrencyModel[];\n    }\n    return currencies as AcceptedCurrencyModel[];\n  }\n\n  determineDefaultCurrencyForPayment(\n    searchType: PaymentTypesEnum,\n    chooseSecondDefault = false\n  ) {\n    let secondDefaultToBeChosen = false;\n    for (const c of Object.keys(SupportedCurrenciesEnum)) {\n      const currencyData = this.deriveCurrencyDataFromCurrencyName(\n        c\n      ) as AcceptedCurrencyModel;\n      if (searchType === PaymentTypesEnum.PAY) {\n        if (chooseSecondDefault === true && secondDefaultToBeChosen === false) {\n          secondDefaultToBeChosen = true;\n        } else {\n          return c;\n        }\n      }\n    }\n  }\n}\n","export const chainlinkV3ABI = [\n  {\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        internalType: 'uint8',\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'description',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint80',\n        name: '_roundId',\n        type: 'uint80',\n      },\n    ],\n    name: 'getRoundData',\n    outputs: [\n      {\n        internalType: 'uint80',\n        name: 'roundId',\n        type: 'uint80',\n      },\n      {\n        internalType: 'int256',\n        name: 'answer',\n        type: 'int256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'startedAt',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'updatedAt',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint80',\n        name: 'answeredInRound',\n        type: 'uint80',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'latestRoundData',\n    outputs: [\n      {\n        internalType: 'uint80',\n        name: 'roundId',\n        type: 'uint80',\n      },\n      {\n        internalType: 'int256',\n        name: 'answer',\n        type: 'int256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'startedAt',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint256',\n        name: 'updatedAt',\n        type: 'uint256',\n      },\n      {\n        internalType: 'uint80',\n        name: 'answeredInRound',\n        type: 'uint80',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'version',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Contract } from 'ethers';\nimport { from, timer } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport {\n  contractChainlinkMainnet,\n  contractChainlinkTestnet,\n  generalConfigurations,\n} from 'src/app/configurations';\nimport { chainlinkV3ABI } from 'src/app/configurations/contracts/chainlink-aggregator-v3.abi';\nimport { PaymentFacadeService } from 'src/app/store/facades';\nimport { environment } from 'src/environments/environment';\n\nconst globalAny: any = global;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrencyExchangeService {\n  constructor(protected paymentFacade: PaymentFacadeService) {}\n\n  getPrices() {\n    let processorLocked = false;\n    return timer(0, generalConfigurations.timeToUpdateEthUSDRate).pipe(\n      filter((i) => {\n        if (processorLocked === true) {\n          return false;\n        }\n        return true;\n      }),\n      switchMap((i) => {\n        processorLocked = true;\n        return from(this.chainlink.latestRoundData()).pipe(\n          map((normalizedPrices) => {\n            if (normalizedPrices === false || normalizedPrices === null) {\n              return false;\n            }\n            this.paymentFacade.setEthUsdRate(\n              ((normalizedPrices as any).answer.toNumber() / 10 ** 8).toString()\n            );\n            processorLocked = false;\n          })\n        );\n      })\n    );\n  }\n\n  get chainlinkAddress() {\n    if (environment.test === true) {\n      return contractChainlinkTestnet;\n    }\n    return contractChainlinkMainnet;\n  }\n\n  get chainlink() {\n    const contract = new Contract(\n      this.chainlinkAddress,\n      chainlinkV3ABI,\n      globalAny.canvasProvider\n    );\n    return contract;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MiscUtilsService } from '../misc-utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DownloadService {\n  constructor(protected mistUtils: MiscUtilsService) {}\n\n  download(meta: string, dataRaw: any) {\n    const data = new TextEncoder().encode(dataRaw);\n    const blob = new Blob(['\\uFEFF', data], {\n      type: 'text/csv;charset=utf-8',\n    });\n    var fileURL = URL.createObjectURL(blob);\n    window.open(fileURL, '_target');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport request, { gql } from 'graphql-request';\nimport { Observable } from 'rxjs';\nimport { ens_normalize } from '@adraffy/ens-normalize';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EnsService {\n  constructor(private http: HttpClient) {}\n\n  getDomainMetadata(domainHash: string) {\n    const url = environment.networks[environment.defaultChain].ensMetadataAPI;\n    return this.http.get(url + domainHash);\n  }\n\n  findDomains(domains: string[]) {\n    const url = environment.networks[environment.defaultChain].ensGraphQLAPI;\n    return new Observable((observer) => {\n      const query = gql`\n        query ($domainNames: [String!]) {\n          registrations(first: 1000, where: { labelName_in: $domainNames }) {\n            id\n            labelName\n            expiryDate\n            registrationDate\n            domain {\n              createdAt\n            }\n          }\n        }\n      `;\n      request(url, query, { domainNames: domains }).then((data) => {\n        observer.next(data);\n        observer.complete();\n      });\n    });\n  }\n\n  getDomain(domain: string) {\n    const url = environment.networks[environment.defaultChain].ensGraphQLAPI;\n    return new Observable((observer) => {\n      const query = gql`\n        query ($domainName: String!) {\n          registrations(first: 1, where: { labelName: $domainName }) {\n            id\n            labelName\n            expiryDate\n            registrationDate\n            registrant {\n              id\n            }\n            domain {\n              createdAt\n              labelhash\n            }\n            events {\n              blockNumber\n              transactionID\n            }\n          }\n        }\n      `;\n      request(url, query, { domainName: domain }).then((data) => {\n        observer.next(data);\n        observer.complete();\n      });\n    });\n  }\n\n  downloadDomainsListCSV(domains: ENSDomainMetadataModel[]) {\n    let finalForm = '';\n    finalForm +=\n      Object.keys(domains[0])\n        .filter((k) => {\n          if (k === 'events') {\n            return false;\n          }\n          return true;\n        })\n        .join(',') + '\\n';\n    finalForm += domains\n      .map((d) => {\n        const k = Object.keys(d);\n        return k\n          .map((kk) => {\n            return d[kk];\n          })\n          .join(',');\n      })\n      .join('\\n');\n    return finalForm;\n  }\n\n  calculateExpiry(expiryDate: string) {\n    const eDate = parseInt(expiryDate, 10) * 1000;\n    const now = new Date().getTime();\n    const remainingDate = now - eDate;\n    return remainingDate;\n  }\n\n  calculateGracePeriodPercentage(expiryDate: number) {\n    const now = new Date().getTime();\n    const gracePeriod = 7889400000;\n    const timeUtilGraceEnds = expiryDate * 1000 + gracePeriod;\n    const gracePeriodExact = timeUtilGraceEnds - now;\n    const gInPercent = gracePeriod / 100;\n    return gracePeriodExact / gInPercent;\n  }\n\n  isDomainNameNotValid(name: string) {\n    if (name === '' || name.length < 3) {\n      return false;\n    }\n    try {\n      ens_normalize(name + '.eth');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  calculateDomainsPrice(\n    name: string,\n    ethToUsdRate: string,\n    duration: number = 1\n  ) {\n    const ethUsdRate = parseInt(ethToUsdRate, 10);\n    let nameCost = 5;\n    switch (name.length) {\n      case 3:\n        {\n          nameCost = 640;\n        }\n        break;\n      case 4:\n        {\n          nameCost = 160;\n        }\n        break;\n    }\n    return parseFloat((nameCost / ethUsdRate).toFixed(4)) * duration;\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class FormValidationService {\n  constructor() {}\n\n  markFormGroupTouched(formGroup: FormGroup) {\n    (Object as any).values(formGroup.controls).forEach((control) => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Resolve,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { routerPaths } from 'src/app/models/router-paths.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PathResolveService implements Resolve<string | null> {\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): string | null {\n    const typoPath = state.url.replace('/', '');\n    const threshold = this.getThreshold(typoPath);\n    const dictionary = Object.values(routerPaths).filter(\n      (path) => Math.abs(path.length - typoPath.length) < threshold\n    ) as string[];\n    if (!dictionary.length) {\n      return null;\n    }\n    this.sortByDistances(typoPath, dictionary);\n    return `/${dictionary[0]}`;\n  }\n\n  getThreshold(path: string): number {\n    if (path.length < 5) {\n      return 3;\n    }\n    return 5;\n  }\n\n  sortByDistances(typoPath: string, dictionary: string[]) {\n    const pathsDistance = {} as { [name: string]: number };\n    dictionary.sort((a, b) => {\n      if (!(a in pathsDistance)) {\n        pathsDistance[a] = this.levenshtein(a, typoPath);\n      }\n      if (!(b in pathsDistance)) {\n        pathsDistance[b] = this.levenshtein(b, typoPath);\n      }\n\n      return pathsDistance[a] - pathsDistance[b];\n    });\n  }\n\n  levenshtein(a: string, b: string): number {\n    if (a.length === 0) {\n      return b.length;\n    }\n    if (b.length === 0) {\n      return a.length;\n    }\n    const matrix = [];\n    for (let i = 0; i <= b.length; i++) {\n      matrix[i] = [i];\n    }\n    for (let j = 0; j <= a.length; j++) {\n      matrix[0][j] = j;\n    }\n    for (let i = 1; i <= b.length; i++) {\n      for (let j = 1; j <= a.length; j++) {\n        if (b.charAt(i - 1) === a.charAt(j - 1)) {\n          matrix[i][j] = matrix[i - 1][j - 1];\n        } else {\n          matrix[i][j] = Math.min(\n            matrix[i - 1][j - 1] + 1,\n            matrix[i][j - 1] + 1,\n            matrix[i - 1][j] + 1\n          );\n        }\n      }\n    }\n    return matrix[b.length][a.length];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport TrezorConnect from 'trezor-connect';\nimport { MiscUtilsService } from '../misc-utils';\nimport { PagesFacadeService } from '../../store/facades';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BigNumber, utils } from 'ethers';\nimport { generalConfigurations } from 'src/app/configurations';\n\ninterface TrezorSignedTransactionModel {\n  id: number;\n  success: boolean;\n  payload: {\n    v: string;\n    r: string;\n    s: string;\n  };\n}\n\ninterface TrezorGetAccountInfoResultModel {\n  id: number;\n  success: boolean;\n  payload: {\n    availableBalance: string;\n    balance: string;\n    descriptor: string;\n    empty: boolean;\n    history: {\n      tokens: string[];\n      total: number;\n      transactions: any[];\n      unconfirmed: number;\n    };\n    misc: {\n      nonce: string;\n    };\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrezorService {\n  constructor(\n    public miscUtils: MiscUtilsService,\n    public pagesFacade: PagesFacadeService\n  ) {}\n\n  connect(time: number) {\n    return new Observable((observer) => {\n      TrezorConnect.init({\n        lazyLoad: false,\n        webusb: true,\n        popup: true,\n        manifest: generalConfigurations.trezorManifest,\n      })\n        .then((r) => {\n          return TrezorConnect.getAccountInfo({\n            path: \"m/44'/60'/0'/0/0\",\n            coin: 'eth',\n          });\n        })\n        .then((r) => {\n          const result = r as any as TrezorGetAccountInfoResultModel;\n          if (r === undefined) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(result.payload.descriptor);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n          return;\n        });\n    });\n  }\n\n  signPayment(payload: any) {\n    return new Observable((observer) => {\n      TrezorConnect.getAccountInfo({\n        path: \"m/44'/60'/0'/0/0\",\n        coin: 'eth',\n      })\n        .then((r) => {\n          const accountInfo = r as any as TrezorGetAccountInfoResultModel;\n          return TrezorConnect.ethereumSignTransaction({\n            path: \"m/44'/60'/0'/0/0\",\n            transaction: {\n              ...payload,\n              from: accountInfo.payload.descriptor,\n              nonce: BigNumber.from(payload.nonce).toHexString(),\n            },\n          });\n        })\n        .then((r) => {\n          const signed = r as any as TrezorSignedTransactionModel;\n          if (\n            signed === null ||\n            signed.success === false ||\n            signed === undefined\n          ) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(\n            utils.serializeTransaction(payload, {\n              v: BigNumber.from(signed.payload.v).toNumber(),\n              r: signed.payload.r,\n              s: signed.payload.s,\n            })\n          );\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getWeb3Provider() {\n    return new Observable((observer) => {\n      detectEthereumProvider()\n        .then((p) => {\n          observer.next(p);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(null);\n          observer.complete();\n        });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { icons, imageToPreload } from 'src/app/configurations';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconRegistryService {\n  constructor() {}\n\n  injectCustomIcons() {\n    return icons;\n  }\n\n  perloadCustomIcons() {\n    const ic = this.injectCustomIcons();\n    for (const i of Object.keys(ic).map((ici) => ic[ici])) {\n      const ii = new Image();\n      ii.src = i;\n    }\n    const icc = imageToPreload;\n    for (const i of Object.keys(ic).map((ici) => ic[ici])) {\n      const ii = new Image();\n      ii.src = i;\n    }\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { MiscUtilsService } from \"../../misc-utils\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PaymentEffectsService {\n  constructor(protected miscUtils: MiscUtilsService) {}\n\n  recordLastConnectionAddress(connectionAddress: string) {\n    localStorage.setItem(\"ps-last-connection\", connectionAddress);\n  }\n\n  getLastConnectionAddress() {\n    const lConnectionAddres = localStorage.getItem(\"ps-last-connection\");\n    if (\n      lConnectionAddres === null ||\n      lConnectionAddres === \"\" ||\n      lConnectionAddres === undefined\n    ) {\n      return false;\n    }\n    return lConnectionAddres;\n  }\n}\n","import { Router } from '@angular/router';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { UserFacadeService } from '../../store/facades';\n\n@Injectable({ providedIn: 'root' })\nexport class Intercept implements HttpInterceptor {\n  constructor(router: Router, public userFacade: UserFacadeService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { MiscUtilsService } from '../misc-utils';\nimport TransportUSB from '@ledgerhq/hw-transport-webusb';\nimport LedgerEth from '@ledgerhq/hw-app-eth';\nimport { PagesFacadeService } from '../../store/facades';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\ninterface LedgerSignResultModel {\n  v: number;\n  r: string;\n  s: string;\n}\n\ninterface LedgerGetAddressResultModel {\n  address: string;\n  chainCode: string;\n  publicKey: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LedgerService {\n  transport: any;\n  ledger: LedgerEth;\n\n  constructor(\n    public miscUtils: MiscUtilsService,\n    public pagesFacade: PagesFacadeService\n  ) {}\n\n  connect(time: number) {\n    return new Observable((observer) => {\n      TransportUSB.create()\n        .then((r) => {\n          this.transport = r;\n          this.ledger = new LedgerEth(r);\n          return this.ledger.getAddress(\"m/44'/60'/0'/0/0\");\n        })\n        .then((r: any) => {\n          if (r === false) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          const result = r as any as LedgerGetAddressResultModel;\n          observer.next(result.address);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n          return;\n        });\n    });\n  }\n\n  createTransport() {\n    return new Observable((observer) => {\n      TransportUSB.create().then((r) => {\n        this.transport = r;\n        this.ledger = new LedgerEth(r);\n        observer.next(this.ledger);\n        observer.complete();\n        return;\n      });\n    });\n  }\n\n  signPayment(payload: string) {\n    return new Observable((observer) => {\n      this.ledger\n        .signTransaction(\"m/44'/60'/0'/0/0\", payload.substring(2))\n        .then((r) => {\n          if (r === null || r === undefined) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          const signed = r as any as LedgerSignResultModel;\n          observer.next(signed);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getWeb3Provider() {\n    return new Observable((observer) => {\n      detectEthereumProvider()\n        .then((p) => {\n          observer.next(p);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(null);\n          observer.complete();\n        });\n    });\n  }\n}\n","import * as Ethers from 'ethers';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { MiscUtilsService } from '../misc-utils';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { PagesFacadeService, UserFacadeService } from '../../store/facades';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\ndeclare const ethereum;\n@Injectable({\n  providedIn: 'root',\n})\nexport class MetamaskService {\n  constructor(\n    public miscUtils: MiscUtilsService,\n    public userFacadeService: UserFacadeService,\n    public pagesFacade: PagesFacadeService\n  ) {}\n\n  connect(time: number) {\n    return this.getAccounts().pipe(\n      switchMap((a) => {\n        const accounts = a as any;\n        if (\n          accounts === undefined ||\n          accounts === null ||\n          accounts.length <= 0\n        ) {\n          return of(false);\n        }\n        return of(a[0]);\n      }),\n      catchError((e) => {\n        return of(false);\n      })\n    );\n  }\n\n  chainChangedDetectionDaemon() {\n    ethereum.on('chainChanged', (chainId) => {\n      this.pagesFacade.setNetworkChainCode(parseInt(chainId, 16));\n    });\n  }\n\n  getChainId() {\n    return ethereum.networkVersion;\n  }\n\n  getAccounts() {\n    return new Observable((observer) => {\n      ethereum\n        .request({ method: 'eth_requestAccounts' })\n        .then((accounts) => {\n          if (\n            accounts === null ||\n            accounts.length <= 0 ||\n            accounts === undefined\n          ) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(\n            accounts.map((a) => {\n              return Ethers.utils.getAddress(a);\n            })\n          );\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  signPayment(payloadHash: any) {\n    return new Observable((observer) => {\n      detectEthereumProvider()\n        .then((p: any) => {\n          return p.request({\n            method: 'eth_sendTransaction',\n            params: payloadHash,\n          });\n        })\n        .then((tx) => {\n          if (tx === null || tx.length <= 0 || tx === undefined) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(tx);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getWeb3Provider() {\n    return new Observable((observer) => {\n      detectEthereumProvider()\n        .then((p) => {\n          observer.next(p);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(null);\n          observer.complete();\n        });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ethers } from 'ethers';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MiscUtilsService {\n  constructor() {}\n\n  roundUp(num: number, roundTo: number) {\n    return Math.round(num / roundTo) * roundTo;\n  }\n\n  testJSON(json) {\n    const str = json.toString();\n    try {\n      JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  checksumEtheruemAddress(address: string) {\n    try {\n      return (\n        ethers.utils.getAddress(address).toLowerCase() === address.toLowerCase()\n      );\n    } catch (e) {\n      return false;\n    }\n  }\n\n  commafied(num: string) {\n    if (num.toString().indexOf('.') <= -1) {\n      return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    } else {\n      const parts = num.toString().split('.');\n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n      return parts.join('.');\n    }\n  }\n\n  prependToArray(value: any, array: any[]) {\n    var newArray = array.slice();\n    newArray.unshift(value);\n    return newArray;\n  }\n\n  toHex(str: string) {\n    const rb = new TextEncoder().encode(str);\n    let r = '';\n    for (const b of rb) {\n      r += ('0' + b.toString(16)).slice(-2);\n    }\n    return r;\n  }\n\n  testNumeric() {\n    const reg = new RegExp(/^(0|[1-9]\\d*)(\\.\\d+)?$/);\n    return reg;\n  }\n\n  testAlphaNumeric() {\n    const reg = new RegExp('^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$');\n    return reg;\n  }\n\n  testAlpha() {\n    const reg = new RegExp('^[A-Za-z]+$');\n    return reg;\n  }\n\n  testEmoji() {\n    const reg = new RegExp(/\\p{Extended_Pictographic}/u);\n    return reg;\n  }\n\n  testIntNumeric() {\n    const reg = new RegExp('^[0-9]+$');\n    return reg;\n  }\n}\n","export enum PaymentStoreErrorsEnum {\n  UNKOWN = \"UNKNOWN_PAYMENT\",\n  NO_NETWORK_CONNECTION = \"NO_NETWORK_CONNECTION\",\n  QRSCANNER_CAMERA_NO_PERMISSION = \"QRSCANNER_CAMERA_NO_PERMISSION\",\n  QRSCANNED_RESULT_ERROR = \"QRSCANNED_RESULT_ERROR\",\n  QRSCAN_CANCELLED = \"QRSCAN_CANCELLED\",\n  PIN_INVALID = \"PIN_INVALID\",\n  SIGNING_PAYMENT_ERROR = \"SIGNING_PAYMENT_ERROR\",\n  QRSCANNED_WALLET_ADDRESS_INVALID = \"QRSCANNED_WALLET_ADDRESS_INVALID\",\n  PAYMENT_RELAY_FAILED = \"PAYMENT_RELAY_FAILED\",\n  PAYMENT_FAILED_AMOUNT_ZERO = \"PAYMENT_FAILED_AMOUNT_ZERO\",\n  PAYMENT_FAILED_INSUFFICIENT_FUNDS = \"PAYMENT_FAILED_INSUFFICIENT_FUNDS\",\n  PAYMENT_FAILED_EXPIRED = \"PAYMENT_FAILED_EXPIRED\",\n  PAYMENT_FAILED_TOKEN_NOT_SUPPORTED = \"PAYMENT_FAILED_TOKEN_NOT_SUPPORTED\",\n  PAYMENT_FAILED_UNKNOWN = \"PAYMENT_FAILED_UNKNOWN\",\n  PAYMENT_FAILED_SIGNATURE_INVALID = \"PAYMENT_FAILED_SIGNATURE_INVALID\",\n  PAYMENT_FAILED_PAYEE_ADDRESS_INVALID = \"PAYMENT_FAILED_PAYEE_ADDRESS_INVALID\",\n  PAYMENT_FAILED_WITHDRAW_FAILURE = \"PAYMENT_FAILED_WITHDRAW_FAILURE\",\n  PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE = \"PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE\",\n  PAYMENT_FAILED_WALLET_RECOVERY_FAILURE = \"PAYMENT_FAILED_WALLET_RECOVERY_FAILURE\",\n  PAYMENT_FAILED_EXCHANGE_CURRENCIES_DUPLICATE = \"PAYMENT_FAILED_EXCHANGE_CURRENCIES_DUPLICATE\",\n  PAYMENT_FAILED_INSUFFICIENT_LIQUIDITY = \"PAYMENT_FAILED_INSUFFICIENT_LIQUIDITY\",\n  PAYMENT_FAILED_NONCE_COLLUSION = \"PAYMENT_FAILED_NONCE_COLLUSION\",\n  PAYMENT_FAILED_SERVER_BUSY = \"PAYMENT_FAILED_SERVER_BUSY\",\n  PAYMENT_FAILED_MARKET_CLOSED = \"PAYMENT_FAILED_MARKET_CLOSED\",\n  PAYMENT_FAILED_WALLET_ID_TAKEN = \"PAYMENT_FAILED_WALLET_ID_TAKEN\",\n  PAYMENT_FAILED_MARKET_NOT_SUPPORTED = \"PAYMENT_FAILED_MARKET_NOT_SUPPORTED\",\n  PAYMENT_FAILED_MULTISIG_QUORUM_FAILED = \"PAYMENT_FAILED_MULTISIG_QUORUM_FAILED\",\n  PAYMENT_FAILED_MULTISIG_STORAGE_FULL = \"PAYMENT_FAILED_MULTISIG_STORAGE_FULL\",\n  PAYMENT_FAILED_MULTISIG_NO_ENTRY = \"PAYMENT_FAILED_MULTISIG_NO_ENTRY\",\n  PAYMENT_HISTORY_REMOVAL_FAILED = \"PAYMENT_HISTORY_REMOVAL_FAILED\",\n  PAYMENT_FAILED_ALREADY_FULFILLED = \"PAYMENT_FAILED_ALREADY_FULFILLED\",\n}\n","import { Injectable } from \"@angular/core\";\nimport { PaymentStoreErrorsEnum } from \"../../models/error-enums\";\nimport { PaymentErrorCodes } from \"../../models/states/payment-interfaces\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PaymentErrorService {\n  constructor() {}\n\n  getPaymentErrorTranslatedTextKey(paymentError: PaymentStoreErrorsEnum) {\n    switch (paymentError) {\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_AMOUNT_ZERO:\n        {\n          return \"ERRORS.PAYMENT_FAILED_INSUFFICIENT_FUNDS\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_INSUFFICIENT_FUNDS:\n        {\n          return \"ERRORS.PAYMENT_FAILED_INSUFFICIENT_FUNDS\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_EXPIRED:\n        {\n          return \"ERRORS.PAYMENT_FAILED_EXPIRED\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_UNKNOWN:\n        {\n          return \"ERRORS.PAYMENT_FAILED_UNKNOWN\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_TOKEN_NOT_SUPPORTED:\n        {\n          return \"ERRORS.PAYMENT_FAILED_TOKEN_NOT_SUPPORTED\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE:\n        {\n          return \"ERRORS.PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_SIGNATURE_INVALID:\n        {\n          return \"ERRORS.PAYMENT_FAILED_SIGNATURE_INVALID\";\n        }\n        break;\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_WITHDRAW_FAILURE:\n        {\n          return \"ERRORS.PAYMENT_FAILED_WITHDRAW_FAILURE\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_WALLET_ID_TAKEN:\n        {\n          return \"ERRORS.PAYMENT_FAILED_WALLET_ID_TAKEN\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_MULTISIG_QUORUM_FAILED:\n        {\n          return \"ERRORS.PAYMENT_FAILED_MULTISIG_QUORUM_FAILED\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_MULTISIG_STORAGE_FULL:\n        {\n          return \"ERRORS.PAYMENT_FAILED_MULTISIG_STORAGE_FULL\";\n        }\n        break;\n\n      case PaymentStoreErrorsEnum.PAYMENT_FAILED_MULTISIG_NO_ENTRY:\n        {\n          return \"ERRORS.PAYMENT_FAILED_MULTISIG_NO_ENTRY\";\n        }\n        break;\n    }\n  }\n  getPaymentErrorEnumKey(errorCode: PaymentErrorCodes) {\n    switch (errorCode) {\n      case PaymentErrorCodes.AMOUNT_ZERO:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_AMOUNT_ZERO;\n        }\n        break;\n      case PaymentErrorCodes.INSUFFICIENT_FUNDS:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_INSUFFICIENT_FUNDS;\n        }\n        break;\n      case PaymentErrorCodes.PAYMENT_EXPIRED:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_EXPIRED;\n        }\n        break;\n      case PaymentErrorCodes.PAYMENT_FAILURE:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_UNKNOWN;\n        }\n        break;\n      case PaymentErrorCodes.TOKEN_NOT_SUPPORTED:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_TOKEN_NOT_SUPPORTED;\n        }\n        break;\n      case PaymentErrorCodes.SIGNATURE_INVALID:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_WALLET_INITIALISATION_FAILURE;\n        }\n        break;\n      case PaymentErrorCodes.MARKET_NOT_SUPPORTED:\n        {\n          return PaymentStoreErrorsEnum.PAYMENT_FAILED_MARKET_NOT_SUPPORTED;\n        }\n        break;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PaymentModel } from 'src/app/models/states/payment-interfaces';\n\nconst globalAny: any = global;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentStorageService {\n  constructor() {}\n\n  get networkName() {\n    return globalAny.networkName;\n  }\n\n  removePayments() {\n    localStorage.removeItem('canvas-payments-data');\n  }\n\n  savePayments(paymentData: PaymentModel[]) {\n    localStorage.setItem('canvas-payments-data', JSON.stringify(paymentData));\n  }\n\n  loadPayments() {\n    const l = localStorage.getItem('canvas-payments-data');\n    if (l === null || l === '[]' || l === '') {\n      return false;\n    }\n    return JSON.parse(l);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { UserService } from '../user';\nimport { CurrencyService } from '../currency';\nimport { WalletService } from '../wallet';\nimport { PaymentModel } from 'src/app/models/states/payment-interfaces';\nimport { Observable } from 'rxjs';\nimport { BigNumber, ethers } from 'ethers';\nimport { Provider } from '@ethersproject/abstract-provider';\n\nconst globalAny: any = global;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentService {\n  constructor(\n    protected userService: UserService,\n    protected currencyService: CurrencyService,\n    protected walletService: WalletService\n  ) {}\n\n  prepareTransaction(\n    chainId: number,\n    nonce: number,\n    toAddress: string,\n    gasLimit: string,\n    gasPrice: string,\n    payment: PaymentModel\n  ) {\n    const paymentLoad = {\n      chainId: chainId,\n      nonce: nonce,\n      to: toAddress,\n      gasPrice: gasPrice,\n      gas: gasLimit,\n      value: payment.paymentTotal,\n      data: payment.paymentAbstractBytesSlot,\n    };\n    return paymentLoad;\n  }\n\n  resolveAddressOfEth(provider: Provider, walletAddress: string) {\n    return new Observable((observer) => {\n      provider.resolveName(walletAddress).then((n) => {\n        observer.next(n);\n        observer.complete();\n      });\n    });\n  }\n\n  getWalletNonce(provider: Provider, walletAddress: string) {\n    return new Observable((observer) => {\n      provider.getTransactionCount(walletAddress).then((n) => {\n        observer.next(n);\n        observer.complete();\n      });\n    });\n  }\n\n  getGasPrice(provider: Provider) {\n    return new Observable((observer) => {\n      provider\n        .getFeeData()\n        .then((feeData) => {\n          observer.next(feeData);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n}\n","export const ENSBulkRegistrationContractMainnetABI = [\n  {\n    inputs: [],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'errorInfo',\n        type: 'bytes',\n      },\n    ],\n    name: 'error',\n    type: 'event',\n  },\n  {\n    stateMutability: 'payable',\n    type: 'receive',\n    payable: true,\n  },\n  {\n    inputs: [],\n    name: 'recoverStuckETH',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'string',\n            name: 'name',\n            type: 'string',\n          },\n          {\n            internalType: 'address',\n            name: 'owner',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'duration',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'secret',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'address',\n            name: 'resolver',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes[]',\n            name: 'data',\n            type: 'bytes[]',\n          },\n          {\n            internalType: 'bool',\n            name: 'reverseRecord',\n            type: 'bool',\n          },\n          {\n            internalType: 'uint32',\n            name: 'fuses',\n            type: 'uint32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'wrapperExpiry',\n            type: 'uint64',\n          },\n        ],\n        internalType: 'struct ENSCommitment.Commitment[]',\n        name: 'commitments',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'withConfigs',\n        type: 'bool',\n      },\n    ],\n    name: 'createCommitmentsForRegistration',\n    outputs: [\n      {\n        internalType: 'bytes32[]',\n        name: '',\n        type: 'bytes32[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '',\n        type: 'uint256[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n    constant: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'commitments',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'requestRegistration',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string[]',\n        name: 'names',\n        type: 'string[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'nameLengths',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'completeRegistration',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n    payable: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string[]',\n        name: 'names',\n        type: 'string[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'nameLengths',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'completeRegistrationWithConfigs',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n    payable: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'getPriceRanges',\n    outputs: [\n      {\n        internalType: 'uint256[]',\n        name: '',\n        type: 'uint256[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n    constant: true,\n  },\n];\n","export const ENSBulkRegistrationContractTestnetABI = [\n  {\n    inputs: [],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'bytes',\n        name: 'errorInfo',\n        type: 'bytes',\n      },\n    ],\n    name: 'error',\n    type: 'event',\n  },\n  {\n    stateMutability: 'payable',\n    type: 'receive',\n    payable: true,\n  },\n  {\n    inputs: [],\n    name: 'recoverStuckETH',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'string',\n            name: 'name',\n            type: 'string',\n          },\n          {\n            internalType: 'address',\n            name: 'owner',\n            type: 'address',\n          },\n          {\n            internalType: 'uint256',\n            name: 'duration',\n            type: 'uint256',\n          },\n          {\n            internalType: 'bytes32',\n            name: 'secret',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'address',\n            name: 'resolver',\n            type: 'address',\n          },\n          {\n            internalType: 'bytes[]',\n            name: 'data',\n            type: 'bytes[]',\n          },\n          {\n            internalType: 'bool',\n            name: 'reverseRecord',\n            type: 'bool',\n          },\n          {\n            internalType: 'uint32',\n            name: 'fuses',\n            type: 'uint32',\n          },\n          {\n            internalType: 'uint64',\n            name: 'wrapperExpiry',\n            type: 'uint64',\n          },\n        ],\n        internalType: 'struct ENSCommitment.Commitment[]',\n        name: 'commitments',\n        type: 'tuple[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bool',\n        name: 'withConfigs',\n        type: 'bool',\n      },\n    ],\n    name: 'createCommitmentsForRegistration',\n    outputs: [\n      {\n        internalType: 'bytes32[]',\n        name: '',\n        type: 'bytes32[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: '',\n        type: 'uint256[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n    constant: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32[]',\n        name: 'commitments',\n        type: 'bytes32[]',\n      },\n    ],\n    name: 'requestRegistration',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string[]',\n        name: 'names',\n        type: 'string[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'nameLengths',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'completeRegistration',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n    payable: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string[]',\n        name: 'names',\n        type: 'string[]',\n      },\n      {\n        internalType: 'uint256[]',\n        name: 'nameLengths',\n        type: 'uint256[]',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'completeRegistrationWithConfigs',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n    payable: true,\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'getPriceRanges',\n    outputs: [\n      {\n        internalType: 'uint256[]',\n        name: '',\n        type: 'uint256[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n    constant: true,\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { BigNumber, Contract, ethers } from 'ethers';\nimport { Observable, of } from 'rxjs';\nimport {\n  bulkRegistrationMainnet,\n  bulkRegistrationTestnet,\n  generalConfigurations,\n} from 'src/app/configurations';\nimport { ENSBulkRegistrationContractMainnetABI } from 'src/app/configurations/contracts/ens-bulk-registration-mainnet.abi';\nimport { ENSBulkRegistrationContractTestnetABI } from 'src/app/configurations/contracts/ens-bulk-registration-testnet.abi';\nimport { payNoMarketAddress } from 'src/app/models';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport {\n  ENSRegistrationCommitmentModel,\n  ENSRegistrationCommmitmentRequestResultModel,\n} from 'src/app/models/states/ens-registration-interfaces';\nimport { environment } from 'src/environments/environment';\nimport { MiscUtilsService } from '../misc-utils';\nimport { PaymentService } from '../payment';\n\nconst gloalAny: any = global;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegistrationFacilityService {\n  constructor(\n    protected miscUtilsService: MiscUtilsService,\n    protected paymentService: PaymentService\n  ) {}\n\n  registrationDomainsToCommitmentPacket(\n    owner: string,\n    duration: number,\n    secret: string,\n    resolver: string,\n    commitments: ENSDomainMetadataModel[]\n  ) {\n    let compiled = [];\n    for (const c of commitments) {\n      const nc = {\n        name: c.labelName,\n        owner: owner,\n        duration: BigNumber.from(duration),\n        secret: secret,\n        resolver: resolver,\n        data: [],\n        reverseRecord: resolver !== payNoMarketAddress ? true : false,\n        fuses: 0,\n        wrapperExpiry: 0,\n        metadata: c,\n      } as ENSRegistrationCommitmentModel;\n      compiled.push(nc);\n    }\n    return compiled;\n  }\n\n  commitmentPacketToRegistrationDomains(\n    commitments: ENSRegistrationCommitmentModel[]\n  ) {\n    let decompiled = [];\n    for (const c of commitments) {\n      const nc = c.metadata as ENSDomainMetadataModel;\n      decompiled.push(nc);\n    }\n    return decompiled;\n  }\n\n  createRegistrationCommitmentPacket(\n    commitments: ENSRegistrationCommitmentModel[],\n    payer: string,\n    provider\n  ) {\n    const contract = this.getEnsBulkRegistrationContract(provider);\n    const comitmentsPrepared = [];\n    for (const c of commitments) {\n      const nCP = [\n        c.name,\n        c.owner,\n        c.duration,\n        c.secret,\n        c.resolver,\n        c.data,\n        c.reverseRecord,\n        c.fuses,\n        c.wrapperExpiry,\n      ] as any;\n      nCP.name = c.name;\n      nCP.owner = c.owner;\n      nCP.duration = c.duration;\n      nCP.secret = c.secret;\n      nCP.resolver = c.resolver;\n      nCP.data = c.data;\n      nCP.reverseRecord = c.reverseRecord;\n      nCP.fuses = c.fuses;\n      nCP.wrapperExpiry = c.wrapperExpiry;\n      comitmentsPrepared.push(nCP);\n    }\n    const isResolverSet = comitmentsPrepared[0].resolver !== payNoMarketAddress;\n    const duration = comitmentsPrepared[0].duration;\n    let commitmentResult, gasLimit;\n    return new Observable((observer) => {\n      contract\n        .createCommitmentsForRegistration(\n          comitmentsPrepared,\n          duration,\n          isResolverSet\n        )\n        .then((r) => {\n          commitmentResult = r;\n          return this.getGasLimitEstimation(\n            provider,\n            'requestRegistration',\n            [commitmentResult[0]],\n            payer\n          )\n            .toPromise()\n            .catch((e) => {\n              return null;\n            });\n        })\n        .then((r) => {\n          if (\n            r === false ||\n            r === null ||\n            commitmentResult === false ||\n            commitmentResult === null\n          ) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          gasLimit = r as BigNumber;\n          observer.next([\n            {\n              commitments: commitmentResult[0],\n              priceRanges: commitmentResult[1].map((pr) =>\n                pr.mul(generalConfigurations.maxTotalCostBuffer).div(100)\n              ),\n            } as ENSRegistrationCommmitmentRequestResultModel,\n            gasLimit,\n          ]);\n          observer.complete();\n          return;\n        });\n    });\n  }\n\n  createRegistrationRequestPaymentPacket(\n    commitmentsPrepared: string[],\n    provider\n  ) {\n    const contract = this.getEnsBulkRegistrationContract(provider);\n    const dataInput = contract.interface.encodeFunctionData(\n      'requestRegistration',\n      [commitmentsPrepared]\n    );\n    return dataInput;\n  }\n\n  decodeRegistrationPacket(abstractData: string, value: BigNumber) {\n    const contract = this.getEnsBulkRegistrationContract();\n    const dataInput = contract.interface.parseTransaction({\n      data: abstractData,\n      value,\n    });\n    return dataInput;\n  }\n\n  completeRegistration(\n    commitments: ENSRegistrationCommitmentModel[],\n    payer: string,\n    totalCost: string,\n    provider\n  ) {\n    const contract = this.getEnsBulkRegistrationContract(provider);\n    const names = [];\n    const namesLengths = [];\n    const secret = commitments[0].secret;\n    const resolver = commitments[0].resolver;\n    const owner = commitments[0].owner;\n    const duration = commitments[0].duration;\n    for (const c of commitments) {\n      names.push(c.name);\n      namesLengths.push(c.name.length);\n    }\n    const dataMethod =\n      commitments[0].resolver === payNoMarketAddress\n        ? 'completeRegistration'\n        : 'completeRegistrationWithConfigs';\n    const dataParams =\n      commitments[0].resolver === payNoMarketAddress\n        ? [names, namesLengths, owner, duration, secret]\n        : [names, namesLengths, duration, secret, resolver, owner];\n    const dataInput = contract.interface.encodeFunctionData(\n      dataMethod,\n      dataParams\n    );\n    let gasLimit;\n    return new Observable((observer) => {\n      this.getGasLimitEstimation(\n        provider,\n        dataMethod,\n        dataParams,\n        payer,\n        false,\n        totalCost\n      )\n        .toPromise()\n        .then((r) => {\n          if (r === false || r === null) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          gasLimit = (r as BigNumber).add(generalConfigurations.gasLimitBuffer);\n          observer.next([dataInput, gasLimit]);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getEnsBulkRegistrationContract(provider = null) {\n    const c = new Contract(\n      this.bulkRegistrationContractAddress,\n      this.BulkRegistrationContractABI,\n      provider\n    );\n    return c;\n  }\n\n  getGasLimitEstimation(\n    provider = null,\n    method: string,\n    params: any,\n    payer: string,\n    providerFunction = false,\n    value: string = '0x0'\n  ) {\n    const c = new Contract(\n      this.bulkRegistrationContractAddress,\n      this.BulkRegistrationContractABI,\n      provider\n    );\n    return new Observable((observer) => {\n      if (providerFunction === false) {\n        c.estimateGas[method](...params, {\n          value,\n          from: payer,\n        })\n          .then((r) => {\n            if (r === null) {\n              observer.next(false);\n              observer.complete();\n            }\n            observer.next(r);\n            observer.complete();\n          })\n          .catch((e) => {\n            observer.next(false);\n            observer.complete();\n          });\n      } else {\n        provider\n          .estimateGas(params)\n          .then((r) => {\n            if (r === null) {\n              observer.next(false);\n              observer.complete();\n            }\n            observer.next(r);\n            observer.complete();\n          })\n          .catch((e) => {\n            observer.next(false);\n            observer.complete();\n          });\n      }\n    });\n  }\n\n  get BulkRegistrationContractABI() {\n    if (environment.test === true) {\n      return ENSBulkRegistrationContractTestnetABI;\n    }\n    return ENSBulkRegistrationContractMainnetABI;\n  }\n\n  get bulkRegistrationContractAddress() {\n    if (environment.test === true) {\n      return bulkRegistrationTestnet;\n    }\n    return bulkRegistrationMainnet;\n  }\n}\n","export const EnsTestnetABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'ApprovalForAll',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'NewOwner',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n    ],\n    name: 'NewResolver',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'NewTTL',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setRecord',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setSubnodeRecord',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'setSubnodeOwner',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n    ],\n    name: 'setResolver',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'setOwner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setTTL',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'resolver',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'ttl',\n    outputs: [\n      {\n        internalType: 'uint64',\n        name: '',\n        type: 'uint64',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'recordExists',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n    ],\n    name: 'isApprovedForAll',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n","export const EnsABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'ApprovalForAll',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'NewOwner',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n    ],\n    name: 'NewResolver',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'NewTTL',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setRecord',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setSubnodeRecord',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'setSubnodeOwner',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n    ],\n    name: 'setResolver',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n    ],\n    name: 'setOwner',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'uint64',\n        name: 'ttl',\n        type: 'uint64',\n      },\n    ],\n    name: 'setTTL',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'approved',\n        type: 'bool',\n      },\n    ],\n    name: 'setApprovalForAll',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'resolver',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'ttl',\n    outputs: [\n      {\n        internalType: 'uint64',\n        name: '',\n        type: 'uint64',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'recordExists',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'operator',\n        type: 'address',\n      },\n    ],\n    name: 'isApprovedForAll',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n","export const EnsRegistrarControllerTestnetABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'cost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expires',\n        type: 'uint256',\n      },\n    ],\n    name: 'NameRegistered',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'cost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expires',\n        type: 'uint256',\n      },\n    ],\n    name: 'NameRenewed',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'oracle',\n        type: 'address',\n      },\n    ],\n    name: 'NewPriceOracle',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'rentPrice',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n    ],\n    name: 'valid',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n    ],\n    name: 'available',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'makeCommitment',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n    ],\n    name: 'makeCommitmentWithConfig',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'commitment',\n        type: 'bytes32',\n      },\n    ],\n    name: 'commit',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'register',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n    ],\n    name: 'registerWithConfig',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'renew',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n];\n","export const EnsRegistrarControllerABI = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'cost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expires',\n        type: 'uint256',\n      },\n    ],\n    name: 'NameRegistered',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        indexed: true,\n        internalType: 'bytes32',\n        name: 'label',\n        type: 'bytes32',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'cost',\n        type: 'uint256',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'expires',\n        type: 'uint256',\n      },\n    ],\n    name: 'NameRenewed',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'oracle',\n        type: 'address',\n      },\n    ],\n    name: 'NewPriceOracle',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'rentPrice',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n    ],\n    name: 'valid',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n    ],\n    name: 'available',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'makeCommitment',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n    ],\n    name: 'makeCommitmentWithConfig',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'commitment',\n        type: 'bytes32',\n      },\n    ],\n    name: 'commit',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n    ],\n    name: 'register',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'secret',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'address',\n        name: 'resolver',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n    ],\n    name: 'registerWithConfig',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'string',\n        name: 'name',\n        type: 'string',\n      },\n      {\n        internalType: 'uint256',\n        name: 'duration',\n        type: 'uint256',\n      },\n    ],\n    name: 'renew',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Contract, ethers } from 'ethers';\nimport { ENSContracts } from 'src/app/configurations';\nimport { EnsTestnetABI } from 'src/app/configurations/contracts/ens-abi-testnet.model';\nimport { EnsABI } from 'src/app/configurations/contracts/ens-abi.model';\nimport { EnsRegistrarControllerTestnetABI } from 'src/app/configurations/contracts/ens-registrar-controller-abi-testnet.model';\nimport { EnsRegistrarControllerABI } from 'src/app/configurations/contracts/ens-registrar-controller-abi.model';\nimport { payNoMarketAddress } from 'src/app/models';\nimport { ENSEventModel, EnsEventsEnum } from 'src/app/models/ens';\nimport { environment } from 'src/environments/environment';\n\nexport const registrationTopic =\n  '0xca6abbe9d7f11422cb6ca7629fbf6fe9efb1c621f71ce8f02b9f2a230097404f';\nexport const nameRenewedTopicHash =\n  '0x3da24c024582931cfaf8267d8ed24d13a82a8068d5bd337d30ec45cea4e506ae';\nexport const martketSaleTopics = {\n  SEAPORT: '0xc4109843e0b7d514e4c093114b863f8e7d8d9a458c372cd51bfe526b588006c9',\n  RARIBLE: '0x9d9af8e38d66c62e2c12f0225249fd9d721c54b83f48d9352c97c6cacdcb6f31',\n  X2Y2: '0xe2c49856b032c255ae7e325d18109bc4e22a2804e2e49a017ec0f59f19cd447b',\n  LOOKSRARE:\n    '0x95fb6205e23ff6bda16a2d1dba56b9ad7c783f67c96fa149785052f47696f2be',\n};\nexport enum SortableMarkets {\n  SEAPORT = 'SEAPORT',\n  RARIBLE = 'RARIBLE',\n  X2Y2 = 'X2Y2',\n  LOOKSRARE = 'LOOKSrare',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegistrationDataService {\n  constructor() {}\n\n  resolevTxType(relatedNameLabelHash: string, owner: string, tx: any) {\n    const marketTopics = Object.values(martketSaleTopics);\n    const markets = Object.keys(martketSaleTopics);\n    let qualifiedTx = tx.logs.filter((e) => {\n      if (marketTopics.filter((t) => e.topics.includes(t)).length > 0) {\n        return true;\n      }\n      if (\n        e.topics.includes(owner) ||\n        e.topics.includes(relatedNameLabelHash) ||\n        e.topics.includes(ENSContracts.registrarController)\n      ) {\n        return true;\n      }\n      return false;\n    });\n    let resolvedEventType: ENSEventModel[] = [];\n    const labelHashInHex =\n      ethers.BigNumber.from(relatedNameLabelHash).toHexString();\n    const paymentNoAddressBytes =\n      ethers.BigNumber.from(payNoMarketAddress).toHexString();\n    for (const e of qualifiedTx) {\n      const topicNormalised = e.topics.map((x) => {\n        return ethers.BigNumber.from(x).toHexString();\n      });\n      if (marketTopics.includes(topicNormalised[0])) {\n        const whichMarket = markets[marketTopics.indexOf(topicNormalised[0])];\n        const marketBuyer = this.getMarketBuyer(\n          SortableMarkets[whichMarket],\n          e,\n          topicNormalised,\n          tx\n        );\n        const marketSeller = this.getMarketSeller(\n          SortableMarkets[whichMarket],\n          e,\n          topicNormalised,\n          tx\n        );\n        resolvedEventType.push({\n          type: EnsEventsEnum.SALE,\n          from: marketSeller.toLowerCase(),\n          to: marketBuyer.toLowerCase(),\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      } else if (\n        (topicNormalised[1] ===\n          ENSContracts.registrarController.toLowerCase() &&\n          topicNormalised[2] !== paymentNoAddressBytes) ||\n        (topicNormalised[0] === registrationTopic &&\n          topicNormalised[1] === labelHashInHex &&\n          topicNormalised[2] === owner)\n      ) {\n        const registrant = topicNormalised[2];\n        resolvedEventType.push({\n          type: EnsEventsEnum.REGISTRATION,\n          from: ENSContracts.registrarController.toLowerCase(),\n          to: registrant.toLowerCase(),\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      } else if (\n        (topicNormalised[1] === paymentNoAddressBytes &&\n          topicNormalised[2] ===\n            ENSContracts.registrarController.toLowerCase()) ||\n        (topicNormalised[1] === paymentNoAddressBytes &&\n          topicNormalised[2] === owner)\n      ) {\n        resolvedEventType.push({\n          type: EnsEventsEnum.MINT,\n          from: null,\n          to: ENSContracts.registrarController.toLowerCase(),\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      } else if (topicNormalised[2] === paymentNoAddressBytes) {\n        resolvedEventType.push({\n          type: EnsEventsEnum.BURN,\n          from: topicNormalised[1],\n          to: null,\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      } else if (\n        topicNormalised[1] !== ENSContracts.registrarController.toLowerCase() &&\n        topicNormalised[1] !== paymentNoAddressBytes &&\n        topicNormalised[2] !== ENSContracts.registrarController.toLowerCase() &&\n        topicNormalised[2] !== paymentNoAddressBytes &&\n        topicNormalised[1].length === 42 &&\n        topicNormalised[2].length === 42\n      ) {\n        resolvedEventType.push({\n          type: EnsEventsEnum.TRANSFER,\n          from: topicNormalised[1].toLowerCase(),\n          to: topicNormalised[2].toLowerCase(),\n          txHash: tx.transactionHash,\n          value: this.txValueToEther(tx.value),\n          date: tx.timestamp,\n        } as ENSEventModel);\n      }\n    }\n    const uniqueSet = new Set();\n    let filteredEvents = resolvedEventType;\n    if (resolvedEventType.map((re) => re.type).includes(EnsEventsEnum.SALE)) {\n      filteredEvents = resolvedEventType.filter((r) => {\n        if (r.type === EnsEventsEnum.SALE) {\n          return true;\n        }\n        return false;\n      });\n    }\n    return filteredEvents.filter((r) => {\n      const isDuplicate = uniqueSet.has(r.type + r.txHash);\n      uniqueSet.add(r.type + r.txHash);\n      if (isDuplicate === false) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  txValueToEther(value: string) {\n    return parseFloat(\n      ethers.utils.formatEther(ethers.BigNumber.from(value).toString())\n    ).toFixed(5);\n  }\n\n  getMarketBuyer(\n    market: SortableMarkets,\n    eventWholeData: any,\n    event: any,\n    tx: any\n  ) {\n    switch (market) {\n      case SortableMarkets.SEAPORT:\n        {\n          return event[2];\n        }\n        break;\n      case SortableMarkets.LOOKSRARE:\n        {\n          return tx.from;\n        }\n        break;\n      case SortableMarkets.RARIBLE:\n        {\n          return tx.from;\n        }\n        break;\n      case SortableMarkets.X2Y2:\n        {\n          return tx.from;\n        }\n        break;\n    }\n  }\n\n  getMarketSeller(\n    market: SortableMarkets,\n    eventWholeData: any,\n    event: any,\n    tx: any\n  ) {\n    switch (market) {\n      case SortableMarkets.SEAPORT:\n        {\n          return event[1];\n        }\n        break;\n      case SortableMarkets.LOOKSRARE:\n        {\n          return event[2];\n        }\n        break;\n      case SortableMarkets.RARIBLE:\n        {\n          return event[1];\n        }\n        break;\n      case SortableMarkets.X2Y2:\n        {\n          const data = eventWholeData.data.substring(2).match(/.{1,64}/g);\n          return ethers.BigNumber.from('0x' + data[2]).toHexString();\n        }\n        break;\n    }\n  }\n\n  getENSContract(provider) {\n    const contract = new Contract(\n      ENSContracts.registrar,\n      this.ensContractABI,\n      provider\n    );\n    return contract;\n  }\n\n  getENSRegistrarControllerContract(provider) {\n    const contract = new Contract(\n      ENSContracts.registrarController,\n      this.ensRegistrarControllerContractABI,\n      provider\n    );\n    return contract;\n  }\n\n  get ensRegistrarControllerContractABI() {\n    if (environment.test === true) {\n      return EnsRegistrarControllerTestnetABI;\n    }\n    return EnsRegistrarControllerABI;\n  }\n\n  get ensContractABI() {\n    if (environment.test === true) {\n      return EnsTestnetABI;\n    }\n    return EnsABI;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { generalConfigurations } from 'src/app/configurations';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RegistrationServiceService {\n  constructor(protected snackBar: MatSnackBar) {}\n\n  countRegistrations() {\n    const rs = this.loadRegistrationsAndFeed();\n    return rs.length;\n  }\n\n  loadRegistrations() {\n    return localStorage.getItem('canvas-registrations');\n  }\n\n  loadRegistrationsAndFeed() {\n    const sRegistrations = this.loadRegistrations();\n    if (\n      sRegistrations !== null &&\n      sRegistrations !== 'null' &&\n      sRegistrations !== '' &&\n      sRegistrations !== '[]'\n    ) {\n      return JSON.parse(sRegistrations);\n    }\n    return [];\n  }\n\n  saveRegistrations(domainData: ENSDomainMetadataModel) {\n    if (\n      this.loadRegistrationsAndFeed().length >=\n      generalConfigurations.maxDomainsToRegister\n    ) {\n      this.snackBar.open(\n        'Only a maximum of ' +\n          generalConfigurations.maxDomainsToRegister +\n          ' domains can be registered.',\n        'close',\n        {\n          horizontalPosition: 'center',\n          verticalPosition: 'bottom',\n          duration: 15000,\n        }\n      );\n      return;\n    }\n    const registrationsRaw = this.loadRegistrationsAndFeed().reduce(\n      (accumulator, value) => {\n        return { ...accumulator, [value.labelName]: value };\n      },\n      {}\n    );\n    const bKeys = Object.keys(registrationsRaw);\n    const registrations = [...new Set(bKeys)].map((k) => registrationsRaw[k]);\n    registrations.push(domainData);\n    localStorage.setItem('canvas-registrations', JSON.stringify(registrations));\n    return registrations;\n  }\n\n  removeRegistration(\n    registrations: ENSDomainMetadataModel[],\n    domainName: string\n  ) {\n    const registrationsUpdated = [];\n    registrations.filter((d) => {\n      if (d.labelName !== domainName) {\n        registrationsUpdated.push(d);\n      }\n    });\n    localStorage.setItem(\n      'canvas-registrations',\n      JSON.stringify(registrationsUpdated)\n    );\n    return registrationsUpdated;\n  }\n\n  removeAllRegistrations() {\n    return localStorage.setItem('canvas-registrations', '');\n  }\n\n  isDomainOnRegistrationList(\n    registrations: ENSDomainMetadataModel[],\n    domainName: string\n  ) {\n    for (const d of registrations) {\n      if (d.labelName === domainName) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslationService } from './translation.service';\n\n@Pipe({\n  name: 'translate',\n})\nexport class TranslationPipe implements PipeTransform {\n  constructor(public translationService: TranslationService) {}\n  transform(value: any): any {\n    if (!value || value === undefined || value.length <= 0) {\n      return null;\n    }\n    const language = this.translationService.getLanguage();\n    const translations = this.translationService.getTranslation(language);\n    const keysSplit = value.split('.');\n    if (value.indexOf('.') <= -1 && value in translations.default) {\n      return translations.default[value];\n    }\n    let currentKey;\n    for (const key of keysSplit) {\n      if (!currentKey) {\n        if (key in translations.default === false) {\n          return value;\n        }\n        currentKey = translations.default[key];\n      } else {\n        if (key in currentKey === false) {\n          return value;\n        }\n        currentKey = currentKey[key];\n      }\n    }\n    return currentKey;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { generalConfigurations, validTranslations } from '../../configurations';\nimport { ValidLangEnum } from '../../models';\n\ndeclare const navigator: any;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TranslationService {\n  getTranslation(lang: ValidLangEnum) {\n    if (\n      lang in validTranslations === false ||\n      validTranslations[lang] === undefined\n    ) {\n      return validTranslations.en;\n    }\n    return validTranslations[lang];\n  }\n\n  getLanguage() {\n    const savedLanguage = this.loadLanguage();\n    if (\n      savedLanguage !== null &&\n      savedLanguage !== '' &&\n      savedLanguage !== undefined &&\n      savedLanguage in validTranslations === true\n    ) {\n      return savedLanguage;\n    } else if (navigator.language) {\n      return navigator.language.split('-')[0];\n    } else {\n      return generalConfigurations.defaultLanguage;\n    }\n  }\n\n  getLocale() {\n    return navigator.language.length <= 2 ? 'en-US' : navigator.language;\n  }\n\n  getCacheableLanguagekeys(key: string) {\n    const translation = this.getTranslation(this.getLanguage());\n    return translation.default[key];\n  }\n\n  getText(key: string) {\n    const translation = this.getTranslation(this.getLanguage());\n    return translation.default[key];\n  }\n\n  loadLanguage() {\n    return localStorage.getItem('canvas-language');\n  }\n\n  saveLanguage(language: string) {\n    localStorage.setItem('canvas-language', language);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WalletService } from '../wallet';\nimport { UserFacadeService } from '../../store/facades';\nimport { Provider } from '@ethersproject/abstract-provider';\nimport { Observable } from 'rxjs';\nimport { request, gql } from 'graphql-request';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(\n    public userFacade: UserFacadeService,\n    public walletService: WalletService\n  ) {}\n\n  getUserDomains(walletAddress: string) {\n    const url = environment.networks[environment.defaultChain].ensGraphQLAPI;\n    return new Observable((observer) => {\n      const query = gql`\n        { \n          registrations(first: 1000, where: { registrant: \"${walletAddress}\" }) {\n            expiryDate\n            registrationDate\n            domain{\n              createdAt\n              labelName\n              labelhash\n              id\n              events{\n                id\n                blockNumber\n                transactionID\n              }\n            }\n          }\n        }\n      `;\n      request(url, query).then((data) => {\n        observer.next(data);\n        observer.complete();\n      });\n    });\n  }\n\n  getEthAddress(provider: Provider, ethName: string) {\n    return new Observable((observer) => {\n      (provider as any)\n        .resolveName(ethName)\n        .then((r) => {\n          observer.next(r);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getEthName(provider: Provider, walletAddress: string) {\n    return new Observable((observer) => {\n      (provider as any)\n        .lookupAddress(walletAddress)\n        .then((r) => {\n          observer.next(r);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getUserText(provider: Provider, ethName: string, text: string) {\n    return new Observable((observer) => {\n      (provider as any)\n        .getResolver(ethName)\n        .then((resolver) => {\n          return resolver.getText(text);\n        })\n        .then((r) => {\n          observer.next(r);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n\n  getUserContentHash(provider: Provider, ethName: string) {\n    return new Observable((observer) => {\n      (provider as any)\n        .getResolver(ethName)\n        .then((resolver) => {\n          return resolver.getContentHash();\n        })\n        .then((r) => {\n          let web2Link = 'https://';\n          if (r.indexOf('ipfs:') > -1) {\n            web2Link += 'ipfs.io/ipfs/' + r.replace('ipfs://', '');\n          } else if (r.indexOf('ipns:') > -1) {\n            web2Link += 'gateway.ipfs.io/ipns/' + r.replace('ipns://', '');\n          }\n          observer.next(web2Link);\n          observer.complete();\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { providers } from 'ethers';\nimport { RPCProviderModel } from 'src/app/models/rpc/rpc-provider.model';\nimport { ValidRPCProvidersEnum } from 'src/app/models/rpc/valid-rpc-providers.enum';\nimport { environment } from '../../../environments/environment';\nimport { UserModel } from '../../models/states/user-interfaces';\nimport { MetamaskService } from '../metamask';\n\ndeclare const localStorage;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserSessionService {\n  constructor(public metamaskService: MetamaskService) {}\n\n  quitUserSession() {\n    localStorage.removeItem('canvas-user-session');\n    localStorage.removeItem('walletconnect');\n    localStorage.removeItem('WALLETCONNECT_DEEPLINK_CHOICE');\n  }\n\n  saveUserSession(userData: UserModel) {\n    localStorage.setItem('canvas-user-session', JSON.stringify(userData));\n  }\n\n  loadUserSession() {\n    return localStorage.getItem('canvas-user-session');\n  }\n\n  getUserSessionProvider(\n    chainId: number,\n    providerData: RPCProviderModel = null\n  ) {\n    let newProvider;\n    if (providerData === null) {\n      newProvider = this.createAlchemyFrontDefaultProvider(chainId);\n    } else if (providerData.type === ValidRPCProvidersEnum.ALCHEMY) {\n      newProvider = this.createAlchemyFrontProvider(\n        chainId,\n        providerData.secret\n      );\n    } else if (providerData.type === ValidRPCProvidersEnum.INFURA) {\n      newProvider = this.createInfuraFrontProvider(\n        chainId,\n        providerData.id,\n        providerData.secret\n      );\n    } else if (providerData.type === ValidRPCProvidersEnum.CUSTOM) {\n      newProvider = this.createJSONFrontProvider(chainId, providerData.url);\n    }\n    return newProvider;\n  }\n\n  getDefaultChainId() {\n    return environment.networks[environment.defaultChain].chainId;\n  }\n\n  createAlchemyFrontDefaultProvider(chain: number) {\n    return new providers.AlchemyWebSocketProvider(\n      chain,\n      environment.networks[environment.defaultChain].providerKey\n    );\n  }\n\n  createAlchemyFrontProvider(chain: number, secret: string) {\n    return new providers.AlchemyWebSocketProvider(chain, secret);\n  }\n\n  createInfuraFrontProvider(chain: number, id: string, secret: string) {\n    return new providers.InfuraProvider(chain, {\n      projectId: id,\n      projectSecret: secret,\n    });\n  }\n\n  createJSONFrontProvider(chain: number, url: string) {\n    return new providers.JsonRpcProvider(url, chain);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { PagesFacadeService, UserFacadeService } from '../../store/facades';\nimport { MiscUtilsService } from '../misc-utils';\nimport { UserRegistrationModel } from 'src/app/models/states/user-interfaces';\nimport { WalletTypesEnum } from 'src/app/models/states/wallet-interfaces';\nimport WalletConnect from '@walletconnect/client';\nimport QRCodeModal from '@walletconnect/qrcode-modal';\nimport { PagesEnum } from 'src/app/models/states/pages-interfaces';\nimport { UserStoreErrorsEnum } from 'src/app/models/error-enums';\nimport { generalConfigurations } from 'src/app/configurations';\n\nconst globalAny: any = global;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WalletConnectService {\n  constructor(\n    public miscUtils: MiscUtilsService,\n    public userFacadeService: UserFacadeService,\n    public pagesFacade: PagesFacadeService,\n    public userFacade: UserFacadeService,\n    protected ngZone: NgZone\n  ) {\n    const dateNow = new Date().getTime();\n    if (globalAny.walletConnect === undefined) {\n      const connector = new WalletConnect({\n        bridge: 'https://bridge.walletconnect.org',\n        qrcodeModal: QRCodeModal,\n        qrcodeModalOptions: {\n          mobileLinks: generalConfigurations.wallectConnectSupportedWallets,\n          desktopLinks: [],\n        },\n        clientMeta: generalConfigurations.appMeta,\n      });\n      connector.on('connect', (error, payload) => {\n        if (error) {\n          throw error;\n        }\n        const { accounts, chainId } = payload.params[0];\n        const currentChainId = globalAny.chainId;\n        if (currentChainId !== chainId) {\n          this.userFacadeService.removeUser();\n          const wc = globalAny.walletConnect as WalletConnect;\n          wc.killSession();\n          this.userFacade.setErrorState(UserStoreErrorsEnum.CONNECT_ERROR);\n          this.pagesFacade.setNetworkChainCode(parseInt(chainId, 16));\n          return;\n        }\n        this.connect(dateNow, accounts[0]);\n      });\n      connector.on('session_update', (error, payload) => {\n        if (error) {\n          throw error;\n        }\n        const { accounts, chainId } = payload.params[0];\n        const currentChainId = globalAny.chainId;\n        const currentAccount = globalAny.chainAccount;\n        if (\n          currentChainId !== chainId ||\n          currentAccount.walletAddress.toLowerCase() !==\n            accounts[0].toLowerCase()\n        ) {\n          this.userFacadeService.removeUser();\n          const wc = globalAny.walletConnect as WalletConnect;\n          wc.killSession();\n          this.pagesFacade.setNetworkChainCode(parseInt(chainId, 16));\n          this.userFacadeService.removeUser();\n          this.pagesFacade.gotoPageRoute('home', PagesEnum.HOME);\n          return;\n        }\n      });\n      connector.on('disconnect', (error, payload) => {\n        if (error) {\n          throw error;\n        }\n      });\n      globalAny.walletConnect = connector;\n    }\n  }\n\n  createSession() {\n    globalAny.walletConnect.createSession();\n  }\n\n  connect(time: number, account: string) {\n    this.userFacade.registerUser({\n      walletType: WalletTypesEnum.WALLET_CONNECT,\n      address: account,\n    } as UserRegistrationModel);\n  }\n\n  getChainId() {\n    return globalAny.chainId;\n  }\n\n  signPayment(payloadHash: any) {\n    return new Observable((observer) => {\n      globalAny.walletConnect\n        .sendTransaction(payloadHash)\n        .then((tx) => {\n          if (tx === null || tx.length <= 0 || tx === undefined) {\n            observer.next(false);\n            observer.complete();\n            return;\n          }\n          observer.next(tx);\n          observer.complete();\n          return;\n        })\n        .catch((e) => {\n          observer.next(false);\n          observer.complete();\n        });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Wallet, utils } from 'ethers';\nimport { UserFacadeService } from '../../store/facades';\nimport { NonceTypesEnum } from '../../models/states/wallet-interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WalletService {\n  constructor(public userFacade: UserFacadeService, public http: HttpClient) {}\n\n  produceNonce(type: NonceTypesEnum = NonceTypesEnum.TOKEN): string {\n    const nonceLength = type === NonceTypesEnum.TOKEN ? 32 : 15;\n    const charLibrary =\n      '0123456789' +\n      (type === NonceTypesEnum.TOKEN\n        ? 'ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'\n        : '');\n    let nonceString = '';\n    for (let i = 0; i < nonceLength; i++) {\n      const rnum = Math.floor(Math.random() * charLibrary.length);\n      nonceString += charLibrary.substring(rnum, rnum + 1);\n    }\n    return nonceString;\n  }\n\n  checksumEtheruemAddress(address: string) {\n    try {\n      utils.getAddress(address);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  validateWalletAddress(address: string) {\n    if (this.checksumEtheruemAddress(address) === false) {\n      return false;\n    }\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n      return false;\n    } else if (\n      /^(0x)?[0-9a-f]{40}$/.test(address) ||\n      /^(0x)?[0-9A-F]{40}$/.test(address)\n    ) {\n      return true;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSBookmarkStoreErrorsEnum } from '../../models/error-enums';\nexport const AddOneENSBookmark = '[ENSBookmarkState] Add payment.';\nexport const UpdateENSBookmark = '[ENSBookmarkState] Update payment.';\nexport const UpsertOneENSBookmark = '[ENSBookmarkState] Upsert one payment.';\nexport const UpsertManyENSBookmark = '[ENSBookmarkState] Upsert many payment.';\nexport const GetOneENSBookmark = '[ENSBookmarkState] Get one payment.';\nexport const GetAllENSBookmark = '[ENSBookmarkState] Get all payment.';\nexport const RemoveOneENSBookmark = '[ENSBookmarkState] Remove one payment.';\nexport const RemoveManyENSBookmark = '[ENSBookmarkState] Remove many payment.';\nexport const RemoveAllENSBookmark = '[ENSBookmarkState] Remove all payment.';\nexport const SetENSBookmarkError = '[ENSBookmarkState] ENSBookmark error set.';\n\nexport class ENSBookmarkErrorSet implements Action {\n  readonly type = SetENSBookmarkError;\n  constructor(public payload: ENSBookmarkStoreErrorsEnum) {}\n}\n\nexport class ENSBookmarkAddOne implements Action {\n  readonly type = AddOneENSBookmark;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport class ENSBookmarkUpsertOne implements Action {\n  readonly type = UpsertOneENSBookmark;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport class ENSBookmarkUpsertMany implements Action {\n  readonly type = UpsertManyENSBookmark;\n  constructor(public payload: ENSDomainMetadataModel[], public toSave = true) {}\n}\n\nexport class ENSBookmarkGetOne implements Action {\n  readonly type = GetOneENSBookmark;\n  constructor(public payload: string) {}\n}\n\nexport class ENSBookmarkGetAll implements Action {\n  readonly type = GetAllENSBookmark;\n  constructor(public payload: string) {}\n}\n\nexport class ENSBookmarkRemoveOne implements Action {\n  readonly type = RemoveOneENSBookmark;\n  constructor(public payload: string, public toSave = true) {}\n}\n\nexport class ENSBookmarkRemoveMany implements Action {\n  readonly type = RemoveManyENSBookmark;\n  constructor(public payload: string[], public toSave = true) {}\n}\n\nexport class ENSBookmarkRemoveAll implements Action {\n  readonly type = RemoveAllENSBookmark;\n  constructor(public authenticationPin: string, public toSave = true) {}\n}\n\nexport class ENSBookmarkUpdate implements Action {\n  readonly type = UpdateENSBookmark;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport type ENSBookmarkActions =\n  | ENSBookmarkAddOne\n  | ENSBookmarkRemoveOne\n  | ENSBookmarkRemoveMany\n  | ENSBookmarkGetAll\n  | ENSBookmarkGetOne\n  | ENSBookmarkUpsertOne\n  | ENSBookmarkUpsertMany\n  | ENSBookmarkErrorSet\n  | ENSBookmarkRemoveAll\n  | ENSBookmarkUpdate;\n","import { Action } from '@ngrx/store';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSRegistrationStoreErrorsEnum } from '../../models/error-enums';\nexport const AddOneENSRegistration = '[ENSRegistrationState] Add payment.';\nexport const UpdateENSRegistration = '[ENSRegistrationState] Update payment.';\nexport const UpsertOneENSRegistration =\n  '[ENSRegistrationState] Upsert one payment.';\nexport const UpsertManyENSRegistration =\n  '[ENSRegistrationState] Upsert many payment.';\nexport const GetOneENSRegistration = '[ENSRegistrationState] Get one payment.';\nexport const GetAllENSRegistration = '[ENSRegistrationState] Get all payment.';\nexport const RemoveOneENSRegistration =\n  '[ENSRegistrationState] Remove one payment.';\nexport const RemoveManyENSRegistration =\n  '[ENSRegistrationState] Remove many payment.';\nexport const RemoveAllENSRegistration =\n  '[ENSRegistrationState] Remove all payment.';\nexport const SetENSRegistrationError =\n  '[ENSRegistrationState] ENSRegistration error set.';\n\nexport class ENSRegistrationErrorSet implements Action {\n  readonly type = SetENSRegistrationError;\n  constructor(public payload: ENSRegistrationStoreErrorsEnum) {}\n}\n\nexport class ENSRegistrationAddOne implements Action {\n  readonly type = AddOneENSRegistration;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport class ENSRegistrationUpsertOne implements Action {\n  readonly type = UpsertOneENSRegistration;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport class ENSRegistrationUpsertMany implements Action {\n  readonly type = UpsertManyENSRegistration;\n  constructor(public payload: ENSDomainMetadataModel[], public toSave = true) {}\n}\n\nexport class ENSRegistrationGetOne implements Action {\n  readonly type = GetOneENSRegistration;\n  constructor(public payload: string) {}\n}\n\nexport class ENSRegistrationGetAll implements Action {\n  readonly type = GetAllENSRegistration;\n  constructor(public payload: string) {}\n}\n\nexport class ENSRegistrationRemoveOne implements Action {\n  readonly type = RemoveOneENSRegistration;\n  constructor(public payload: string, public toSave = true) {}\n}\n\nexport class ENSRegistrationRemoveMany implements Action {\n  readonly type = RemoveManyENSRegistration;\n  constructor(public payload: string[], public toSave = true) {}\n}\n\nexport class ENSRegistrationRemoveAll implements Action {\n  readonly type = RemoveAllENSRegistration;\n  constructor() {}\n}\n\nexport class ENSRegistrationUpdate implements Action {\n  readonly type = UpdateENSRegistration;\n  constructor(public payload: ENSDomainMetadataModel, public toSave = true) {}\n}\n\nexport type ENSRegistrationActions =\n  | ENSRegistrationAddOne\n  | ENSRegistrationRemoveOne\n  | ENSRegistrationRemoveMany\n  | ENSRegistrationGetAll\n  | ENSRegistrationGetOne\n  | ENSRegistrationUpsertOne\n  | ENSRegistrationUpsertMany\n  | ENSRegistrationErrorSet\n  | ENSRegistrationRemoveAll\n  | ENSRegistrationUpdate;\n","import { Action } from \"@ngrx/store\";\nimport { NavigatorButtonsStateModel } from \"../../models/states/navigator-interfaces\";\n\nexport const SetNavigatorButtonsState =\n  \"[NavigatorButtonsState] New state set.\";\nexport const GetNavigatorButtonsState =\n  \"[NavigatorButtonsState] Latest state retrieved.\";\n\nexport class NavigatorButtonsStateSet implements Action {\n  readonly type = SetNavigatorButtonsState;\n  constructor(public payload: NavigatorButtonsStateModel) {}\n}\n\nexport class NavigatorButtonsStateGet implements Action {\n  readonly type = GetNavigatorButtonsState;\n  constructor() {}\n}\n\nexport type NavigatorButtonActions =\n  | NavigatorButtonsStateSet\n  | NavigatorButtonsStateGet;\n","import { Action } from \"@ngrx/store\";\nimport { NavigatorStateModel } from \"../../models/states/navigator-interfaces\";\n\nexport const SetNavigatorState = \"[NavigatorState] New state set.\";\nexport const SetNavigatorStateDisabledButtons =\n  \"[NavigatorState] Disabled buttons set.\";\nexport const GetNavigatorState = \"[NavigatorState] Latest state retrieved.\";\n\nexport class NavigatorStateSet implements Action {\n  readonly type = SetNavigatorState;\n  constructor(public payload: NavigatorStateModel) {}\n}\n\nexport class NavigatorStateGet implements Action {\n  readonly type = GetNavigatorState;\n  constructor() {}\n}\n\nexport type NavigatorActions = NavigatorStateSet | NavigatorStateGet;\n","import { MatDialogRef } from '@angular/material/dialog';\nimport { Action } from '@ngrx/store';\nimport { IpfsErrorsEnum } from 'src/app/models/error-enums';\nimport { IpfsStatesEnum } from 'src/app/models/ipfs';\nimport { RPCProviderModel } from 'src/app/models/rpc/rpc-provider.model';\nimport {\n  GotoPageRouteActionPayloadModel,\n  PagesStateModel,\n} from '../../models/states/pages-interfaces';\n\nexport const ShowLoadingProgressBarOnLoad = '[PagesState] Spinner dialog set.';\nexport const HideLoadingProgressBarOnLoadFinished =\n  '[PagesState] Spinner dialog unset.';\nexport const SetPagesCriticalError = '[PagesState] critical error set.';\nexport const SetPagesPageSlide = '[PagesState] New page slide set.';\nexport const SetPagesState = '[PagesState] New state set.';\nexport const SetPageIpfsErrors = '[PagesState] ipfs error state set.';\nexport const SetPageIpfsState = '[PagesState] ipfs state set.';\nexport const SetPageChainCode = '[PagesState] chain code set.';\nexport const SetPagesNewPageState = '[PagesState] New state set.';\nexport const SetPagesNetworkState = '[PagesState] New network state set.';\nexport const SetPagesVisibility = '[PagesState] visibility state set.';\nexport const SetRPCProvider = '[PagesState] rpc provider set.';\nexport const SetPagesNetworkStateOffline =\n  '[PagesState] Offline network state procedure invoke.';\nexport const GetPagesState = '[PagesState] Latest state retrieved.';\nexport const GotoPageRoute = '[PagesState] Going to page route.';\n\nexport class PagesSetRPCProvider implements Action {\n  readonly type = SetRPCProvider;\n  constructor(public payload: RPCProviderModel) {}\n}\n\nexport class PagesSetVisibility implements Action {\n  readonly type = SetPagesVisibility;\n  constructor(public payload: boolean) {}\n}\n\nexport class PagesSetCriticalError implements Action {\n  readonly type = SetPagesCriticalError;\n  constructor(public payload: boolean, public redirect = true) {}\n}\n\nexport class PagesSetIpfsError implements Action {\n  readonly type = SetPageIpfsErrors;\n  constructor(public payload: IpfsErrorsEnum) {}\n}\n\nexport class PagesSetIpfsState implements Action {\n  readonly type = SetPageIpfsState;\n  constructor(public payload: IpfsStatesEnum) {}\n}\n\nexport class PagesShowLoadingProgressBarOnLoad implements Action {\n  readonly type = ShowLoadingProgressBarOnLoad;\n  constructor() {}\n}\n\nexport class PagesHideLoadingProgressBarOnLoadFinished implements Action {\n  readonly type = HideLoadingProgressBarOnLoadFinished;\n  constructor() {}\n}\n\nexport class PagesSetChainCode implements Action {\n  readonly type = SetPageChainCode;\n  constructor(public payload: number, public firstTimeSet = false) {}\n}\n\nexport class PagesSetPageSlide implements Action {\n  readonly type = SetPagesPageSlide;\n  constructor(public payload: number) {}\n}\n\nexport class PagesStateSet implements Action {\n  readonly type = SetPagesState;\n  constructor(public payload: PagesStateModel) {}\n}\n\nexport class PagesNewPageStateSet implements Action {\n  readonly type = SetPagesNewPageState;\n  constructor(public payload: PagesStateModel) {}\n}\n\nexport class PagesNetworkStateSet implements Action {\n  readonly type = SetPagesNetworkState;\n  constructor(public payload: PagesStateModel) {}\n}\n\nexport class PagesNetworkOfflineStateInvoke implements Action {\n  readonly type = SetPagesNetworkStateOffline;\n  constructor() {}\n}\n\nexport class PagesStateGet implements Action {\n  readonly type = GetPagesState;\n  constructor() {}\n}\n\nexport class PageGotoRoute implements Action {\n  readonly type = GotoPageRoute;\n  constructor(public payload: GotoPageRouteActionPayloadModel) {}\n}\n\nexport type PagesActions =\n  | PagesSetRPCProvider\n  | PagesSetChainCode\n  | PagesSetIpfsError\n  | PagesSetIpfsState\n  | PagesSetPageSlide\n  | PagesHideLoadingProgressBarOnLoadFinished\n  | PagesShowLoadingProgressBarOnLoad\n  | PagesStateSet\n  | PagesStateGet\n  | PagesNewPageStateSet\n  | PagesNetworkOfflineStateInvoke\n  | PageGotoRoute\n  | PagesNetworkStateSet\n  | PagesSetCriticalError;\n","import { Action } from '@ngrx/store';\nimport { PaymentStoreErrorsEnum } from '../../models/error-enums';\nimport { PaymentModel } from '../../models/states/payment-interfaces/payment.model';\nexport const PaymentCheckFulfilled =\n  '[PaymentState] Payment checking status if fulfilled.';\nexport const PaymentTriggerStatusChecking =\n  '[PaymentState] Payment checking status triggered.';\nexport const CancelledPayment = '[PaymentState] payment cancelled.';\nexport const AddOnePayment = '[PaymentState] Add payment.';\nexport const UpdatePayment = '[PaymentState] Update payment.';\nexport const UpsertOnePayment = '[PaymentState] Upsert one payment.';\nexport const UpsertManyPayment = '[PaymentState] Upsert many payment.';\nexport const GetOnePayment = '[PaymentState] Get one payment.';\nexport const GetAllPayment = '[PaymentState] Get all payment.';\nexport const SetEthUSDRates = '[PaymentState] ETHUSD rate set.';\nexport const RemoveOnePayment = '[PaymentState] Remove one payment.';\nexport const RemoveManyPayment = '[PaymentState] Remove many payment.';\nexport const RemoveAllPayment = '[PaymentState] Remove all payment.';\nexport const ArchiveAllPayment = '[PaymentState] Archive all payment.';\nexport const SetPaymentError = '[PaymentState] Payment error set.';\n\nexport class PaymentCancelled implements Action {\n  readonly type = CancelledPayment;\n  constructor() {}\n}\n\nexport class PaymentArchiveAll implements Action {\n  readonly type = ArchiveAllPayment;\n  constructor() {}\n}\n\nexport class PaymentETHUSDRatesSet implements Action {\n  readonly type = SetEthUSDRates;\n  constructor(public payload: string) {}\n}\n\nexport class PaymentErrorSet implements Action {\n  readonly type = SetPaymentError;\n  constructor(public payload: PaymentStoreErrorsEnum) {}\n}\n\nexport class PaymentAddOne implements Action {\n  readonly type = AddOnePayment;\n  constructor(public payload: PaymentModel) {}\n}\n\nexport class PaymentUpsertOne implements Action {\n  readonly type = UpsertOnePayment;\n  constructor(public payload: PaymentModel) {}\n}\n\nexport class PaymentUpsertMany implements Action {\n  readonly type = UpsertManyPayment;\n  constructor(public payload: PaymentModel[]) {}\n}\n\nexport class PaymentGetOne implements Action {\n  readonly type = GetOnePayment;\n  constructor(public payload: string) {}\n}\n\nexport class PaymentGetAll implements Action {\n  readonly type = GetAllPayment;\n  constructor(public payload: string) {}\n}\n\nexport class PaymentRemoveOne implements Action {\n  readonly type = RemoveOnePayment;\n  constructor(public payload: string) {}\n}\n\nexport class PaymentRemoveMany implements Action {\n  readonly type = RemoveManyPayment;\n  constructor(public payload: string[]) {}\n}\n\nexport class PaymentRemoveAll implements Action {\n  readonly type = RemoveAllPayment;\n  constructor() {}\n}\n\nexport class CheckPaymentFulfilled implements Action {\n  readonly type = PaymentCheckFulfilled;\n  constructor(public payload: PaymentModel) {}\n}\n\nexport class PaymentUpdate implements Action {\n  readonly type = UpdatePayment;\n  constructor(public payload: PaymentModel) {}\n}\n\nexport type PaymentActions =\n  | PaymentCancelled\n  | PaymentAddOne\n  | PaymentRemoveOne\n  | PaymentRemoveMany\n  | PaymentGetAll\n  | PaymentGetOne\n  | PaymentUpsertOne\n  | PaymentUpsertMany\n  | PaymentErrorSet\n  | PaymentRemoveAll\n  | PaymentETHUSDRatesSet\n  | CheckPaymentFulfilled\n  | PaymentUpdate\n  | PaymentArchiveAll;\n","import { Action } from \"@ngrx/store\";\nimport { UserStoreErrorsEnum } from \"../../models/error-enums\";\nimport {\n  UserModel,\n  UserRegistrationModel,\n} from \"../../models/states/user-interfaces\";\n\nexport const SetUserState = \"[UserState] New state set.\";\nexport const SetUserError = \"[UserState] An error has occured.\";\nexport const GetUserState = \"[UserState] Latest state retrieved.\";\nexport const RemoveUserError = \"[UserState] Error removed.\";\nexport const RemoveUserState =\n  \"[UserState] Latest state replaced (with Empty).\";\nexport const RemoveUser = \"[UserState] Latest user replaced (with Empty).\";\nexport const AddUser = \"[UserState] New user added.\";\nexport const UpdateUser = \"[UserState] User updated added.\";\nexport const RegisterUser = \"[UserState] New user registration.\";\n\nexport class UserErrorSet implements Action {\n  readonly type = SetUserError;\n  constructor(public payload: UserStoreErrorsEnum) {}\n}\n\nexport class UserUpdate implements Action {\n  readonly type = UpdateUser;\n  constructor(public payload: UserModel) {}\n}\n\nexport class UserStateSet implements Action {\n  readonly type = SetUserState;\n  constructor(public payload: UserModel) {}\n}\n\nexport class UserStateGet implements Action {\n  readonly type = GetUserState;\n  constructor(public payload: number) {}\n}\n\nexport class UserStateRemove implements Action {\n  readonly type = RemoveUserState;\n  constructor() {}\n}\n\nexport class UserErrorRemove implements Action {\n  readonly type = RemoveUserError;\n  constructor() {}\n}\n\nexport class UserRemove implements Action {\n  readonly type = RemoveUser;\n  constructor() {}\n}\n\nexport class UserRegister implements Action {\n  readonly type = RegisterUser;\n  constructor(public payload: UserRegistrationModel) {}\n}\n\nexport class UserAdd implements Action {\n  readonly type = AddUser;\n  constructor(public payload: UserModel) {}\n}\n\nexport type UserActions =\n  | UserStateSet\n  | UserUpdate\n  | UserErrorSet\n  | UserStateGet\n  | UserStateRemove\n  | UserErrorRemove\n  | UserRemove\n  | UserRegister\n  | UserAdd;\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { getCurrentUserState, getCurrentUser } from '../selectors';\nimport {\n  UserStateSet,\n  UserStateRemove,\n  UserAdd,\n  UserErrorRemove,\n  UserErrorSet,\n  UserUpdate,\n  UserRemove,\n  UserRegister,\n} from '../actions';\nimport {\n  UserModel,\n  UserRegistrationModel,\n  UserStateModel,\n} from '../../models/states/user-interfaces';\nimport { UserStoreErrorsEnum } from '../../models/error-enums';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserFacadeService {\n  userState$: Observable<UserStateModel>;\n  user$: Observable<UserModel>;\n\n  constructor(public store: Store<UserStateModel>) {\n    this.userState$ = this.store.pipe(select(getCurrentUserState));\n    this.user$ = this.store.pipe(select(getCurrentUser));\n  }\n\n  registerUser(userData: UserRegistrationModel) {\n    this.store.dispatch(new UserRegister(userData));\n  }\n\n  newUserState(userState: UserModel) {\n    this.store.dispatch(new UserStateSet(userState));\n  }\n\n  removeUserState() {\n    this.store.dispatch(new UserStateRemove());\n  }\n\n  removeUser() {\n    this.store.dispatch(new UserRemove());\n  }\n\n  removeUserStateError() {\n    this.store.dispatch(new UserErrorRemove());\n  }\n\n  setErrorState(error: UserStoreErrorsEnum) {\n    this.store.dispatch(new UserErrorSet(error));\n  }\n\n  addUser(userAddData: UserModel) {\n    this.store.dispatch(new UserAdd(userAddData));\n  }\n\n  updateUser(userData: UserModel) {\n    this.store.dispatch(new UserUpdate(userData));\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport {\n  PaymentModel,\n  PaymentStateModel,\n} from '../../models/states/payment-interfaces';\nimport {\n  getEthUsdPrice,\n  getPayments,\n  getPaymentState,\n  getPaymentStateError,\n  getPaymentStateLoading,\n  getPendingPayments,\n  selectPayment,\n} from '../selectors';\nimport {\n  PaymentErrorSet,\n  PaymentUpdate,\n  PaymentUpsertOne,\n  PaymentRemoveOne,\n  PaymentRemoveMany,\n  PaymentAddOne,\n  ArchiveAllPayment,\n  PaymentArchiveAll,\n  PaymentETHUSDRatesSet,\n  PaymentRemoveAll,\n} from '../actions';\nimport { PaymentStoreErrorsEnum } from '../../models/error-enums';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentFacadeService {\n  paymentState$: Observable<PaymentStateModel>;\n  pendingPayments$: Observable<PaymentModel[]>;\n  approvablePayments$: Observable<PaymentModel[]>;\n  paymentsStored$: Observable<PaymentModel[]>;\n  paymentsStoreError$: Observable<PaymentStoreErrorsEnum>;\n  paymentsStoreLoading$: Observable<boolean>;\n  ethUsdPrice$: Observable<string>;\n\n  constructor(protected store: Store<PaymentModel>) {\n    this.paymentState$ = this.store.pipe(select(getPaymentState));\n    this.pendingPayments$ = this.store.pipe(select(getPendingPayments));\n    this.paymentsStoreError$ = this.store.pipe(select(getPaymentStateError));\n    this.paymentsStoreLoading$ = this.store.pipe(\n      select(getPaymentStateLoading)\n    );\n    this.ethUsdPrice$ = this.store.pipe(select(getEthUsdPrice));\n  }\n\n  setEthUsdRate(usdRate: string) {\n    this.store.dispatch(new PaymentETHUSDRatesSet(usdRate as string));\n  }\n\n  createPayment(payment: PaymentModel) {\n    this.store.dispatch(new PaymentAddOne(payment));\n  }\n\n  removeAllPayment() {\n    this.store.dispatch(new PaymentRemoveAll());\n  }\n\n  removePayment(payment: PaymentModel) {\n    this.store.dispatch(new PaymentRemoveOne(payment.paymentSerial));\n  }\n\n  removePayments(payments: PaymentModel[]) {\n    this.store.dispatch(\n      new PaymentRemoveMany(payments.map((n) => n.paymentSerial))\n    );\n  }\n\n  archiveAllPayment() {\n    this.store.dispatch(new PaymentArchiveAll());\n  }\n\n  upsertPayment(payment: PaymentModel) {\n    this.store.dispatch(new PaymentUpsertOne(payment));\n  }\n\n  updatePayment(payment: PaymentModel) {\n    this.store.dispatch(new PaymentUpdate(payment));\n  }\n\n  getPayment(paymentId: number) {\n    return this.store.pipe(select(selectPayment(paymentId)));\n  }\n\n  getPayments() {\n    return this.store.pipe(select(getPayments));\n  }\n\n  removePaymentStateError() {\n    this.store.dispatch(new PaymentErrorSet(undefined));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSBookmarkStateModel } from 'src/app/models/states/ens-bookmark-interfaces';\nimport {\n  ENSBookmarkAddOne,\n  ENSBookmarkErrorSet,\n  ENSBookmarkRemoveMany,\n  ENSBookmarkRemoveOne,\n  ENSBookmarkUpdate,\n  ENSBookmarkUpsertOne,\n} from '../actions';\nimport {\n  getENSBookmarks,\n  getENSBookmarkState,\n  selectENSBookmark,\n} from '../selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ENSBookmarkFacadeService {\n  getENSBookmarkState$: Observable<ENSBookmarkStateModel>;\n\n  constructor(public store: Store<ENSBookmarkStateModel>) {\n    this.getENSBookmarkState$ = this.store.pipe(select(getENSBookmarkState));\n  }\n  addBookmark(bookmark: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSBookmarkAddOne(bookmark));\n  }\n\n  removeBookmark(bookmark: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSBookmarkRemoveOne(bookmark.id));\n  }\n\n  removeBookmarks(bookmark: ENSDomainMetadataModel[]) {\n    this.store.dispatch(new ENSBookmarkRemoveMany(bookmark.map((n) => n.id)));\n  }\n\n  upsertBookmark(bookmark: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSBookmarkUpsertOne(bookmark));\n  }\n\n  updateBookmark(bookmark: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSBookmarkUpdate(bookmark));\n  }\n\n  getBookmark(bookmarkId: number) {\n    return this.store.pipe(select(selectENSBookmark(bookmarkId)));\n  }\n\n  getBookmarks() {\n    return this.store.pipe(select(getENSBookmarks));\n  }\n\n  removeBookmarkStateError() {\n    this.store.dispatch(new ENSBookmarkErrorSet(undefined));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSRegistrationStateModel } from 'src/app/models/states/ens-registration-interfaces';\nimport {\n  ENSRegistrationAddOne,\n  ENSRegistrationErrorSet,\n  ENSRegistrationRemoveAll,\n  ENSRegistrationRemoveMany,\n  ENSRegistrationRemoveOne,\n  ENSRegistrationUpdate,\n  ENSRegistrationUpsertOne,\n} from '../actions';\nimport {\n  getENSRegistrations,\n  getENSRegistrationState,\n  selectENSRegistration,\n} from '../selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ENSRegistrationFacadeService {\n  getENSRegistrationState$: Observable<ENSRegistrationStateModel>;\n\n  constructor(public store: Store<ENSRegistrationStateModel>) {\n    this.getENSRegistrationState$ = this.store.pipe(\n      select(getENSRegistrationState)\n    );\n  }\n\n  addRegistration(registration: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSRegistrationAddOne(registration));\n  }\n\n  removeRegistration(registration: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSRegistrationRemoveOne(registration.id));\n  }\n\n  removeRegistrations(registration: ENSDomainMetadataModel[]) {\n    this.store.dispatch(\n      new ENSRegistrationRemoveMany(registration.map((n) => n.id))\n    );\n  }\n\n  removeAllRegistrations() {\n    this.store.dispatch(new ENSRegistrationRemoveAll());\n  }\n\n  upsertRegistration(registration: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSRegistrationUpsertOne(registration));\n  }\n\n  updateRegistration(registration: ENSDomainMetadataModel) {\n    this.store.dispatch(new ENSRegistrationUpdate(registration));\n  }\n\n  getRegistration(registrationId: number) {\n    return this.store.pipe(select(selectENSRegistration(registrationId)));\n  }\n\n  getRegistrations() {\n    return this.store.pipe(select(getENSRegistrations));\n  }\n\n  removeRegistrationStateError() {\n    this.store.dispatch(new ENSRegistrationErrorSet(undefined));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { NavigatorButtonsStateModel } from '../../models/states/navigator-interfaces';\nimport { NavigatorButtonsStateSet } from '../actions';\nimport { initialNavigatorButtonsState } from '../reducers';\nimport { getCurrentNavigatorButtonsState } from '../selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigatorButtonsFacadeService {\n  disabledButtonnavigatorState$: Observable<NavigatorButtonsStateModel>;\n\n  constructor(public store: Store<NavigatorButtonsStateModel>) {\n    this.disabledButtonnavigatorState$ = this.store.pipe(\n      select(getCurrentNavigatorButtonsState)\n    );\n  }\n\n  newNavigatorButtonsState(navigatorState: NavigatorButtonsStateModel) {\n    setTimeout(() => {\n      this.store.dispatch(new NavigatorButtonsStateSet(navigatorState));\n    }, 100);\n  }\n\n  resetNavigatorButtonState() {\n    setTimeout(() => {\n      this.store.dispatch(\n        new NavigatorButtonsStateSet(initialNavigatorButtonsState)\n      );\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { NavigatorStateModel } from '../../models/states/navigator-interfaces';\nimport { NavigatorStateSet } from '../actions';\nimport { initialNavigatorState } from '../reducers';\nimport { getCurrentNavigatorState } from '../selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigatorFacadeService {\n  navigatorState$: Observable<NavigatorStateModel>;\n\n  constructor(public store: Store<NavigatorStateModel>) {\n    this.navigatorState$ = this.store.pipe(select(getCurrentNavigatorState));\n  }\n\n  newNavigatorState(navigatorState: NavigatorStateModel) {\n    setTimeout(() => {\n      this.store.dispatch(new NavigatorStateSet(navigatorState));\n    });\n  }\n\n  resetNavigatorState() {\n    setTimeout(() => {\n      this.store.dispatch(new NavigatorStateSet(initialNavigatorState));\n    });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { NavigatorFacadeService } from './navigator.facades';\nimport { NavigatorButtonsFacadeService } from './navigator-buttons.facades';\nimport {\n  getCriticalErrorState,\n  getCurrentErrorCode,\n  getCurrentPageLoadState,\n  getCurrentPagesState,\n  getCurrentPageVisibility,\n  getIpfsError,\n  getIpfsState,\n} from '../selectors';\nimport {\n  PageGotoRoute,\n  PagesNetworkOfflineStateInvoke,\n  PagesNetworkStateSet,\n  PagesNewPageStateSet,\n  PagesShowLoadingProgressBarOnLoad,\n  PagesHideLoadingProgressBarOnLoadFinished,\n  PagesSetPageSlide,\n  PagesSetChainCode,\n  PagesSetIpfsError,\n  PagesSetIpfsState,\n  PagesSetCriticalError,\n  PagesSetRPCProvider,\n} from '../actions';\nimport {\n  GotoPageRouteActionPayloadModel,\n  PagesEnum,\n  PagesStateModel,\n} from '../../models/states/pages-interfaces';\nimport { MatDialog } from '@angular/material/dialog';\nimport { environment } from '../../../environments/environment';\nimport { IpfsErrorsEnum } from 'src/app/models/error-enums';\nimport { IpfsStatesEnum } from 'src/app/models/ipfs';\nimport { RPCProviderModel } from 'src/app/models/rpc/rpc-provider.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PagesFacadeService {\n  pagesState$: Observable<PagesStateModel>;\n  pagesIpfsState$: Observable<IpfsStatesEnum>;\n  pagesIpfsError$: Observable<IpfsErrorsEnum>;\n  pageErrorCode$: Observable<string>;\n  pageLoadingState$: Observable<boolean>;\n  pageCritiaclError$: Observable<boolean>;\n  pageVisibility$: Observable<boolean>;\n\n  constructor(\n    public router: Router,\n    public store: Store<PagesStateModel>,\n    public navigatorFacade: NavigatorFacadeService,\n    public navigatorButtonFacade: NavigatorButtonsFacadeService,\n    public dialog: MatDialog,\n    public ngZone: NgZone\n  ) {\n    this.pagesState$ = this.store.pipe(select(getCurrentPagesState));\n    this.pageErrorCode$ = this.store.pipe(select(getCurrentErrorCode));\n    this.pagesIpfsState$ = this.store.pipe(select(getIpfsState));\n    this.pagesIpfsError$ = this.store.pipe(select(getIpfsError));\n    this.pageLoadingState$ = this.store.pipe(select(getCurrentPageLoadState));\n    this.pageCritiaclError$ = this.store.pipe(select(getCriticalErrorState));\n    this.pageVisibility$ = this.store.pipe(select(getCurrentPageVisibility));\n  }\n\n  showLoadingProgressBar() {\n    this.store.dispatch(new PagesShowLoadingProgressBarOnLoad());\n  }\n\n  setPageCriticalError(errorOccured: boolean, redirect = true) {\n    this.store.dispatch(new PagesSetCriticalError(errorOccured, redirect));\n  }\n\n  setRpcProvider(providerData: RPCProviderModel) {\n    this.store.dispatch(new PagesSetRPCProvider(providerData));\n  }\n\n  setIpfsError(error: IpfsErrorsEnum) {\n    this.store.dispatch(new PagesSetIpfsError(error));\n  }\n\n  setIpfsState(state: IpfsStatesEnum) {\n    this.store.dispatch(new PagesSetIpfsState(state));\n  }\n\n  hideLoadingProgressBar() {\n    this.store.dispatch(new PagesHideLoadingProgressBarOnLoadFinished());\n  }\n\n  newPagesState(pagesState: PagesStateModel) {\n    this.store.dispatch(new PagesNewPageStateSet(pagesState));\n    this.navigatorFacade.resetNavigatorState();\n  }\n\n  newNetworkState(networkState: PagesStateModel) {\n    this.store.dispatch(new PagesNetworkStateSet(networkState));\n  }\n\n  setNetworkChainCode(chainCode: number, firstTimeSet = false) {\n    this.store.dispatch(new PagesSetChainCode(chainCode, firstTimeSet));\n  }\n\n  setChainCodeByNetworkName(networkName: string, firstTimeSet = false) {\n    const networkData = environment.networks[networkName];\n    const chainCode = networkData.chainId;\n    this.store.dispatch(new PagesSetChainCode(chainCode, firstTimeSet));\n  }\n\n  triggerNetworkOfflineDialog() {\n    this.store.dispatch(new PagesNetworkOfflineStateInvoke());\n  }\n\n  setPageSlide(pageSlide: number) {\n    this.store.dispatch(new PagesSetPageSlide(pageSlide));\n  }\n\n  gotoPageRoute(pageRoute: string, toPageId: PagesEnum) {\n    this.store.dispatch(\n      new PageGotoRoute({\n        route: pageRoute,\n        pageId: toPageId,\n      } as GotoPageRouteActionPayloadModel)\n    );\n    this.navigatorFacade.resetNavigatorState();\n    this.navigatorButtonFacade.resetNavigatorButtonState();\n  }\n}\n","import { NavigatorButtonsStateModel } from \"../../models/states/navigator-interfaces\";\nimport { GetNavigatorButtonsState, SetNavigatorButtonsState } from \"../actions\";\n\nexport const initialNavigatorButtonsState: NavigatorButtonsStateModel = {\n  disabledButtons: undefined,\n};\n\nexport function NavigatorButtonsReducers(\n  state: NavigatorButtonsStateModel = initialNavigatorButtonsState,\n  action: any\n) {\n  switch (action.type) {\n    case SetNavigatorButtonsState: {\n      return action.payload;\n    }\n\n    case GetNavigatorButtonsState: {\n      return state;\n    }\n\n    default:\n      return state;\n  }\n}\n","import { NavigatorStateModel } from \"../../models/states/navigator-interfaces\";\nimport { GetNavigatorState, SetNavigatorState } from \"../actions\";\n\nexport const initialNavigatorState: NavigatorStateModel = {\n  navigatorActiveButtonId: undefined,\n  navigatorData: undefined,\n};\n\nexport function NavigatorReducers(\n  state: NavigatorStateModel = initialNavigatorState,\n  action: any\n) {\n  switch (action.type) {\n    case SetNavigatorState: {\n      return action.payload;\n    }\n\n    case GetNavigatorState: {\n      return state;\n    }\n\n    default:\n      return state;\n  }\n}\n","export enum IpfsStatesEnum {\n  IPFS_READY = 'IPFS.READY',\n  IPFS_INITIALISING = 'IPFS.INITIALISING',\n  IPFS_FINDING = 'IPFS.FINDING_PEERS',\n  IPFS_FAILED = 'IPFS.FAILED',\n  IPFS_PUBLISHING = 'IPFS.PUBLISHING',\n}\n","import { IpfsStatesEnum } from 'src/app/models/ipfs';\nimport { generalConfigurations } from '../../configurations';\nimport { PagesStateModel } from '../../models/states/pages-interfaces';\nimport {\n  GetPagesState,\n  GotoPageRoute,\n  HideLoadingProgressBarOnLoadFinished,\n  SetPageChainCode,\n  SetPageIpfsErrors,\n  SetPageIpfsState,\n  SetPagesCriticalError,\n  SetPagesNewPageState,\n  SetPagesPageSlide,\n  SetPagesState,\n  SetPagesVisibility,\n  SetRPCProvider,\n  ShowLoadingProgressBarOnLoad,\n} from '../actions';\n\nconst initialPagesState: PagesStateModel = {\n  optionalProvider: undefined,\n  pageVisibility: true,\n  criticalErrorOccured: false,\n  currentPageId: generalConfigurations.defaultPage,\n  currentPageSlide: 0,\n  errorCode: undefined,\n  ipfsError: undefined,\n  ipfsReady: IpfsStatesEnum.IPFS_INITIALISING,\n  networkStatus: undefined,\n  networkChainCode: undefined,\n  isPageLoading: false,\n};\n\nexport function PagesReducers(\n  state: PagesStateModel = initialPagesState,\n  action: any\n) {\n  switch (action.type) {\n    case SetPagesState: {\n      const newState = {\n        ...state,\n        currentPageId:\n          'currentPageId' in action.payload\n            ? action.payload.currentPageId\n            : state.currentPageId,\n        networkStatus:\n          'networkStatus' in action.payload\n            ? action.payload.networkStatus\n            : state.networkStatus,\n        networkChainCode:\n          'networkChainCode' in action.payload\n            ? action.payload.networkChainCode\n            : state.networkChainCode,\n        currentPageSlide: state.currentPageSlide,\n        errorCode:\n          'errorCode' in action.payload ? action.payload.errorCode : undefined,\n      };\n      return newState;\n    }\n\n    case SetRPCProvider: {\n      const newState = {\n        ...state,\n        optionalProvider: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPagesVisibility: {\n      const newState = {\n        ...state,\n        pageVisibility: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPagesCriticalError: {\n      const newState = {\n        ...state,\n        criticalErrorOccured: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPageIpfsErrors: {\n      const newState = {\n        ...state,\n        ipfsError: action.payload,\n        ipfsReady: IpfsStatesEnum.IPFS_FAILED,\n      };\n      return newState;\n    }\n\n    case SetPageIpfsState: {\n      const newState = {\n        ...state,\n        ipfsReady: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPagesPageSlide: {\n      const newState = {\n        ...state,\n        currentPageSlide: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPagesNewPageState: {\n      const newState = {\n        ...state,\n        pageId: action.payload.currentPageId,\n        currentPageSlide: state.currentPageSlide,\n      };\n      return newState;\n    }\n\n    case SetPagesPageSlide: {\n      const newState = {\n        ...state,\n        currentPageSlide: action.payload,\n      };\n      return newState;\n    }\n\n    case SetPageChainCode: {\n      const newState = {\n        ...state,\n        networkChainCode: action.payload,\n      };\n      return newState;\n    }\n\n    case ShowLoadingProgressBarOnLoad: {\n      const newState = {\n        ...state,\n        isPageLoading: true,\n      };\n      return newState;\n    }\n\n    case HideLoadingProgressBarOnLoadFinished: {\n      const newState = {\n        ...state,\n        isPageLoading: false,\n      };\n      return newState;\n    }\n\n    case GetPagesState: {\n      return state;\n    }\n\n    case GotoPageRoute: {\n      return {\n        ...state,\n        currentPageId: action.payload.pageId,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { UserModel, UserStateModel } from \"../../models/states/user-interfaces\";\nimport {\n  AddUser,\n  GetUserState,\n  RegisterUser,\n  RemoveUser,\n  RemoveUserError,\n  RemoveUserState,\n  SetUserError,\n  SetUserState,\n  UpdateUser,\n} from \"../actions\";\n\nconst initialUserState: UserStateModel = {\n  error: undefined,\n  loading: false,\n  success: undefined,\n  user: {} as UserModel,\n};\n\nexport function UserReducers(\n  state: UserStateModel = initialUserState,\n  action: any\n) {\n  switch (action.type) {\n    case SetUserError: {\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    }\n\n    case SetUserState: {\n      return {\n        ...state,\n        user: action.payload,\n        loading: false,\n      };\n    }\n\n    case AddUser: {\n      return {\n        ...state,\n        user: action.payload,\n        loading: false,\n      };\n    }\n\n    case UpdateUser: {\n      return {\n        ...state,\n        user: action.payload,\n        loading: false,\n      };\n    }\n\n    case GetUserState: {\n      const newState = {\n        ...state,\n      };\n      return newState;\n    }\n\n    case RemoveUserError: {\n      return {\n        ...state,\n        loading: false,\n        error: undefined,\n      };\n    }\n\n    case RegisterUser: {\n      return {\n        ...state,\n        loading: true,\n        error: undefined,\n      };\n    }\n\n    case RemoveUser: {\n      return {\n        ...state,\n        user: {},\n      };\n    }\n\n    case RemoveUserState: {\n      return initialUserState;\n    }\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport {\n  PaymentModel,\n  PaymentStateModel,\n} from '../../models/states/payment-interfaces';\nimport {\n  UpsertOnePayment,\n  UpsertManyPayment,\n  RemoveOnePayment,\n  RemoveManyPayment,\n  RemoveAllPayment,\n  SetPaymentError,\n  UpdatePayment,\n  AddOnePayment,\n  SetEthUSDRates,\n  ArchiveAllPayment,\n  CancelledPayment,\n} from '../actions';\n\nexport function selectPaymentId(payment: PaymentModel): string {\n  return payment.id;\n}\n\nexport const adapter: EntityAdapter<PaymentModel> =\n  createEntityAdapter<PaymentModel>({\n    selectId: selectPaymentId,\n  });\n\nexport const initialPaymentState: PaymentStateModel = adapter.getInitialState({\n  error: undefined,\n  loading: false,\n  ethUsdPrice: '0.00',\n  paymentCancelled: false,\n});\n\nexport function PaymentReducers(\n  state: PaymentStateModel = initialPaymentState,\n  action: any\n) {\n  switch (action.type) {\n    case UpsertOnePayment:\n    case UpdatePayment: {\n      const stateChange = adapter.upsertOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n        paymentCancelled: false,\n      };\n    }\n\n    case SetEthUSDRates: {\n      return {\n        ...state,\n        ethUsdPrice: action.payload,\n      };\n    }\n\n    case AddOnePayment: {\n      const stateChange = adapter.addOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: true,\n        paymentCancelled: false,\n      };\n    }\n\n    case UpsertManyPayment: {\n      const stateChange = adapter.upsertMany(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n        paymentCancelled: false,\n      };\n    }\n\n    case RemoveOnePayment: {\n      const stateChange = adapter.removeOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n        paymentCancelled: false,\n      };\n    }\n\n    case RemoveManyPayment: {\n      const stateChange = adapter.removeMany(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n        paymentCancelled: false,\n      };\n    }\n\n    case RemoveAllPayment: {\n      const stateChange = adapter.removeAll(state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n        paymentCancelled: false,\n      };\n    }\n\n    case ArchiveAllPayment: {\n      const payments = state.entities;\n      const updatedPayments = [];\n      for (const p of Object.keys(payments)) {\n        updatedPayments.push({ ...payments[p], archived: true });\n      }\n      const stateChange = adapter.upsertMany(updatedPayments, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n        paymentCancelled: false,\n      };\n    }\n\n    case SetPaymentError: {\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n        paymentCancelled: false,\n      };\n    }\n\n    case UpdatePayment: {\n      return {\n        ...state,\n        error: undefined,\n        loading: true,\n        paymentCancelled: false,\n      };\n    }\n\n    case CancelledPayment: {\n      return {\n        ...state,\n        error: undefined,\n        loading: false,\n        paymentCancelled: true,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSRegistrationStateModel } from '../../models/states/ens-registration-interfaces';\nimport {\n  UpsertOneENSRegistration,\n  UpsertManyENSRegistration,\n  RemoveOneENSRegistration,\n  RemoveManyENSRegistration,\n  RemoveAllENSRegistration,\n  SetENSRegistrationError,\n  UpdateENSRegistration,\n  AddOneENSRegistration,\n} from '../actions';\n\nexport function selectENSRegistrationId(\n  registration: ENSDomainMetadataModel\n): string {\n  return registration.id;\n}\n\nexport const ensRegistrationAdapter: EntityAdapter<ENSDomainMetadataModel> =\n  createEntityAdapter<ENSDomainMetadataModel>({\n    selectId: selectENSRegistrationId,\n  });\n\nexport const initialENSRegistrationState: ENSRegistrationStateModel =\n  ensRegistrationAdapter.getInitialState({\n    error: undefined,\n    loading: false,\n  });\n\nexport function ENSRegistrationReducers(\n  state: ENSRegistrationStateModel = initialENSRegistrationState,\n  action: any\n) {\n  switch (action.type) {\n    case UpsertOneENSRegistration:\n    case UpdateENSRegistration: {\n      const stateChange = ensRegistrationAdapter.upsertOne(\n        action.payload,\n        state\n      );\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case AddOneENSRegistration: {\n      const stateChange = ensRegistrationAdapter.addOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    case UpsertManyENSRegistration: {\n      const stateChange = ensRegistrationAdapter.upsertMany(\n        action.payload,\n        state\n      );\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveOneENSRegistration: {\n      const stateChange = ensRegistrationAdapter.removeOne(\n        action.payload,\n        state\n      );\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveManyENSRegistration: {\n      const stateChange = ensRegistrationAdapter.removeMany(\n        action.payload,\n        state\n      );\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveAllENSRegistration: {\n      const stateChange = ensRegistrationAdapter.removeAll(state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case SetENSRegistrationError: {\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    }\n\n    case UpdateENSRegistration: {\n      return {\n        ...state,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSBookmarkStateModel } from '../../models/states/ens-bookmark-interfaces';\nimport {\n  UpsertOneENSBookmark,\n  UpsertManyENSBookmark,\n  RemoveOneENSBookmark,\n  RemoveManyENSBookmark,\n  RemoveAllENSBookmark,\n  SetENSBookmarkError,\n  UpdateENSBookmark,\n  AddOneENSBookmark,\n} from '../actions';\n\nexport function selectENSBookmarkId(bookmark: ENSDomainMetadataModel): string {\n  return bookmark.id;\n}\n\nexport const ensBookmarkAdapter: EntityAdapter<ENSDomainMetadataModel> =\n  createEntityAdapter<ENSDomainMetadataModel>({\n    selectId: selectENSBookmarkId,\n  });\n\nexport const initialENSBookmarkState: ENSBookmarkStateModel =\n  ensBookmarkAdapter.getInitialState({\n    error: undefined,\n    loading: false,\n  });\n\nexport function ENSBookmarkReducers(\n  state: ENSBookmarkStateModel = initialENSBookmarkState,\n  action: any\n) {\n  switch (action.type) {\n    case UpsertOneENSBookmark:\n    case UpdateENSBookmark: {\n      const stateChange = ensBookmarkAdapter.upsertOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case AddOneENSBookmark: {\n      const stateChange = ensBookmarkAdapter.addOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    case UpsertManyENSBookmark: {\n      const stateChange = ensBookmarkAdapter.upsertMany(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveOneENSBookmark: {\n      const stateChange = ensBookmarkAdapter.removeOne(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveManyENSBookmark: {\n      const stateChange = ensBookmarkAdapter.removeMany(action.payload, state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case RemoveAllENSBookmark: {\n      const stateChange = ensBookmarkAdapter.removeAll(state);\n      return {\n        ...state,\n        ids: stateChange.ids,\n        entities: stateChange.entities,\n        error: undefined,\n        loading: false,\n      };\n    }\n\n    case SetENSBookmarkError: {\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    }\n\n    case UpdateENSBookmark: {\n      return {\n        ...state,\n        error: undefined,\n        loading: true,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { NavigatorButtonsStateModel } from \"../../models/states/navigator-interfaces\";\n\nexport const getNavigatorButtonsState =\n  createFeatureSelector<NavigatorButtonsStateModel>(\"NavigatorButtonsState\");\n\nexport const getCurrentNavigatorButtonsState = createSelector(\n  getNavigatorButtonsState,\n  (state: NavigatorButtonsStateModel) => state\n);\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { NavigatorStateModel } from \"../../models/states/navigator-interfaces\";\n\nexport const getNavigatorState =\n  createFeatureSelector<NavigatorStateModel>(\"NavigatorState\");\n\nexport const getCurrentNavigatorState = createSelector(\n  getNavigatorState,\n  (state: NavigatorStateModel) => state\n);\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { PagesStateModel } from '../../models/states/pages-interfaces';\n\nexport const getPagesState =\n  createFeatureSelector<PagesStateModel>('PagesState');\n\nexport const getCurrentPagesState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state\n);\n\nexport const getCurrentNetworkState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.networkStatus\n);\n\nexport const getCurrentPageVisibility = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.pageVisibility\n);\n\nexport const getCurrentNetworkChainId = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.networkChainCode\n);\n\nexport const getCurrentPageLoadState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.isPageLoading\n);\n\nexport const getCriticalErrorState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.criticalErrorOccured\n);\n\nexport const getIpfsState = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.ipfsReady\n);\n\nexport const getIpfsError = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => state.ipfsError\n);\n\nexport const getCurrentErrorCode = createSelector(\n  getPagesState,\n  (state: PagesStateModel) => {\n    if ('errorCode' in state === false) {\n      return undefined;\n    }\n    if (state.errorCode === undefined) {\n      return undefined;\n    }\n    return state.errorCode;\n  }\n);\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\nimport { UserStateModel } from \"../../models/states/user-interfaces\";\n\nexport const getUserState = createFeatureSelector<UserStateModel>(\"UserState\");\nexport const getUser = createSelector(getUserState, (state) => state);\nexport const getCurrentUserState = createSelector(\n  getUserState,\n  (state: UserStateModel) => state\n);\nexport const getCurrentUser = createSelector(\n  getUser,\n  (state: UserStateModel) => state.user\n);\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport {\n  PaymentModel,\n  PaymentStateModel,\n} from '../../models/states/payment-interfaces';\n\nexport const getPaymentStateFull =\n  createFeatureSelector<PaymentStateModel>('PaymentState');\n\nexport const getPaymentState = createSelector(\n  getPaymentStateFull,\n  (state) => state\n);\n\nexport const getEthUsdPrice = createSelector(\n  getPaymentStateFull,\n  (state) => state.ethUsdPrice\n);\n\nexport const getPayments = createSelector(getPaymentStateFull, (state) =>\n  Object.values(state.entities)\n);\n\nexport const getPaymentIds = createSelector(\n  getPaymentStateFull,\n  (state) => state.ids\n);\n\nexport const selectPayment = (id: number) =>\n  createSelector(getPaymentStateFull, (state) => {\n    if ((state.ids as number[]).indexOf(id) <= -1) {\n      return undefined;\n    }\n    return state.entities[id] as PaymentModel;\n  });\n\nexport const getPaymentStateError = createSelector(\n  getPaymentStateFull,\n  (state) => state.error\n);\n\nexport const getPaymentStateLoading = createSelector(\n  getPaymentStateFull,\n  (state) => state.loading\n);\n\nexport const getPendingPayments = createSelector(\n  getPaymentStateFull,\n  (state) => {\n    const pendingPs: PaymentModel[] = [];\n    const ps = Object.values(state.entities) as PaymentModel[];\n    for (const p of ps) {\n      if (p.paymentStatus === false) {\n        pendingPs.push(p);\n      }\n    }\n    if (pendingPs.length <= 0) {\n      return null;\n    }\n    return pendingPs;\n  }\n);\n\nexport const getArchivedPayments = createSelector(\n  getPaymentStateFull,\n  (state) => {\n    const archivedPs: PaymentModel[] = [];\n    const ps = Object.values(state.entities) as PaymentModel[];\n    for (const p of ps) {\n      if (p.archived === true) {\n        archivedPs.push(p);\n      }\n    }\n    if (archivedPs.length <= 0) {\n      return null;\n    }\n    return archivedPs;\n  }\n);\n\nexport const isPaymentDuplicate = (id: string) =>\n  createSelector(getPaymentStateFull, (state) => {\n    if (Object.keys(state.entities).indexOf(id) > -1) {\n      return state.entities[id] as PaymentModel;\n    }\n    return false;\n  });\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSRegistrationStateModel } from '../../models/states/ens-registration-interfaces';\n\nexport const getENSRegistrationStateFull =\n  createFeatureSelector<ENSRegistrationStateModel>('ENSRegistrationState');\n\nexport const getENSRegistrationState = createSelector(\n  getENSRegistrationStateFull,\n  (state) => state\n);\n\nexport const getENSRegistrations = createSelector(\n  getENSRegistrationStateFull,\n  (state) => Object.values(state.entities)\n);\n\nexport const getENSRegistrationIds = createSelector(\n  getENSRegistrationStateFull,\n  (state) => state.ids\n);\n\nexport const selectENSRegistration = (id: number) =>\n  createSelector(getENSRegistrationStateFull, (state) => {\n    if ((state.ids as number[]).indexOf(id) <= -1) {\n      return undefined;\n    }\n    return state.entities[id] as ENSDomainMetadataModel;\n  });\n\nexport const getENSRegistrationStateError = createSelector(\n  getENSRegistrationStateFull,\n  (state) => state.error\n);\n\nexport const getENSRegistrationStateLoading = createSelector(\n  getENSRegistrationStateFull,\n  (state) => state.loading\n);\n\nexport const isENSRegistrationDuplicate = (id: string) =>\n  createSelector(getENSRegistrationStateFull, (state) => {\n    if (Object.keys(state.entities).indexOf(id) > -1) {\n      return state.entities[id] as ENSDomainMetadataModel;\n    }\n    return false;\n  });\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { ENSDomainMetadataModel } from 'src/app/models/canvas';\nimport { ENSBookmarkStateModel } from '../../models/states/ens-bookmark-interfaces';\n\nexport const getENSBookmarkStateFull =\n  createFeatureSelector<ENSBookmarkStateModel>('ENSBookmarkState');\n\nexport const getENSBookmarkState = createSelector(\n  getENSBookmarkStateFull,\n  (state) => state\n);\n\nexport const getENSBookmarks = createSelector(\n  getENSBookmarkStateFull,\n  (state) => Object.values(state.entities)\n);\n\nexport const getENSBookmarkIds = createSelector(\n  getENSBookmarkStateFull,\n  (state) => state.ids\n);\n\nexport const selectENSBookmark = (id: number) =>\n  createSelector(getENSBookmarkStateFull, (state) => {\n    if ((state.ids as number[]).indexOf(id) <= -1) {\n      return undefined;\n    }\n    return state.entities[id] as ENSDomainMetadataModel;\n  });\n\nexport const getENSBookmarkStateError = createSelector(\n  getENSBookmarkStateFull,\n  (state) => state.error\n);\n\nexport const getENSBookmarkStateLoading = createSelector(\n  getENSBookmarkStateFull,\n  (state) => state.loading\n);\n\nexport const isENSBookmarkDuplicate = (id: string) =>\n  createSelector(getENSBookmarkStateFull, (state) => {\n    if (Object.keys(state.entities).indexOf(id) > -1) {\n      return state.entities[id] as ENSDomainMetadataModel;\n    }\n    return false;\n  });\n","<div mat-dialog-content>\n  <ng-container *ngIf=\"data.showSpinner === true\">\n    <app-icon\n      *ngIf=\"data.lightColour === true\"\n      [iconSize]=\"data.spinnerSize\"\n      class=\"cos-padding-3\"\n    >\n      <ng-container *ngIf=\"data.customIcon === ''\"> lspin </ng-container>\n      <ng-container *ngIf=\"data.customIcon !== ''\">\n        {{ data.customIcon }}\n      </ng-container>\n    </app-icon>\n    <!-- *ngIf=\"data.lightColour === false\" -->\n    <app-icon [iconSize]=\"data.spinnerSize\" class=\"cos-padding-3\">\n      <ng-container *ngIf=\"data.customIcon === ''\"> spin </ng-container>\n      <ng-container *ngIf=\"data.customIcon !== ''\">\n        {{ data.customIcon }}\n      </ng-container>\n    </app-icon>\n  </ng-container>\n  <div\n    [ngClass]=\"textAlign\"\n    *ngIf=\"data.titleText !== undefined && data.titleText !== ''\"\n    class=\"cos-margin-1 cos-no-margin-top cos-no-margin-left cos-no-margin-right cos-body-0\"\n  >\n    <b>\n      {{ data.titleText | translate }}\n    </b>\n  </div>\n  <div\n    *ngIf=\"data.titleText === undefined || data.titleText === ''\"\n    [ngClass]=\"textAlign\"\n    class=\"cos-margin-1 cos-no-margin-top cos-no-margin-left cos-no-margin-right\"\n  >\n    {{ data.message | translate }}\n  </div>\n  <div\n    [ngClass]=\"textAlign\"\n    *ngIf=\"data.subText !== ''\"\n    class=\"cos-margin-4 cos-no-margin-top cos-no-margin-left cos-no-margin-right\"\n  >\n    {{ data.subText | translate }}\n  </div>\n</div>\n<div\n  mat-dialog-actions\n  [fxLayoutAlign]=\"data.textAlign === 'center' ? 'center center' : 'end center'\"\n>\n  <button (click)=\"goToLink()\" mat-button class=\"cos-body-4\">\n    <b>\n      {{\n        (data.buttonTitle !== undefined && data.buttonTitle !== \"\"\n          ? data.buttonTitle\n          : \"BUTTON.CLOSE\"\n        ) | translate\n      }}\n    </b>\n  </button>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { PagesEnum } from 'src/app/models/states/pages-interfaces';\nimport { PagesFacadeService } from 'src/app/store/facades';\n\n@Component({\n  selector: 'app-generic-dialog',\n  templateUrl: './generic-dialog.component.html',\n  styleUrls: ['./generic-dialog.component.scss'],\n})\nexport class GenericDialogComponent implements OnInit {\n  overlaysCountOnInit = 0;\n  closedByButton = false;\n\n  constructor(\n    protected router: Router,\n    protected pagesFacadeService: PagesFacadeService,\n    public genericDialogRef: MatDialogRef<GenericDialogComponent>,\n    @Inject(MAT_DIALOG_DATA)\n    public data: {\n      message: string;\n      showSpinner?: boolean;\n      lightColour?: boolean;\n      spinnerSize?: number;\n      customIcon?: string;\n      subText?: string;\n      titleText?: string;\n      textAlign?: string;\n      buttonTitle?: string;\n      buttonLink?: string;\n      buttonLinkPageRef?: PagesEnum;\n      goToOnExit?: string;\n      goToOnExitPage?: PagesEnum;\n    }\n  ) {}\n\n  ngOnInit() {\n    this.genericDialogRef.backdropClick().subscribe(() => {\n      if (this.closedByButton === true) {\n        return;\n      }\n      this.closeDialog();\n    });\n    const overlays = document.getElementsByClassName(\n      'cdk-overlay-dark-backdrop'\n    );\n    const wrappers = document.getElementsByClassName(\n      'cdk-global-overlay-wrapper'\n    );\n    this.overlaysCountOnInit = overlays.length;\n    if (overlays.length > 1) {\n      for (let i = 1; i < overlays.length; i++) {\n        overlays[i].remove();\n      }\n      const attr = document.createAttribute('style');\n      attr.value = 'z-index: 1001 !important;';\n      overlays[0].attributes.setNamedItem(attr);\n      const existingAttr =\n        wrappers[wrappers.length - 1].attributes.getNamedItem('style');\n      const newAttr = document.createAttribute('style');\n      newAttr.value = existingAttr.value + ' z-index: 1001 !important;';\n      wrappers[wrappers.length - 1].attributes.setNamedItem(newAttr);\n      return;\n    }\n  }\n\n  closeDialog() {\n    const overlays = document.getElementsByClassName(\n      'cdk-overlay-dark-backdrop'\n    );\n    const wrappers = document.getElementsByClassName(\n      'cdk-global-overlay-wrapper'\n    );\n    if (this.overlaysCountOnInit > 1) {\n      const attr = document.createAttribute('style');\n      attr.value = 'z-index: 1000 !important;';\n      overlays[0].attributes.setNamedItem(attr);\n      const existingAttr =\n        wrappers[wrappers.length - 1].attributes.getNamedItem('style');\n      const newAttr = document.createAttribute('style');\n      newAttr.value = existingAttr.value + ' z-index: 1001 !important;';\n      wrappers[wrappers.length - 1].attributes.setNamedItem(newAttr);\n      this.genericDialogRef.close();\n      return;\n    }\n    if (this.closedByButton === false && this.data.goToOnExit !== undefined) {\n      this.pagesFacadeService.gotoPageRoute(\n        this.data.goToOnExit,\n        this.data.goToOnExitPage\n      );\n    }\n  }\n\n  goToLink() {\n    this.closedByButton = true;\n    if (this.data.buttonLink !== undefined) {\n      this.pagesFacadeService.gotoPageRoute(\n        this.data.buttonLink,\n        this.data.buttonLinkPageRef\n      );\n    }\n    this.genericDialogRef.close();\n  }\n\n  get textAlign() {\n    if (this.data.textAlign === '') {\n      return '';\n    } else if (this.data.textAlign === 'right') {\n      return 'cos-right-text';\n    } else if (this.data.textAlign === 'center') {\n      return 'cos-center-text';\n    }\n  }\n}\n","import {\n  AfterViewChecked,\n  Component,\n  Input,\n  OnDestroy,\n  ViewChild,\n} from '@angular/core';\nimport { from, interval, of, Subject } from 'rxjs';\nimport { map, switchMap, takeUntil } from 'rxjs/operators';\nimport { infiniteLoopedIcons } from 'src/app/configurations';\nimport { NonceTypesEnum } from 'src/app/models/states/wallet-interfaces';\nimport { IconRegistryService, WalletService } from 'src/app/services';\n\ndeclare const APNG: any;\n\n@Component({\n  selector: 'app-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n})\nexport class IconComponent implements OnDestroy, AfterViewChecked {\n  @Input() iconSize = 24;\n  @ViewChild('icon', { static: false }) icon: any;\n  isVisible = false;\n  setIcon;\n  iconsRegistry;\n  iconAnimation;\n  checkIconSubscription;\n  iconId;\n\n  constructor(\n    public iconRegistryService: IconRegistryService,\n    public walletService: WalletService\n  ) {\n    this.iconsRegistry = this.iconRegistryService.injectCustomIcons();\n    this.iconId = walletService.produceNonce(NonceTypesEnum.SERIAL);\n    const stopCheck: Subject<boolean> = new Subject<boolean>();\n    this.checkIconSubscription = interval(1)\n      .pipe(\n        takeUntil(stopCheck),\n        switchMap((i) => {\n          if (this.icon === undefined) {\n            return of(false);\n          }\n          if (\n            'nativeElement' in this.icon === false ||\n            this.icon.nativeElement.innerText === ''\n          ) {\n            return of(false);\n          }\n          this.setIcon = this.icon.nativeElement.innerText.replaceAll(' ', '');\n          const canvas = document.getElementById(\n            'canvas-icon-' + this.setIcon + this.iconId\n          ) as HTMLCanvasElement;\n          if (canvas === null) {\n            return of(false);\n          }\n          return from(\n            APNG.parseURL('../../../' + this.iconsRegistry[this.setIcon])\n          );\n        }),\n        map((apng: any) => {\n          if (apng === false) {\n            return;\n          }\n          const canvas = document.getElementById(\n            'canvas-icon-' + this.setIcon + this.iconId\n          ) as HTMLCanvasElement;\n          canvas.width = apng.width;\n          canvas.height = apng.height;\n          this.iconAnimation = apng;\n          this.iconAnimation.addContext(canvas.getContext('2d'));\n          this.playIcon();\n          stopCheck.next(false);\n          stopCheck.complete();\n          return;\n        })\n      )\n      .subscribe();\n  }\n\n  playIcon() {\n    this.iconAnimation.play();\n    if (infiniteLoopedIcons.indexOf(this.setIcon) > -1) {\n      return;\n    }\n    setTimeout(() => {\n      this.iconAnimation.rewind();\n    }, this.iconAnimation.frames.length * 25);\n    return;\n  }\n\n  ngAfterViewChecked() {\n    if (this.iconAnimation === undefined && this.icon !== undefined) {\n      return;\n    }\n\n    if (\n      this.isVisible == false &&\n      this.icon.nativeElement.offsetParent != null\n    ) {\n      this.isVisible = true;\n      this.playIcon();\n    } else if (\n      this.isVisible == true &&\n      this.icon.nativeElement.offsetParent == null\n    ) {\n      this.isVisible = false;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.checkIconSubscription) {\n      this.checkIconSubscription.unsubscribe();\n      this.checkIconSubscription = undefined;\n    }\n  }\n}\n","<div #icon style=\"overflow: hidden; width: 0; height: 0\">\n  <ng-content></ng-content>\n</div>\n<div\n  id=\"canvas-icon-container\"\n  class=\"co-icon\"\n  [style.height]=\"iconSize + 'px'\"\n  [style.width]=\"iconSize + 'px'\"\n>\n  <canvas\n    id=\"{{ 'canvas-icon-' + setIcon + iconId }}\"\n    [style.height]=\"iconSize + 'px'\"\n    [style.width]=\"iconSize + 'px'\"\n  >\n  </canvas>\n</div>\n","import { Subject } from \"rxjs\";\n\nexport class BootController {\n  private static instance: BootController;\n  private _reboot: Subject<boolean> = new Subject();\n  private reboot$ = this._reboot.asObservable();\n\n  static getbootControl() {\n    if (!BootController.instance) {\n      BootController.instance = new BootController();\n    }\n    return BootController.instance;\n  }\n\n  public watchReboot() {\n    return this.reboot$;\n  }\n\n  public restart() {\n    this._reboot.next(true);\n  }\n}\n","export const environment = { production: true, development: false, deployed: true, test: false, local: false, chrome: false, defaultChain: 'homestead', baseUrl: 'https://predomain.eth.limo', validChainIds: { '5': 'goerli', '1': 'homestead', }, networks: { goerli: { networkId: 'goerli', networkName: 'Goerli Testnet', chainId: 5, providerKey: '8R44ckgzRQzE9kFCtp7QtGQHU6JcAbdy', ensApp: 'https://app.ens.domains', ensMetadataAPI: 'https://metadata.ens.domains/goerli/0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/', ensGraphQLAPI: 'https://api.thegraph.com/subgraphs/name/ensdomains/ensgoerli', }, homestead: { networkId: 'homestead', networkName: 'Mainnet', chainId: 1, providerKey: '8R44ckgzRQzE9kFCtp7QtGQHU6JcAbdy', ensApp: 'https://app.ens.domains', ensMetadataAPI: 'https://metadata.ens.domains/mainnet/0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85/', ensGraphQLAPI: 'https://api.thegraph.com/subgraphs/name/ensdomains/ens', }, }, };\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NotFoundComponent } from './pages/not-found';\nimport { PathResolveService } from './services';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'bootstrap',\n    pathMatch: 'full',\n  },\n  {\n    path: 'bootstrap',\n    loadChildren: () =>\n      import('./modules/bootstrap.module').then((m) => m.BootstrapModule),\n  },\n  {\n    path: 'home',\n    loadChildren: () =>\n      import('./modules/home.module').then((m) => m.HomeModule),\n  },\n  {\n    path: 'canvas',\n    loadChildren: () =>\n      import('./modules/canvas.module').then((m) => m.CanvasModule),\n  },\n  {\n    path: 'domain/:domain',\n    loadChildren: () =>\n      import('./modules/domain.module').then((m) => m.DomainModule),\n  },\n  {\n    path: 'profile/:user',\n    loadChildren: () =>\n      import('./modules/profile.module').then((m) => m.ProfileModule),\n  },\n  {\n    path: 'checkout',\n    loadChildren: () =>\n      import('./modules/checkout.module').then((m) => m.CheckoutModule),\n  },\n  {\n    path: 'checkout/:serial',\n    loadChildren: () =>\n      import('./modules/checkout.module').then((m) => m.CheckoutModule),\n  },\n  {\n    path: '**',\n    resolve: {\n      path: PathResolveService,\n    },\n    loadChildren: () =>\n      import('./modules/not-found.module').then((m) => m.NotFoundModule),\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","export enum NetworkStatusEnum {\n\tOFFLINE,\n\tONLINE,\n}\n","<div\n  *ngIf=\"(pageLoadingState | async) === true\"\n  class=\"co-progress-bar cos-fluid-width cos-pos-fixed cos-pos-top-reset\"\n>\n  <mat-progress-bar\n    class=\"cos-main-progress-bar\"\n    mode=\"indeterminate\"\n    [value]=\"0\"\n  ></mat-progress-bar>\n</div>\n<div [style.height]=\"getHeight()\">\n  <router-outlet> </router-outlet>\n</div>\n<div\n  class=\"co-version cos-pos-fixed cos-pos-bottom-reset cos-pos-right-reset cos-body-7 cos-gray-text cos-padding-1\"\n>\n  v0.5.3\n</div>\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  HostListener,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport { MatTab } from '@angular/material/tabs';\nimport { Router } from '@angular/router';\nimport { PagesFacadeService } from './store/facades/pages.facades';\nimport { NetworkStatusEnum } from './models/states/pages-interfaces/network-status.enum';\nimport { IconRegistryService, UserSessionService } from './services';\nimport { of } from 'rxjs';\n\nconst globalAny: any = global;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('navigation', { static: true }) navigation: MatTab;\n\n  @HostListener('window:online', ['$event'])\n  onNetworkOnline(target) {\n    this.pagesFacade.newNetworkState({\n      networkStatus: NetworkStatusEnum.ONLINE,\n    });\n  }\n\n  @HostListener('window:offline', ['$event'])\n  onNetworkOffline(target) {\n    this.pagesFacade.newNetworkState({\n      networkStatus: NetworkStatusEnum.OFFLINE,\n    });\n  }\n\n  constructor(\n    protected router: Router,\n    protected userSessionService: UserSessionService,\n    protected iconsRegistryService: IconRegistryService,\n    protected pagesFacade: PagesFacadeService\n  ) {}\n\n  ngOnInit() {\n    const cId = this.userSessionService.getDefaultChainId();\n    this.iconsRegistryService.perloadCustomIcons();\n    this.pagesFacade.setNetworkChainCode(cId, false);\n  }\n\n  ngOnDestroy() {}\n\n  ngAfterViewInit() {\n    if (navigator.onLine === true) {\n      this.pagesFacade.newNetworkState({\n        networkStatus: NetworkStatusEnum.ONLINE,\n      });\n    } else {\n      this.pagesFacade.newNetworkState({\n        networkStatus: NetworkStatusEnum.OFFLINE,\n      });\n    }\n  }\n\n  getHeight() {\n    return window.innerHeight + 'px';\n  }\n\n  get pageLoadingState() {\n    if (this.pagesFacade === undefined) {\n      return of(true);\n    }\n    return this.pagesFacade.pageLoadingState$;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Actions } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { NavigatorStateModel } from '../../models/states/navigator-interfaces';\n\n@Injectable()\nexport class NavigatorEffects {\n  constructor(\n    private actions$: Actions,\n    public store: Store<NavigatorStateModel>\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { RPCProviderModel } from 'src/app/models/rpc/rpc-provider.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RpcService {\n  constructor() {}\n\n  loadRpc() {\n    return localStorage.getItem('canvas-rpc');\n  }\n\n  saveRpc(rpcData: RPCProviderModel) {\n    localStorage.setItem('canvas-rpc', JSON.stringify(rpcData));\n  }\n\n  removeRPC() {\n    localStorage.removeItem('canvas-rpc');\n  }\n}\n","import { of } from 'rxjs';\nimport { select, Store } from '@ngrx/store';\nimport { Injectable, NgZone } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n  Actions,\n  createEffect,\n  ofType,\n  ROOT_EFFECTS_INIT,\n} from '@ngrx/effects';\nimport {\n  Router,\n  ActivatedRoute,\n  NavigationStart,\n  NavigationEnd,\n  NavigationError,\n} from '@angular/router';\nimport {\n  GotoPageRoute,\n  PageGotoRoute,\n  PagesNetworkOfflineStateInvoke,\n  PagesNetworkStateSet,\n  PagesSetChainCode,\n  PagesSetCriticalError,\n  PagesSetRPCProvider,\n  PagesSetVisibility,\n  SetPageChainCode,\n  SetPagesCriticalError,\n  SetPagesNetworkState,\n  SetPagesNetworkStateOffline,\n  SetRPCProvider,\n  UserRemove,\n} from '../actions';\nimport { getCurrentPagesState, getCurrentUser } from '../selectors';\nimport {\n  NetworkStatusEnum,\n  PagesStateModel,\n} from '../../models/states/pages-interfaces';\nimport { BootController } from '../../../boot-control';\nimport { PagesFacadeService } from '../facades';\nimport { GenericDialogComponent } from '../../widgets/generic-dialog';\nimport { environment } from '../../../environments/environment';\nimport { UserService, UserSessionService } from '../../services';\nimport {\n  catchError,\n  delay,\n  filter,\n  map,\n  switchMap,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { ValidRPCProvidersEnum } from 'src/app/models/rpc/valid-rpc-providers.enum';\nimport { RPCProviderModel } from 'src/app/models/rpc/rpc-provider.model';\nimport { RpcService } from 'src/app/services/rpc';\n\nconst globalAny: any = global;\n\n@Injectable()\nexport class PagesEffects {\n  constructor(\n    protected actions$: Actions,\n    protected route: Router,\n    protected activatedRoute: ActivatedRoute,\n    protected store: Store<PagesStateModel>,\n    protected userSessionService: UserSessionService,\n    protected pagesFacade: PagesFacadeService,\n    protected userService: UserService,\n    protected rpcService: RpcService,\n    public dialog: MatDialog,\n    public ngZone: NgZone\n  ) {\n    document.addEventListener(\n      'visibilitychange',\n      () => {\n        if (document.hidden) {\n          this.store.dispatch(new PagesSetVisibility(false));\n        } else {\n          this.store.dispatch(new PagesSetVisibility(true));\n        }\n      },\n      false\n    );\n  }\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        switchMap((p) => {\n          return this.route.events.pipe(\n            takeUntil(\n              this.ngZone.runOutsideAngular(() => {\n                return BootController.getbootControl().watchReboot();\n              })\n            )\n          );\n        }),\n        map((e: any) => {\n          if (e instanceof NavigationStart) {\n            if ((e as NavigationStart).url !== '/') {\n              this.pagesFacade.showLoadingProgressBar();\n            }\n          }\n          if (e instanceof NavigationEnd) {\n            setTimeout(() => {\n              this.pagesFacade.hideLoadingProgressBar();\n            }, 1500);\n          }\n          if (e instanceof NavigationError) {\n            setTimeout(() => {\n              this.pagesFacade.hideLoadingProgressBar();\n            }, 1500);\n          }\n          const chainId =\n            environment.networks[environment.defaultChain].chainId;\n          this.assessProviderChanges(chainId);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  provideRPCSet$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PagesSetRPCProvider>(SetRPCProvider),\n        map((action) => {\n          const chainId =\n            environment.networks[environment.defaultChain].chainId;\n          if (action.payload === undefined) {\n            this.createProvider(chainId);\n            this.rpcService.removeRPC();\n            return;\n          }\n          this.createProvider(chainId, action.payload);\n          this.rpcService.saveRpc(action.payload);\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  networkStatus$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PagesNetworkStateSet>(SetPagesNetworkState),\n        map((networkState) => {\n          if (\n            networkState.payload.networkStatus === NetworkStatusEnum.OFFLINE\n          ) {\n            this.store.dispatch(new PagesNetworkOfflineStateInvoke());\n          }\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  networkStatusOffline$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PagesNetworkOfflineStateInvoke>(SetPagesNetworkStateOffline),\n        withLatestFrom(this.store.pipe(select(getCurrentPagesState)) as any),\n        map((networkAndPageState) => {\n          const [network, pageState] = networkAndPageState;\n          if (this.dialog.openDialogs.length > 0) {\n            return;\n          }\n          return;\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  networkChangedId$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PagesSetChainCode>(SetPageChainCode),\n        withLatestFrom(\n          this.store.pipe(select(getCurrentPagesState)),\n          this.store.pipe(select(getCurrentUser))\n        ),\n        delay(250),\n        map((networkAndPageState) => {\n          const [action, pageState, userData] = networkAndPageState;\n          if (\n            action.payload === undefined ||\n            action.payload in environment.validChainIds === false ||\n            action.payload !==\n              environment.networks[environment.defaultChain].chainId\n          ) {\n            this.ngZone.run(() => {\n              const dialogRef = this.dialog.open(GenericDialogComponent, {\n                data: {\n                  message: 'GENERIC.NETWORK_CHANGED_INCOMPATIBLE',\n                },\n                panelClass: 'cos-generic-dialog',\n              });\n            });\n            this.store.dispatch(new UserRemove());\n            return;\n          }\n          this.assessProviderChanges(action.payload);\n          return;\n        })\n      ),\n    { dispatch: false }\n  );\n\n  pageCriticalError$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PagesSetCriticalError>(SetPagesCriticalError),\n        filter((action) => action.redirect === true),\n        map((action) => {\n          this.route.navigateByUrl('not-found');\n          return;\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  gotoPageRoute$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PageGotoRoute>(GotoPageRoute),\n        map((route) => {\n          if (route.payload.route !== 'not-found') {\n            this.pagesFacade.setPageCriticalError(false, false);\n          }\n          this.route.navigateByUrl(route.payload.route);\n          return;\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  createProvider(chainId: number, providerData: RPCProviderModel = null) {\n    const newProvider = this.userSessionService.getUserSessionProvider(\n      chainId,\n      providerData\n    );\n    globalAny.chainId = chainId;\n    globalAny.canvasProvider = newProvider;\n  }\n\n  assessProviderChanges(chainId: number) {\n    const providerData = this.rpcService.loadRpc();\n    if (\n      (providerData === null || providerData === undefined) &&\n      globalAny.canvasProvider === undefined\n    ) {\n      this.createProvider(chainId);\n    } else {\n      this.store.dispatch(new PagesSetRPCProvider(JSON.parse(providerData)));\n    }\n  }\n}\n","import { of } from 'rxjs';\nimport { Injectable, NgZone } from '@angular/core';\nimport {\n  Actions,\n  ofType,\n  ROOT_EFFECTS_INIT,\n  createEffect,\n} from '@ngrx/effects';\nimport { map, switchMap, catchError, delay } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\nimport {\n  TranslationService,\n  TrezorService,\n  UserService,\n  UserSessionService,\n} from '../../services';\nimport {\n  RegisterUser,\n  RemoveUser,\n  UserAdd,\n  UserErrorSet,\n  UserRegister,\n  UserRemove,\n} from '../actions';\nimport { UserModel } from '../../models/states/user-interfaces';\nimport { UserStoreErrorsEnum } from '../../models/error-enums';\nimport { MatDialog } from '@angular/material/dialog';\nimport { WalletTypesEnum } from '../../models/states/wallet-interfaces';\nimport { MetamaskService } from '../../services/metamask/metamask.service';\nimport { LedgerService } from '../../services/ledger/ledger.service';\nimport { GenericDialogComponent } from '../../widgets/generic-dialog';\n\nconst globalAny: any = global;\n\n@Injectable()\nexport class UserEffects {\n  constructor(\n    private actions$: Actions,\n    public route: Router,\n    public userService: UserService,\n    public translationService: TranslationService,\n    public userSessionService: UserSessionService,\n    public metamaskService: MetamaskService,\n    public trezorService: TrezorService,\n    public ledgerService: LedgerService,\n    public store: Store<UserModel>,\n    public ngZone: NgZone,\n    public dialog: MatDialog\n  ) {}\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        map((r) => {\n          const timeNow = new Date().getTime();\n          const userSessionStored = this.userSessionService.loadUserSession();\n          if (userSessionStored === undefined || userSessionStored === null) {\n            return;\n          }\n          const userData = JSON.parse(userSessionStored) as UserModel;\n          const defaultChainId = this.userSessionService.getDefaultChainId();\n          if (userData.connectType === WalletTypesEnum.METAMASK) {\n            this.metamaskService.chainChangedDetectionDaemon();\n          }\n          if (\n            userData.connectType === WalletTypesEnum.METAMASK &&\n            this.metamaskService.getChainId() != defaultChainId\n          ) {\n            const dialogRef = this.dialog.open(GenericDialogComponent, {\n              data: {\n                message: 'GENERIC.NETWORK_CHANGED_INCOMPATIBLE',\n              },\n              panelClass: 'cos-generic-dialog',\n            });\n            this.store.dispatch(new UserRemove());\n            return;\n          }\n          this.store.dispatch(\n            new UserAdd(JSON.parse(userSessionStored as string))\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  userRemove$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<UserRemove>(RemoveUser),\n        map((action) => {\n          this.userSessionService.quitUserSession();\n        })\n      ),\n    { dispatch: false }\n  );\n\n  userRegister$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<UserRegister>(RegisterUser),\n        delay(1000),\n        switchMap((action) => {\n          const timeNow = new Date().getTime();\n          const defaultChainId = this.userSessionService.getDefaultChainId();\n          if (\n            action.payload.walletType === WalletTypesEnum.METAMASK &&\n            this.metamaskService.getChainId() != defaultChainId\n          ) {\n            this.store.dispatch(new UserRemove());\n            return of(false);\n          }\n          switch (action.payload.walletType) {\n            case WalletTypesEnum.WALLET_CONNECT:\n              {\n                return of([\n                  timeNow,\n                  action.payload.address,\n                  action.payload.walletType,\n                ]);\n              }\n              break;\n            case WalletTypesEnum.METAMASK:\n              {\n                return this.metamaskService.connect(timeNow).pipe(\n                  switchMap((r: any) => {\n                    if (r === false) {\n                      return of(false);\n                    }\n                    return of([timeNow, r, action.payload.walletType]);\n                  })\n                );\n              }\n              break;\n            case WalletTypesEnum.TREZOR:\n              {\n                return this.trezorService.connect(timeNow).pipe(\n                  switchMap((r: any) => {\n                    if (r === false) {\n                      return of(false);\n                    }\n                    return of([timeNow, r, action.payload.walletType]);\n                  })\n                );\n              }\n              break;\n            case WalletTypesEnum.LEDGER:\n              {\n                return this.ledgerService.connect(timeNow).pipe(\n                  switchMap((r: any) => {\n                    if (r === false) {\n                      return of(false);\n                    }\n                    return of([timeNow, r, action.payload.walletType]);\n                  })\n                );\n              }\n              break;\n          }\n        }),\n        map((r: any) => {\n          if (r === false) {\n            this.store.dispatch(\n              new UserErrorSet(UserStoreErrorsEnum.CONNECT_ERROR)\n            );\n            return;\n          }\n          const [timestamp, address, walletType] = r;\n          const userSession = {\n            connectSignature: undefined,\n            timestamp: timestamp,\n            walletAddress: address,\n            originalConnectAddress: address,\n            deviceLanguage: navigator.language || 'en-US',\n            connectType: walletType,\n          } as UserModel;\n          globalAny.chainAccount = userSession;\n          this.store.dispatch(new UserAdd(userSession));\n          if (walletType === WalletTypesEnum.METAMASK) {\n            this.metamaskService.chainChangedDetectionDaemon();\n          }\n          this.userSessionService.saveUserSession(userSession);\n          return;\n        }),\n        catchError((error) => {\n          return of(false);\n        })\n      ),\n    { dispatch: false }\n  );\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  Actions,\n  createEffect,\n  ofType,\n  ROOT_EFFECTS_INIT,\n} from '@ngrx/effects';\nimport {\n  CurrencyExchangeService,\n  CurrencyService,\n  LedgerService,\n  MiscUtilsService,\n  PaymentEffectsService,\n  PaymentErrorService,\n  PaymentService,\n  PaymentStorageService,\n  TranslationService,\n  TrezorService,\n  UserService,\n  WalletService,\n} from '../../services';\nimport {\n  PaymentErrorCodes,\n  PaymentModel,\n  PaymentStateModel,\n  PaymentTypesEnum,\n} from '../../models/states/payment-interfaces';\nimport { PagesFacadeService, UserFacadeService } from '../facades';\nimport { MetamaskService } from '../../services/metamask';\nimport {\n  AddOnePayment,\n  ArchiveAllPayment,\n  CheckPaymentFulfilled,\n  PaymentAddOne,\n  PaymentArchiveAll,\n  PaymentCancelled,\n  PaymentCheckFulfilled,\n  PaymentRemoveAll,\n  PaymentRemoveOne,\n  PaymentUpsertMany,\n  PaymentUpsertOne,\n  RemoveAllPayment,\n  UpsertOnePayment,\n} from '../actions';\nimport {\n  catchError,\n  map,\n  mergeMap,\n  switchMap,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { from, interval, of, Subject } from 'rxjs';\nimport {\n  getCurrentNetworkChainId,\n  getCurrentUser,\n  getPayments,\n} from '../selectors';\nimport { WalletTypesEnum } from 'src/app/models/states/wallet-interfaces';\nimport { BigNumber, utils } from 'ethers';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { generalConfigurations } from 'src/app/configurations';\nimport { WalletConnectService } from 'src/app/services/wallet-connect';\nimport { getTransactionByNonce } from 'find-replacement-tx';\n\nconst globalAny: any = global;\n\n@Injectable()\nexport class PaymentEffects {\n  staticPaymentTranslatedTexts;\n  staticGenericTranslatedTexts;\n  constructor(\n    private actions$: Actions,\n    protected paymentService: PaymentService,\n    protected walletService: WalletService,\n    protected userService: UserService,\n    protected pagesFacade: PagesFacadeService,\n    protected paymentErrorService: PaymentErrorService,\n    protected userFacadeService: UserFacadeService,\n    protected store: Store<PaymentStateModel>,\n    protected translationService: TranslationService,\n    protected currencyService: CurrencyService,\n    protected currencyExchangeService: CurrencyExchangeService,\n    protected metamaskService: MetamaskService,\n    protected walletConnectService: WalletConnectService,\n    protected trezorService: TrezorService,\n    protected paymentStorageService: PaymentStorageService,\n    protected ledgerService: LedgerService,\n    protected miscUtils: MiscUtilsService,\n    protected snackBar: MatSnackBar,\n    protected paymentEffectsService: PaymentEffectsService,\n    protected ngZone: NgZone\n  ) {\n    this.staticPaymentTranslatedTexts =\n      this.translationService.getCacheableLanguagekeys('PAYMENT');\n    this.staticGenericTranslatedTexts =\n      this.translationService.getCacheableLanguagekeys('GENERIC');\n  }\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        switchMap((r) => {\n          const payments = this.paymentStorageService.loadPayments();\n          if (payments !== false) {\n            this.store.dispatch(\n              new PaymentUpsertMany(payments as any as PaymentModel[])\n            );\n          }\n          if (payments === false || payments === null || payments.length <= 0) {\n            return this.currencyExchangeService.getPrices();\n          }\n          for (const p of payments) {\n            if (\n              p.paymentHash !== null &&\n              p.paymentHash !== '' &&\n              p.paymentStatus === false\n            ) {\n              this.store.dispatch(new CheckPaymentFulfilled(p));\n            }\n          }\n          return this.currencyExchangeService.getPrices();\n        })\n      ),\n    { dispatch: false }\n  );\n\n  addPayment$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PaymentAddOne>(AddOnePayment),\n        withLatestFrom(\n          this.store.pipe(select(getPayments)),\n          this.store.pipe(select(getCurrentUser)),\n          this.store.pipe(select(getCurrentNetworkChainId))\n        ),\n        switchMap(([action, payments, user, chainId]: any[]) => {\n          const provider = globalAny.canvasProvider;\n          return this.paymentService.getGasPrice(provider).pipe(\n            switchMap((gasPrice) => {\n              return of([action, user, provider, chainId, gasPrice]);\n            })\n          );\n        }),\n        switchMap(([action, user, provider, chainId, gasPrice]: any[]) => {\n          return this.paymentService\n            .getWalletNonce(provider, user.walletAddress)\n            .pipe(\n              switchMap((nonce) => {\n                return of([action, user, provider, chainId, gasPrice, nonce]);\n              })\n            );\n        }),\n        switchMap(\n          ([action, user, provider, chainId, gasPrice, nonce]: any[]) => {\n            const preparedTx = this.paymentService.prepareTransaction(\n              chainId,\n              nonce,\n              action.payload.paymentMarketAddress,\n              action.payload.paymentGasLimit,\n              gasPrice.gasPrice,\n              action.payload\n            );\n            this.snackBar.open(\n              this.staticGenericTranslatedTexts.PENDING_TRANSACTION_CERATED,\n              'close',\n              {\n                horizontalPosition: 'center',\n                verticalPosition: 'bottom',\n                duration: 5000,\n              }\n            );\n            if (user.connectType === WalletTypesEnum.LEDGER) {\n              const txHex = utils.serializeTransaction(preparedTx);\n              return this.ledgerService.signPayment(txHex).pipe(\n                switchMap((signed: any) => {\n                  const signedPacked = utils.serializeTransaction(preparedTx, {\n                    v: BigNumber.from('0x' + signed.v).toNumber(),\n                    r: '0x' + signed.r,\n                    s: '0x' + signed.s,\n                  });\n                  return from(provider.sendTransaction(signedPacked));\n                }),\n                switchMap((r) => {\n                  return of([action, r, nonce]);\n                })\n              );\n            }\n            if (user.connectType === WalletTypesEnum.WALLET_CONNECT) {\n              const txToFilter = {\n                ...preparedTx,\n                from: user.walletAddress,\n              };\n              delete txToFilter.gasPrice;\n              delete txToFilter.nonce;\n              return this.walletConnectService.signPayment(txToFilter).pipe(\n                switchMap((r) => {\n                  return of([action, r, nonce]);\n                })\n              );\n            }\n            if (user.connectType === WalletTypesEnum.METAMASK) {\n              const txToFilter = {\n                ...preparedTx,\n                from: user.walletAddress,\n              };\n              delete txToFilter.gasPrice;\n              delete txToFilter.nonce;\n              return this.metamaskService.signPayment([txToFilter]).pipe(\n                switchMap((r) => {\n                  return of([action, r, nonce]);\n                })\n              );\n            }\n            if (user.connectType === WalletTypesEnum.TREZOR) {\n              return this.trezorService.signPayment(preparedTx).pipe(\n                switchMap((signed: any) => {\n                  return from(provider.sendTransaction(signed as string));\n                }),\n                switchMap((r) => {\n                  return of([action, r, nonce]);\n                })\n              );\n            }\n          }\n        ),\n        switchMap(([action, hash, nonce]) => {\n          if (hash === false) {\n            this.store.dispatch(new PaymentRemoveOne(action.payload.id));\n            this.snackBar.open(\n              this.staticPaymentTranslatedTexts['PAYMENT_CANCELLED'],\n              'close',\n              {\n                horizontalPosition: 'center',\n                verticalPosition: 'bottom',\n                duration: 15000,\n              }\n            );\n            this.store.dispatch(new PaymentCancelled());\n            this.store.dispatch(new PaymentRemoveOne(action.payload.id));\n            return of(false);\n          }\n          this.store.dispatch(\n            new PaymentUpsertOne({\n              ...action.payload,\n              paymentStatus: false,\n              paymentHash: hash,\n              paymentNonce: nonce,\n            })\n          );\n          const paymentResolved = new Subject<boolean>();\n          return this.pagesFacade.pageVisibility$.pipe(\n            withLatestFrom(this.store.pipe(select(getPayments))),\n            takeUntil(paymentResolved),\n            map((pvp) => {\n              const [pv, payments] = pvp;\n              const payment = payments[action.payload.id];\n              if (\n                payment &&\n                'paymentStatus' in payment &&\n                payment.paymentStatus === true\n              ) {\n                paymentResolved.next(false);\n                return;\n              }\n              if (pv === true) {\n                this.store.dispatch(\n                  new CheckPaymentFulfilled({\n                    ...action.payload,\n                    paymentHash: hash,\n                    paymentNonce: nonce,\n                  })\n                );\n              }\n            })\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  upsertPayment$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PaymentUpsertOne>(UpsertOnePayment),\n        withLatestFrom(this.store.pipe(select(getPayments))),\n        switchMap(([a, paymentState]) => {\n          const payments = paymentState as PaymentModel[];\n          let payment;\n          for (const p of payments) {\n            if (p.id === a.payload.id) {\n              payment = a.payload;\n            }\n          }\n          return of(payments);\n        }),\n        map((p) => {\n          return this.paymentStorageService.savePayments(p);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  archiveAllPayment$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PaymentArchiveAll>(ArchiveAllPayment),\n        withLatestFrom(this.store.pipe(select(getPayments))),\n        map(([action, payments]) => {\n          this.paymentStorageService.savePayments(payments);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  removeAllPayment$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<PaymentRemoveAll>(RemoveAllPayment),\n        map((action) => {\n          this.paymentStorageService.removePayments();\n        })\n      ),\n    { dispatch: false }\n  );\n\n  userCheckPaymentStatus$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<CheckPaymentFulfilled>(PaymentCheckFulfilled),\n        mergeMap((action) => {\n          const hasResolved = new Subject<boolean>();\n          return interval(generalConfigurations.timeToUpdateCheckoutPipe).pipe(\n            takeUntil(hasResolved),\n            switchMap((i) => {\n              const provider = globalAny.canvasProvider;\n              if (provider === undefined) {\n                return of(false);\n              }\n              return from(provider.getBlockNumber()).pipe(\n                switchMap((blockNumber) => {\n                  if (\n                    blockNumber === null ||\n                    blockNumber === false ||\n                    blockNumber === undefined\n                  ) {\n                    throw false;\n                  }\n                  const searchTxFromBlock = (blockNumber as number) - 5;\n                  const tx = {\n                    from: action.payload.paymentPayer,\n                    to: action.payload.paymentPayee,\n                    nonce: action.payload.paymentNonce,\n                  };\n                  return from(\n                    provider.getTransactionReceipt(action.payload.paymentHash)\n                  ).pipe(\n                    switchMap((foundTx) => {\n                      if (foundTx === null || foundTx === false) {\n                        return from(\n                          getTransactionByNonce(\n                            provider,\n                            searchTxFromBlock,\n                            tx.from,\n                            tx.nonce\n                          )\n                        ).pipe(\n                          switchMap((r) => {\n                            if (r === null) {\n                              return of(null);\n                            }\n                            return from(provider.getTransactionReceipt(r.hash));\n                          })\n                        );\n                      }\n                      return of(foundTx);\n                    }),\n                    catchError((e) => {\n                      return of(null);\n                    })\n                  );\n                }),\n                map((r: any) => {\n                  if (r === null || r === undefined) {\n                    return;\n                  }\n                  if (r.status === 0) {\n                    this.store.dispatch(\n                      new PaymentUpsertOne({\n                        id: action.payload.id,\n                        paymentHash: action.payload.paymentHash,\n                        paymentStatus: false,\n                        paymentError: PaymentErrorCodes.PAYMENT_FAILURE,\n                      })\n                    );\n                    hasResolved.next(false);\n                    return;\n                  }\n                  if (\n                    r.status === 1 &&\n                    r.confirmations >=\n                      generalConfigurations.maxConfirmationsUntilTxFinal\n                  ) {\n                    this.store.dispatch(\n                      new PaymentUpsertOne({\n                        id: action.payload.id,\n                        paymentDate:\n                          action.payload.paymentType === PaymentTypesEnum.COMMIT\n                            ? new Date().getTime()\n                            : action.payload.paymentDate,\n                        paymentHash: action.payload.paymentHash,\n                        paymentStatus: true,\n                        paymentError: PaymentErrorCodes.NONE,\n                      })\n                    );\n                    hasResolved.next(false);\n                    return;\n                  }\n                })\n              );\n            })\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Actions,\n  createEffect,\n  ofType,\n  ROOT_EFFECTS_INIT,\n} from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { ENSBookmarkStateModel } from 'src/app/models/states/ens-bookmark-interfaces';\nimport { BookmarksServiceService } from 'src/app/services/bookmarks';\nimport {\n  AddOneENSBookmark,\n  ENSBookmarkAddOne,\n  ENSBookmarkRemoveOne,\n  ENSBookmarkUpsertOne,\n  RemoveOneENSBookmark,\n  UpsertOneENSBookmark,\n} from '../actions';\nimport { getENSBookmarks } from '../selectors';\n\n@Injectable()\nexport class ENSBookmarkEffects {\n  constructor(\n    private actions$: Actions,\n    protected bookMarkService: BookmarksServiceService,\n    public store: Store<ENSBookmarkStateModel>\n  ) {}\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        map((p) => {\n          const bookmarks = this.bookMarkService.loadBookmarksAndFeed();\n          for (const b of Object.keys(bookmarks)) {\n            this.store.dispatch(\n              new ENSBookmarkAddOne(\n                {\n                  id: bookmarks[b].labelName,\n                  ...bookmarks[b],\n                },\n                false\n              )\n            );\n          }\n        })\n      ),\n    {\n      dispatch: false,\n    }\n  );\n\n  addOneBookmark$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSBookmarkAddOne>(AddOneENSBookmark),\n        filter((action) => action.toSave === true),\n        map((action) => {\n          this.bookMarkService.saveBookmark(action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  removeOneBookmark$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSBookmarkRemoveOne>(RemoveOneENSBookmark),\n        filter((action) => action.toSave === true),\n        withLatestFrom(this.store.pipe(select(getENSBookmarks))),\n        map((state) => {\n          const [action, bookmarks] = state;\n          this.bookMarkService.removeBookmark(bookmarks, action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  upsertOneBookmark$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSBookmarkUpsertOne>(UpsertOneENSBookmark),\n        filter((action) => action.toSave === true),\n        map((action) => {\n          this.bookMarkService.saveBookmark(action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Actions,\n  createEffect,\n  ofType,\n  ROOT_EFFECTS_INIT,\n} from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { ENSRegistrationStateModel } from 'src/app/models/states/ens-registration-interfaces';\nimport {\n  RegistrationFacilityService,\n  RegistrationServiceService,\n} from 'src/app/services/registration';\nimport {\n  AddOneENSRegistration,\n  ENSRegistrationAddOne,\n  ENSRegistrationRemoveAll,\n  ENSRegistrationUpsertOne,\n  RemoveAllENSRegistration,\n  RemoveOneENSRegistration,\n  UpsertOneENSRegistration,\n} from '../actions';\nimport { getENSRegistrations } from '../selectors';\n\n@Injectable()\nexport class ENSRegistrationEffects {\n  constructor(\n    private actions$: Actions,\n    protected registrationService: RegistrationServiceService,\n    protected registrationFacilityService: RegistrationFacilityService,\n    public store: Store<ENSRegistrationStateModel>\n  ) {}\n\n  init$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ROOT_EFFECTS_INIT),\n        map((p) => {\n          const registrations =\n            this.registrationService.loadRegistrationsAndFeed();\n          for (const b of Object.keys(registrations)) {\n            this.store.dispatch(\n              new ENSRegistrationAddOne(\n                {\n                  id: registrations[b].labelName,\n                  ...registrations[b],\n                },\n                false\n              )\n            );\n          }\n        })\n      ),\n    {\n      dispatch: false,\n    }\n  );\n\n  addOneRegistration$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSRegistrationAddOne>(AddOneENSRegistration),\n        filter((action) => action.toSave === true),\n        map((action) => {\n          this.registrationService.saveRegistrations(action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  removeOneRegistration$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSRegistrationAddOne>(RemoveOneENSRegistration),\n        filter((action) => action.toSave === true),\n        withLatestFrom(this.store.pipe(select(getENSRegistrations))),\n        map((state) => {\n          const [action, registrations] = state;\n          this.registrationService.removeRegistration(\n            registrations,\n            action.payload.labelName\n          );\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  removeAllRegistration$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSRegistrationRemoveAll>(RemoveAllENSRegistration),\n        map(() => {\n          this.registrationService.removeAllRegistrations();\n        })\n      ),\n\n    { dispatch: false }\n  );\n\n  upsertOneRegistration$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType<ENSRegistrationUpsertOne>(UpsertOneENSRegistration),\n        filter((action) => action.toSave === true),\n        map((action) => {\n          this.registrationService.saveRegistrations(action.payload);\n        })\n      ),\n\n    { dispatch: false }\n  );\n}\n","import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { EffectsModule } from '@ngrx/effects';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport {\n  BrowserModule,\n  HAMMER_GESTURE_CONFIG,\n} from '@angular/platform-browser';\nimport { MatButtonModule } from '@angular/material/button';\nimport {\n  MatDialogModule,\n  MAT_DIALOG_DATA,\n  MatDialogRef,\n} from '@angular/material/dialog';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { Intercept } from './services/intercept/intercept';\nimport { HammerJsConf } from './configurations';\nimport { serviceProviders } from './models';\nimport { NetworkStatusDialogComponent } from './widgets/network-status-dialog';\nimport { GenericDialogModule, TranslationModule } from './modules/miscs';\nimport {\n  ENSBookmarkReducers,\n  ENSRegistrationReducers,\n  NavigatorButtonsReducers,\n  NavigatorReducers,\n  PagesReducers,\n  PaymentReducers,\n  UserReducers,\n} from './store/reducers';\nimport {\n  ENSBookmarkEffects,\n  NavigatorEffects,\n  PagesEffects,\n  PaymentEffects,\n  UserEffects,\n} from './store/effects';\nimport { environment } from '../environments/environment';\nimport { ENSRegistrationEffects } from './store/effects';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n@NgModule({\n  declarations: [AppComponent, NetworkStatusDialogComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    RouterModule,\n    AppRoutingModule,\n    FlexLayoutModule,\n    MatProgressBarModule,\n    MatSnackBarModule,\n    TranslationModule,\n    StoreModule.forRoot(\n      {\n        UserState: UserReducers,\n        NavigatorState: NavigatorReducers,\n        PagesState: PagesReducers,\n        PaymentState: PaymentReducers,\n        NavigatorButtonsState: NavigatorButtonsReducers,\n        ENSRegistrationState: ENSRegistrationReducers,\n        ENSBookmarkState: ENSBookmarkReducers,\n      },\n      {\n        runtimeChecks: {\n          strictActionImmutability: false,\n        },\n      }\n    ),\n    EffectsModule.forRoot([\n      UserEffects,\n      NavigatorEffects,\n      PagesEffects,\n      PaymentEffects,\n      ENSRegistrationEffects,\n      ENSBookmarkEffects,\n    ]),\n    environment.deployed === true\n      ? []\n      : StoreDevtoolsModule.instrument({\n          maxAge: 200,\n        }),\n    MatDialogModule,\n    MatButtonModule,\n    GenericDialogModule,\n  ],\n  exports: [\n    NetworkStatusDialogComponent,\n    BrowserModule,\n    HttpClientModule,\n    RouterModule,\n    BrowserAnimationsModule,\n    FlexLayoutModule,\n    TranslationModule,\n    MatSnackBarModule,\n    GenericDialogModule,\n  ],\n  providers: [\n    ...serviceProviders,\n    {\n      provide: HAMMER_GESTURE_CONFIG,\n      useClass: HammerJsConf,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: Intercept,\n      multi: true,\n    },\n    { provide: MAT_DIALOG_DATA, useValue: {} },\n    { provide: MatDialogRef, useValue: {} },\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [NetworkStatusDialogComponent],\n  schemas: [NO_ERRORS_SCHEMA],\n})\nexport class AppModule {}\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\nimport { BehaviorSubject } from 'rxjs';\nimport { BootController } from './boot-control';\n\ndeclare global {\n  interface Window {\n    global: any;\n    process: any;\n    ethereumProvider: any;\n    etherscanProvider: any;\n  }\n}\n(window as any).global = window;\n(window as any).process = window;\n(window as any).process.browser = true;\n(window as any).process.version = '';\n(window as any).process.versions = { node: false };\n(window as any).global.appIsPaused = new BehaviorSubject(false);\n\nif (environment.production === true) {\n  enableProdMode();\n}\n\nexport function main(): any {\n  return platformBrowserDynamic().bootstrapModule(AppModule);\n}\n\nlet mainApp;\nif (module['hot']) {\n  module['hot'].accept();\n}\nconst boot = BootController.getbootControl()\n  .watchReboot()\n  .subscribe(() => {\n    if (mainApp) {\n      if ('ngRef' in window && 'destroy' in window['ngRef']) {\n        window['ngRef'].destroy();\n      }\n      window['ngRef'] = mainApp;\n    }\n    mainApp = main().catch((err) => console.error('Bootstrap error:', err));\n  });\nBootController.getbootControl().restart();\n"],"sourceRoot":"webpack:///","file":"main.05391177260f1096.js"}